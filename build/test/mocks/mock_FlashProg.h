/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FLASHPROG_H
#define _MOCK_FLASHPROG_H

#include "FlashProg.h"
#include "CException.h"

void mock_FlashProg_Init(void);
void mock_FlashProg_Destroy(void);
void mock_FlashProg_Verify(void);




#define readPGD_IgnoreAndReturn(cmock_retval) readPGD_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void readPGD_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16 cmock_to_return);
#define readPGD_ExpectAndReturn(cmock_retval) readPGD_CMockExpectAndReturn(__LINE__, cmock_retval)
void readPGD_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16 cmock_to_return);
typedef uint16 (* CMOCK_readPGD_CALLBACK)(int cmock_num_calls);
void readPGD_StubWithCallback(CMOCK_readPGD_CALLBACK Callback);
#define readPGD_ExpectAndThrow(cmock_to_throw) readPGD_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void readPGD_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define writePGD_Ignore() writePGD_CMockIgnore()
void writePGD_CMockIgnore(void);
#define writePGD_Expect(data) writePGD_CMockExpect(__LINE__, data)
void writePGD_CMockExpect(UNITY_LINE_TYPE cmock_line, int data);
typedef void (* CMOCK_writePGD_CALLBACK)(int data, int cmock_num_calls);
void writePGD_StubWithCallback(CMOCK_writePGD_CALLBACK Callback);
#define writePGD_ExpectAndThrow(data, cmock_to_throw) writePGD_CMockExpectAndThrow(__LINE__, data, cmock_to_throw)
void writePGD_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int data, CEXCEPTION_T cmock_to_throw);
#define PGC_high_Ignore() PGC_high_CMockIgnore()
void PGC_high_CMockIgnore(void);
#define PGC_high_Expect() PGC_high_CMockExpect(__LINE__)
void PGC_high_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_PGC_high_CALLBACK)(int cmock_num_calls);
void PGC_high_StubWithCallback(CMOCK_PGC_high_CALLBACK Callback);
#define PGC_high_ExpectAndThrow(cmock_to_throw) PGC_high_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void PGC_high_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define PGC_low_Ignore() PGC_low_CMockIgnore()
void PGC_low_CMockIgnore(void);
#define PGC_low_Expect() PGC_low_CMockExpect(__LINE__)
void PGC_low_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_PGC_low_CALLBACK)(int cmock_num_calls);
void PGC_low_StubWithCallback(CMOCK_PGC_low_CALLBACK Callback);
#define PGC_low_ExpectAndThrow(cmock_to_throw) PGC_low_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void PGC_low_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define MCLR_low_Ignore() MCLR_low_CMockIgnore()
void MCLR_low_CMockIgnore(void);
#define MCLR_low_Expect() MCLR_low_CMockExpect(__LINE__)
void MCLR_low_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MCLR_low_CALLBACK)(int cmock_num_calls);
void MCLR_low_StubWithCallback(CMOCK_MCLR_low_CALLBACK Callback);
#define MCLR_low_ExpectAndThrow(cmock_to_throw) MCLR_low_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void MCLR_low_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define MCLR_high_Ignore() MCLR_high_CMockIgnore()
void MCLR_high_CMockIgnore(void);
#define MCLR_high_Expect() MCLR_high_CMockExpect(__LINE__)
void MCLR_high_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_MCLR_high_CALLBACK)(int cmock_num_calls);
void MCLR_high_StubWithCallback(CMOCK_MCLR_high_CALLBACK Callback);
#define MCLR_high_ExpectAndThrow(cmock_to_throw) MCLR_high_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void MCLR_high_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define PGM_low_Ignore() PGM_low_CMockIgnore()
void PGM_low_CMockIgnore(void);
#define PGM_low_Expect() PGM_low_CMockExpect(__LINE__)
void PGM_low_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_PGM_low_CALLBACK)(int cmock_num_calls);
void PGM_low_StubWithCallback(CMOCK_PGM_low_CALLBACK Callback);
#define PGM_low_ExpectAndThrow(cmock_to_throw) PGM_low_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void PGM_low_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define PGM_high_Ignore() PGM_high_CMockIgnore()
void PGM_high_CMockIgnore(void);
#define PGM_high_Expect() PGM_high_CMockExpect(__LINE__)
void PGM_high_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_PGM_high_CALLBACK)(int cmock_num_calls);
void PGM_high_StubWithCallback(CMOCK_PGM_high_CALLBACK Callback);
#define PGM_high_ExpectAndThrow(cmock_to_throw) PGM_high_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void PGM_high_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define PGD_high_Ignore() PGD_high_CMockIgnore()
void PGD_high_CMockIgnore(void);
#define PGD_high_Expect() PGD_high_CMockExpect(__LINE__)
void PGD_high_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_PGD_high_CALLBACK)(int cmock_num_calls);
void PGD_high_StubWithCallback(CMOCK_PGD_high_CALLBACK Callback);
#define PGD_high_ExpectAndThrow(cmock_to_throw) PGD_high_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void PGD_high_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define PGD_low_Ignore() PGD_low_CMockIgnore()
void PGD_low_CMockIgnore(void);
#define PGD_low_Expect() PGD_low_CMockExpect(__LINE__)
void PGD_low_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_PGD_low_CALLBACK)(int cmock_num_calls);
void PGD_low_StubWithCallback(CMOCK_PGD_low_CALLBACK Callback);
#define PGD_low_ExpectAndThrow(cmock_to_throw) PGD_low_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void PGD_low_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define enter_HVP_Ignore() enter_HVP_CMockIgnore()
void enter_HVP_CMockIgnore(void);
#define enter_HVP_Expect() enter_HVP_CMockExpect(__LINE__)
void enter_HVP_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_enter_HVP_CALLBACK)(int cmock_num_calls);
void enter_HVP_StubWithCallback(CMOCK_enter_HVP_CALLBACK Callback);
#define enter_HVP_ExpectAndThrow(cmock_to_throw) enter_HVP_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void enter_HVP_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define exit_HVP_Ignore() exit_HVP_CMockIgnore()
void exit_HVP_CMockIgnore(void);
#define exit_HVP_Expect() exit_HVP_CMockExpect(__LINE__)
void exit_HVP_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_exit_HVP_CALLBACK)(int cmock_num_calls);
void exit_HVP_StubWithCallback(CMOCK_exit_HVP_CALLBACK Callback);
#define exit_HVP_ExpectAndThrow(cmock_to_throw) exit_HVP_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void exit_HVP_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define bulkErase_Ignore() bulkErase_CMockIgnore()
void bulkErase_CMockIgnore(void);
#define bulkErase_Expect() bulkErase_CMockExpect(__LINE__)
void bulkErase_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_bulkErase_CALLBACK)(int cmock_num_calls);
void bulkErase_StubWithCallback(CMOCK_bulkErase_CALLBACK Callback);
#define bulkErase_ExpectAndThrow(cmock_to_throw) bulkErase_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void bulkErase_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define readDeviceID1_Ignore() readDeviceID1_CMockIgnore()
void readDeviceID1_CMockIgnore(void);
#define readDeviceID1_Expect() readDeviceID1_CMockExpect(__LINE__)
void readDeviceID1_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_readDeviceID1_CALLBACK)(int cmock_num_calls);
void readDeviceID1_StubWithCallback(CMOCK_readDeviceID1_CALLBACK Callback);
#define readDeviceID1_ExpectAndThrow(cmock_to_throw) readDeviceID1_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void readDeviceID1_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define readDeviceID2_Ignore() readDeviceID2_CMockIgnore()
void readDeviceID2_CMockIgnore(void);
#define readDeviceID2_Expect() readDeviceID2_CMockExpect(__LINE__)
void readDeviceID2_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_readDeviceID2_CALLBACK)(int cmock_num_calls);
void readDeviceID2_StubWithCallback(CMOCK_readDeviceID2_CALLBACK Callback);
#define readDeviceID2_ExpectAndThrow(cmock_to_throw) readDeviceID2_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void readDeviceID2_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define enableWrite_Ignore() enableWrite_CMockIgnore()
void enableWrite_CMockIgnore(void);
#define enableWrite_Expect() enableWrite_CMockExpect(__LINE__)
void enableWrite_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_enableWrite_CALLBACK)(int cmock_num_calls);
void enableWrite_StubWithCallback(CMOCK_enableWrite_CALLBACK Callback);
#define enableWrite_ExpectAndThrow(cmock_to_throw) enableWrite_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void enableWrite_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define flashSetAddress_Ignore() flashSetAddress_CMockIgnore()
void flashSetAddress_CMockIgnore(void);
#define flashSetAddress_Expect(address) flashSetAddress_CMockExpect(__LINE__, address)
void flashSetAddress_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32 address);
typedef void (* CMOCK_flashSetAddress_CALLBACK)(uint32 address, int cmock_num_calls);
void flashSetAddress_StubWithCallback(CMOCK_flashSetAddress_CALLBACK Callback);
#define flashSetAddress_ExpectAndThrow(address, cmock_to_throw) flashSetAddress_CMockExpectAndThrow(__LINE__, address, cmock_to_throw)
void flashSetAddress_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint32 address, CEXCEPTION_T cmock_to_throw);
#define writeToBuffer_Ignore() writeToBuffer_CMockIgnore()
void writeToBuffer_CMockIgnore(void);
#define writeToBuffer_Expect(data) writeToBuffer_CMockExpect(__LINE__, data)
void writeToBuffer_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16 data);
typedef void (* CMOCK_writeToBuffer_CALLBACK)(uint16 data, int cmock_num_calls);
void writeToBuffer_StubWithCallback(CMOCK_writeToBuffer_CALLBACK Callback);
#define writeToBuffer_ExpectAndThrow(data, cmock_to_throw) writeToBuffer_CMockExpectAndThrow(__LINE__, data, cmock_to_throw)
void writeToBuffer_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint16 data, CEXCEPTION_T cmock_to_throw);
#define flashWriteAndProgram_Ignore() flashWriteAndProgram_CMockIgnore()
void flashWriteAndProgram_CMockIgnore(void);
#define flashWriteAndProgram_Expect(data) flashWriteAndProgram_CMockExpect(__LINE__, data)
void flashWriteAndProgram_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16 data);
typedef void (* CMOCK_flashWriteAndProgram_CALLBACK)(uint16 data, int cmock_num_calls);
void flashWriteAndProgram_StubWithCallback(CMOCK_flashWriteAndProgram_CALLBACK Callback);
#define flashWriteAndProgram_ExpectAndThrow(data, cmock_to_throw) flashWriteAndProgram_CMockExpectAndThrow(__LINE__, data, cmock_to_throw)
void flashWriteAndProgram_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint16 data, CEXCEPTION_T cmock_to_throw);
#define flashWrite8Bits_Ignore() flashWrite8Bits_CMockIgnore()
void flashWrite8Bits_CMockIgnore(void);
#define flashWrite8Bits_Expect(data) flashWrite8Bits_CMockExpect(__LINE__, data)
void flashWrite8Bits_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8 data);
typedef void (* CMOCK_flashWrite8Bits_CALLBACK)(uint8 data, int cmock_num_calls);
void flashWrite8Bits_StubWithCallback(CMOCK_flashWrite8Bits_CALLBACK Callback);
#define flashWrite8Bits_ExpectAndThrow(data, cmock_to_throw) flashWrite8Bits_CMockExpectAndThrow(__LINE__, data, cmock_to_throw)
void flashWrite8Bits_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint8 data, CEXCEPTION_T cmock_to_throw);
#define flashRead16Bits_IgnoreAndReturn(cmock_retval) flashRead16Bits_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void flashRead16Bits_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16 cmock_to_return);
#define flashRead16Bits_ExpectAndReturn(cmock_retval) flashRead16Bits_CMockExpectAndReturn(__LINE__, cmock_retval)
void flashRead16Bits_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16 cmock_to_return);
typedef uint16 (* CMOCK_flashRead16Bits_CALLBACK)(int cmock_num_calls);
void flashRead16Bits_StubWithCallback(CMOCK_flashRead16Bits_CALLBACK Callback);
#define flashRead16Bits_ExpectAndThrow(cmock_to_throw) flashRead16Bits_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void flashRead16Bits_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define flashRead8Bits_IgnoreAndReturn(cmock_retval) flashRead8Bits_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void flashRead8Bits_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8 cmock_to_return);
#define flashRead8Bits_ExpectAndReturn(cmock_retval) flashRead8Bits_CMockExpectAndReturn(__LINE__, cmock_retval)
void flashRead8Bits_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8 cmock_to_return);
typedef uint8 (* CMOCK_flashRead8Bits_CALLBACK)(int cmock_num_calls);
void flashRead8Bits_StubWithCallback(CMOCK_flashRead8Bits_CALLBACK Callback);
#define flashRead8Bits_ExpectAndThrow(cmock_to_throw) flashRead8Bits_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void flashRead8Bits_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define flashWriteHalfBlock_Ignore() flashWriteHalfBlock_CMockIgnore()
void flashWriteHalfBlock_CMockIgnore(void);
#define flashWriteHalfBlock_Expect(data, size, halfBlockNumber) flashWriteHalfBlock_CMockExpect(__LINE__, data, size, halfBlockNumber)
void flashWriteHalfBlock_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16* data, uint16 size, uint32 halfBlockNumber);
typedef void (* CMOCK_flashWriteHalfBlock_CALLBACK)(uint16* data, uint16 size, uint32 halfBlockNumber, int cmock_num_calls);
void flashWriteHalfBlock_StubWithCallback(CMOCK_flashWriteHalfBlock_CALLBACK Callback);
#define flashWriteHalfBlock_ExpectAndThrow(data, size, halfBlockNumber, cmock_to_throw) flashWriteHalfBlock_CMockExpectAndThrow(__LINE__, data, size, halfBlockNumber, cmock_to_throw)
void flashWriteHalfBlock_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint16* data, uint16 size, uint32 halfBlockNumber, CEXCEPTION_T cmock_to_throw);
#define flashWriteBlock_Ignore() flashWriteBlock_CMockIgnore()
void flashWriteBlock_CMockIgnore(void);
#define flashWriteBlock_Expect(firstHalf, secondHalf, blockNumber) flashWriteBlock_CMockExpect(__LINE__, firstHalf, secondHalf, blockNumber)
void flashWriteBlock_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16* firstHalf, uint16* secondHalf, uint32 blockNumber);
typedef void (* CMOCK_flashWriteBlock_CALLBACK)(uint16* firstHalf, uint16* secondHalf, uint32 blockNumber, int cmock_num_calls);
void flashWriteBlock_StubWithCallback(CMOCK_flashWriteBlock_CALLBACK Callback);
#define flashWriteBlock_ExpectAndThrow(firstHalf, secondHalf, blockNumber, cmock_to_throw) flashWriteBlock_CMockExpectAndThrow(__LINE__, firstHalf, secondHalf, blockNumber, cmock_to_throw)
void flashWriteBlock_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint16* firstHalf, uint16* secondHalf, uint32 blockNumber, CEXCEPTION_T cmock_to_throw);
#define flashReadBlock_Ignore() flashReadBlock_CMockIgnore()
void flashReadBlock_CMockIgnore(void);
#define flashReadBlock_Expect(data, size, blockNumber) flashReadBlock_CMockExpect(__LINE__, data, size, blockNumber)
void flashReadBlock_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16* data, uint16 size, uint32 blockNumber);
typedef void (* CMOCK_flashReadBlock_CALLBACK)(uint16* data, uint16 size, uint32 blockNumber, int cmock_num_calls);
void flashReadBlock_StubWithCallback(CMOCK_flashReadBlock_CALLBACK Callback);
#define flashReadBlock_ExpectAndThrow(data, size, blockNumber, cmock_to_throw) flashReadBlock_CMockExpectAndThrow(__LINE__, data, size, blockNumber, cmock_to_throw)
void flashReadBlock_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint16* data, uint16 size, uint32 blockNumber, CEXCEPTION_T cmock_to_throw);
#define rowErase_Ignore() rowErase_CMockIgnore()
void rowErase_CMockIgnore(void);
#define rowErase_Expect(address) rowErase_CMockExpect(__LINE__, address)
void rowErase_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32 address);
typedef void (* CMOCK_rowErase_CALLBACK)(uint32 address, int cmock_num_calls);
void rowErase_StubWithCallback(CMOCK_rowErase_CALLBACK Callback);
#define rowErase_ExpectAndThrow(address, cmock_to_throw) rowErase_CMockExpectAndThrow(__LINE__, address, cmock_to_throw)
void rowErase_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint32 address, CEXCEPTION_T cmock_to_throw);

#endif
