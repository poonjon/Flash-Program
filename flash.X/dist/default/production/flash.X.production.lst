

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Dec 10 22:11:18 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46  0000                     _PORTDbits	set	3971
    47  0000                     _TRISDbits	set	3989
    48                           
    49 ;;
    50 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
    51 ;;
    52 ;; *************** function _main *****************
    53 ;; Defined at:
    54 ;;		line 29 in file "../src/PIC18/Main.c"
    55 ;; Parameters:    Size  Location     Type
    56 ;;		None
    57 ;; Auto vars:     Size  Location     Type
    58 ;;  blockWrite5    64   64[BANK0 ] unsigned int [32]
    59 ;;  blockRead      64    0[BANK0 ] unsigned int [32]
    60 ;;  blockWrite4    32   64[BANK2 ] unsigned int [16]
    61 ;;  blockWrite3    32   32[BANK2 ] unsigned int [16]
    62 ;;  blockWrite2    32    0[BANK2 ] unsigned int [16]
    63 ;;  blockWrite     32  222[BANK1 ] unsigned int [16]
    64 ;;  incomingData    8    0        unsigned int [4]
    65 ;;  address         4   73[COMRAM] unsigned long 
    66 ;;  i               2  254[BANK1 ] int 
    67 ;;  newData4        2   87[COMRAM] unsigned int 
    68 ;;  newData3        2   85[COMRAM] unsigned int 
    69 ;;  newData2        2   83[COMRAM] unsigned int 
    70 ;;  newData         2   81[COMRAM] unsigned int 
    71 ;;  data            2   79[COMRAM] unsigned int 
    72 ;;  newData5        2   77[COMRAM] unsigned int 
    73 ;; Return value:  Size  Location     Type
    74 ;;		None               void
    75 ;; Registers used:
    76 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
    77 ;; Tracked objects:
    78 ;;		On entry : 0/0
    79 ;;		On exit  : 0/0
    80 ;;		Unchanged: 0/0
    81 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
    82 ;;      Params:         0       0       0       0       0       0       0
    83 ;;      Locals:        16     128      34      96       0       0       0
    84 ;;      Temps:          2       0       0       0       0       0       0
    85 ;;      Totals:        18     128      34      96       0       0       0
    86 ;;Total ram usage:      276 bytes
    87 ;; Hardware stack levels required when called:    7
    88 ;; This function calls:
    89 ;;		_bulkErase
    90 ;;		_enableWrite
    91 ;;		_enter_HVP
    92 ;;		_exit_HVP
    93 ;;		_flashReadBlock
    94 ;;		_flashWriteBlock
    95 ;;		_flashWriteData
    96 ;;		_trisInit
    97 ;; This function is called by:
    98 ;;		Startup code after reset
    99 ;; This function uses a non-reentrant model
   100 ;;
   101                           
   102                           	psect	text0
   103  007916                     __ptext0:
   104                           	opt stack 0
   105  007916                     _main:
   106                           	opt stack 24
   107                           
   108                           ;Main.c: 30: int i;
   109                           ;Main.c: 31: uint16 data = 0x0000;
   110                           
   111                           ;incstack = 0
   112  007916  0E00               	movlw	0
   113  007918  6E51               	movwf	main@data+1,c
   114  00791A  0E00               	movlw	0
   115  00791C  6E50               	movwf	main@data,c
   116                           
   117                           ;Main.c: 32: uint16 newData = 0x1000;
   118  00791E  0E10               	movlw	16
   119  007920  6E53               	movwf	main@newData+1,c
   120  007922  0E00               	movlw	0
   121  007924  6E52               	movwf	main@newData,c
   122                           
   123                           ;Main.c: 33: uint16 newData2 = 0x1000;
   124  007926  0E10               	movlw	16
   125  007928  6E55               	movwf	main@newData2+1,c
   126  00792A  0E00               	movlw	0
   127  00792C  6E54               	movwf	main@newData2,c
   128                           
   129                           ;Main.c: 34: uint16 newData3 = 0x1000;
   130  00792E  0E10               	movlw	16
   131  007930  6E57               	movwf	main@newData3+1,c
   132  007932  0E00               	movlw	0
   133  007934  6E56               	movwf	main@newData3,c
   134                           
   135                           ;Main.c: 35: uint16 newData4 = 0x1000;
   136  007936  0E10               	movlw	16
   137  007938  6E59               	movwf	main@newData4+1,c
   138  00793A  0E00               	movlw	0
   139  00793C  6E58               	movwf	main@newData4,c
   140                           
   141                           ;Main.c: 36: uint16 newData5 = 0x5000;
   142  00793E  0E50               	movlw	80
   143  007940  6E4F               	movwf	main@newData5+1,c
   144  007942  0E00               	movlw	0
   145  007944  6E4E               	movwf	main@newData5,c
   146                           
   147                           ;Main.c: 37: uint32 address = 0x000000;
   148  007946  0E00               	movlw	0
   149  007948  6E4A               	movwf	main@address,c
   150  00794A  0E00               	movlw	0
   151  00794C  6E4B               	movwf	main@address+1,c
   152  00794E  0E00               	movlw	0
   153  007950  6E4C               	movwf	main@address+2,c
   154  007952  0E00               	movlw	0
   155  007954  6E4D               	movwf	main@address+3,c
   156                           
   157                           ;Main.c: 38: uint16 blockRead[32];
   158                           ;Main.c: 39: uint16 blockWrite[16];
   159                           ;Main.c: 40: uint16 blockWrite2[16];
   160                           ;Main.c: 41: uint16 blockWrite3[16];
   161                           ;Main.c: 42: uint16 blockWrite4[16];
   162                           ;Main.c: 43: uint16 blockWrite5[32];
   163                           ;Main.c: 44: uint16 incomingData[4];
   164                           ;Main.c: 46: for(i = 0 ; i < 16 ; i++){
   165  007956  0E00               	movlw	0
   166  007958  0101               	movlb	1	; () banked
   167  00795A  6FFF               	movwf	(main@i+1)& (0+255),b
   168  00795C  0E00               	movlw	0
   169  00795E  0101               	movlb	1	; () banked
   170  007960  6FFE               	movwf	main@i& (0+255),b
   171  007962                     
   172                           ; BSR set to: 1
   173  007962  0101               	movlb	1	; () banked
   174  007964  51FF               	movf	(main@i+1)& (0+255),w,b
   175  007966  0A80               	xorlw	128
   176  007968  0F80               	addlw	-128
   177  00796A  0E10               	movlw	16
   178  00796C  B4D8               	btfsc	status,2,c
   179  00796E  5DFE               	subwf	main@i& (0+255),w,b
   180  007970  B0D8               	btfsc	status,0,c
   181  007972  D019               	goto	l1840
   182                           
   183                           ; BSR set to: 1
   184                           ;Main.c: 47: blockWrite[i] = data;
   185                           
   186                           ; BSR set to: 1
   187                           
   188                           ; BSR set to: 1
   189  007974  0EDE               	movlw	low main@blockWrite
   190  007976  6E48               	movwf	??_main& (0+255),c
   191  007978  0E01               	movlw	high main@blockWrite
   192  00797A  6E49               	movwf	(??_main+1)& (0+255),c
   193  00797C  90D8               	bcf	status,0,c
   194  00797E  0101               	movlb	1	; () banked
   195  007980  35FE               	rlcf	main@i& (0+255),w,b
   196  007982  6ED9               	movwf	fsr2l,c
   197  007984  0101               	movlb	1	; () banked
   198  007986  35FF               	rlcf	(main@i+1)& (0+255),w,b
   199  007988  6EDA               	movwf	fsr2h,c
   200  00798A  5048               	movf	??_main,w,c
   201  00798C  26D9               	addwf	fsr2l,f,c
   202  00798E  5049               	movf	??_main+1,w,c
   203  007990  22DA               	addwfc	fsr2h,f,c
   204  007992  C050  FFDE         	movff	main@data,postinc2
   205  007996  C051  FFDD         	movff	main@data+1,postdec2
   206                           
   207                           ; BSR set to: 1
   208                           ;Main.c: 48: data++;
   209  00799A  4A50               	infsnz	main@data,f,c
   210  00799C  2A51               	incf	main@data+1,f,c
   211                           
   212                           ; BSR set to: 1
   213  00799E  0101               	movlb	1	; () banked
   214  0079A0  4BFE               	infsnz	main@i& (0+255),f,b
   215  0079A2  2BFF               	incf	(main@i+1)& (0+255),f,b
   216  0079A4  D7DE               	goto	L1
   217  0079A6                     l1840:
   218                           
   219                           ; BSR set to: 1
   220                           ;Main.c: 49: }
   221                           ;Main.c: 50: for(i = 0 ; i < 16 ; i++){
   222  0079A6  0E00               	movlw	0
   223  0079A8  0101               	movlb	1	; () banked
   224  0079AA  6FFF               	movwf	(main@i+1)& (0+255),b
   225  0079AC  0E00               	movlw	0
   226  0079AE  0101               	movlb	1	; () banked
   227  0079B0  6FFE               	movwf	main@i& (0+255),b
   228  0079B2                     
   229                           ; BSR set to: 1
   230  0079B2  0101               	movlb	1	; () banked
   231  0079B4  51FF               	movf	(main@i+1)& (0+255),w,b
   232  0079B6  0A80               	xorlw	128
   233  0079B8  0F80               	addlw	-128
   234  0079BA  0E10               	movlw	16
   235  0079BC  B4D8               	btfsc	status,2,c
   236  0079BE  5DFE               	subwf	main@i& (0+255),w,b
   237  0079C0  B0D8               	btfsc	status,0,c
   238  0079C2  D019               	goto	l1854
   239                           
   240                           ; BSR set to: 1
   241                           ;Main.c: 51: blockWrite2[i] = newData;
   242                           
   243                           ; BSR set to: 1
   244                           
   245                           ; BSR set to: 1
   246  0079C4  0E60               	movlw	low main@blockWrite2
   247  0079C6  6E48               	movwf	??_main& (0+255),c
   248  0079C8  0E02               	movlw	high main@blockWrite2
   249  0079CA  6E49               	movwf	(??_main+1)& (0+255),c
   250  0079CC  90D8               	bcf	status,0,c
   251  0079CE  0101               	movlb	1	; () banked
   252  0079D0  35FE               	rlcf	main@i& (0+255),w,b
   253  0079D2  6ED9               	movwf	fsr2l,c
   254  0079D4  0101               	movlb	1	; () banked
   255  0079D6  35FF               	rlcf	(main@i+1)& (0+255),w,b
   256  0079D8  6EDA               	movwf	fsr2h,c
   257  0079DA  5048               	movf	??_main,w,c
   258  0079DC  26D9               	addwf	fsr2l,f,c
   259  0079DE  5049               	movf	??_main+1,w,c
   260  0079E0  22DA               	addwfc	fsr2h,f,c
   261  0079E2  C052  FFDE         	movff	main@newData,postinc2
   262  0079E6  C053  FFDD         	movff	main@newData+1,postdec2
   263                           
   264                           ; BSR set to: 1
   265                           ;Main.c: 52: newData++;
   266  0079EA  4A52               	infsnz	main@newData,f,c
   267  0079EC  2A53               	incf	main@newData+1,f,c
   268                           
   269                           ; BSR set to: 1
   270  0079EE  0101               	movlb	1	; () banked
   271  0079F0  4BFE               	infsnz	main@i& (0+255),f,b
   272  0079F2  2BFF               	incf	(main@i+1)& (0+255),f,b
   273  0079F4  D7DE               	goto	L2
   274  0079F6                     l1854:
   275                           
   276                           ; BSR set to: 1
   277                           ;Main.c: 53: }
   278                           ;Main.c: 55: for(i = 0 ; i < 16 ; i++){
   279  0079F6  0E00               	movlw	0
   280  0079F8  0101               	movlb	1	; () banked
   281  0079FA  6FFF               	movwf	(main@i+1)& (0+255),b
   282  0079FC  0E00               	movlw	0
   283  0079FE  0101               	movlb	1	; () banked
   284  007A00  6FFE               	movwf	main@i& (0+255),b
   285  007A02                     
   286                           ; BSR set to: 1
   287  007A02  0101               	movlb	1	; () banked
   288  007A04  51FF               	movf	(main@i+1)& (0+255),w,b
   289  007A06  0A80               	xorlw	128
   290  007A08  0F80               	addlw	-128
   291  007A0A  0E10               	movlw	16
   292  007A0C  B4D8               	btfsc	status,2,c
   293  007A0E  5DFE               	subwf	main@i& (0+255),w,b
   294  007A10  B0D8               	btfsc	status,0,c
   295  007A12  D019               	goto	l1868
   296                           
   297                           ; BSR set to: 1
   298                           ;Main.c: 56: blockWrite3[i] = newData2;
   299                           
   300                           ; BSR set to: 1
   301                           
   302                           ; BSR set to: 1
   303  007A14  0E80               	movlw	low main@blockWrite3
   304  007A16  6E48               	movwf	??_main& (0+255),c
   305  007A18  0E02               	movlw	high main@blockWrite3
   306  007A1A  6E49               	movwf	(??_main+1)& (0+255),c
   307  007A1C  90D8               	bcf	status,0,c
   308  007A1E  0101               	movlb	1	; () banked
   309  007A20  35FE               	rlcf	main@i& (0+255),w,b
   310  007A22  6ED9               	movwf	fsr2l,c
   311  007A24  0101               	movlb	1	; () banked
   312  007A26  35FF               	rlcf	(main@i+1)& (0+255),w,b
   313  007A28  6EDA               	movwf	fsr2h,c
   314  007A2A  5048               	movf	??_main,w,c
   315  007A2C  26D9               	addwf	fsr2l,f,c
   316  007A2E  5049               	movf	??_main+1,w,c
   317  007A30  22DA               	addwfc	fsr2h,f,c
   318  007A32  C054  FFDE         	movff	main@newData2,postinc2
   319  007A36  C055  FFDD         	movff	main@newData2+1,postdec2
   320                           
   321                           ; BSR set to: 1
   322                           ;Main.c: 57: newData2++;
   323  007A3A  4A54               	infsnz	main@newData2,f,c
   324  007A3C  2A55               	incf	main@newData2+1,f,c
   325                           
   326                           ; BSR set to: 1
   327  007A3E  0101               	movlb	1	; () banked
   328  007A40  4BFE               	infsnz	main@i& (0+255),f,b
   329  007A42  2BFF               	incf	(main@i+1)& (0+255),f,b
   330  007A44  D7DE               	goto	L3
   331  007A46                     l1868:
   332                           
   333                           ; BSR set to: 1
   334                           ;Main.c: 58: }
   335                           ;Main.c: 59: for(i = 0 ; i < 16 ; i++){
   336  007A46  0E00               	movlw	0
   337  007A48  0101               	movlb	1	; () banked
   338  007A4A  6FFF               	movwf	(main@i+1)& (0+255),b
   339  007A4C  0E00               	movlw	0
   340  007A4E  0101               	movlb	1	; () banked
   341  007A50  6FFE               	movwf	main@i& (0+255),b
   342  007A52                     
   343                           ; BSR set to: 1
   344  007A52  0101               	movlb	1	; () banked
   345  007A54  51FF               	movf	(main@i+1)& (0+255),w,b
   346  007A56  0A80               	xorlw	128
   347  007A58  0F80               	addlw	-128
   348  007A5A  0E10               	movlw	16
   349  007A5C  B4D8               	btfsc	status,2,c
   350  007A5E  5DFE               	subwf	main@i& (0+255),w,b
   351  007A60  B0D8               	btfsc	status,0,c
   352  007A62  D019               	goto	l1882
   353                           
   354                           ; BSR set to: 1
   355                           ;Main.c: 60: blockWrite4[i] = newData3;
   356                           
   357                           ; BSR set to: 1
   358                           
   359                           ; BSR set to: 1
   360  007A64  0EA0               	movlw	low main@blockWrite4
   361  007A66  6E48               	movwf	??_main& (0+255),c
   362  007A68  0E02               	movlw	high main@blockWrite4
   363  007A6A  6E49               	movwf	(??_main+1)& (0+255),c
   364  007A6C  90D8               	bcf	status,0,c
   365  007A6E  0101               	movlb	1	; () banked
   366  007A70  35FE               	rlcf	main@i& (0+255),w,b
   367  007A72  6ED9               	movwf	fsr2l,c
   368  007A74  0101               	movlb	1	; () banked
   369  007A76  35FF               	rlcf	(main@i+1)& (0+255),w,b
   370  007A78  6EDA               	movwf	fsr2h,c
   371  007A7A  5048               	movf	??_main,w,c
   372  007A7C  26D9               	addwf	fsr2l,f,c
   373  007A7E  5049               	movf	??_main+1,w,c
   374  007A80  22DA               	addwfc	fsr2h,f,c
   375  007A82  C056  FFDE         	movff	main@newData3,postinc2
   376  007A86  C057  FFDD         	movff	main@newData3+1,postdec2
   377                           
   378                           ; BSR set to: 1
   379                           ;Main.c: 61: newData3++;
   380  007A8A  4A56               	infsnz	main@newData3,f,c
   381  007A8C  2A57               	incf	main@newData3+1,f,c
   382                           
   383                           ; BSR set to: 1
   384  007A8E  0101               	movlb	1	; () banked
   385  007A90  4BFE               	infsnz	main@i& (0+255),f,b
   386  007A92  2BFF               	incf	(main@i+1)& (0+255),f,b
   387  007A94  D7DE               	goto	L4
   388  007A96                     l1882:
   389                           
   390                           ; BSR set to: 1
   391                           ;Main.c: 62: }
   392                           ;Main.c: 63: for(i = 0 ; i < 32 ; i++){
   393  007A96  0E00               	movlw	0
   394  007A98  0101               	movlb	1	; () banked
   395  007A9A  6FFF               	movwf	(main@i+1)& (0+255),b
   396  007A9C  0E00               	movlw	0
   397  007A9E  0101               	movlb	1	; () banked
   398  007AA0  6FFE               	movwf	main@i& (0+255),b
   399  007AA2                     
   400                           ; BSR set to: 1
   401  007AA2  0101               	movlb	1	; () banked
   402  007AA4  51FF               	movf	(main@i+1)& (0+255),w,b
   403  007AA6  0A80               	xorlw	128
   404  007AA8  0F80               	addlw	-128
   405  007AAA  0E20               	movlw	32
   406  007AAC  B4D8               	btfsc	status,2,c
   407  007AAE  5DFE               	subwf	main@i& (0+255),w,b
   408  007AB0  B0D8               	btfsc	status,0,c
   409  007AB2  D019               	goto	l1896
   410                           
   411                           ; BSR set to: 1
   412                           ;Main.c: 64: blockWrite5[i] = newData4;
   413                           
   414                           ; BSR set to: 1
   415                           
   416                           ; BSR set to: 1
   417  007AB4  0EC0               	movlw	low main@blockWrite5
   418  007AB6  6E48               	movwf	??_main& (0+255),c
   419  007AB8  0E00               	movlw	high main@blockWrite5
   420  007ABA  6E49               	movwf	(??_main+1)& (0+255),c
   421  007ABC  90D8               	bcf	status,0,c
   422  007ABE  0101               	movlb	1	; () banked
   423  007AC0  35FE               	rlcf	main@i& (0+255),w,b
   424  007AC2  6ED9               	movwf	fsr2l,c
   425  007AC4  0101               	movlb	1	; () banked
   426  007AC6  35FF               	rlcf	(main@i+1)& (0+255),w,b
   427  007AC8  6EDA               	movwf	fsr2h,c
   428  007ACA  5048               	movf	??_main,w,c
   429  007ACC  26D9               	addwf	fsr2l,f,c
   430  007ACE  5049               	movf	??_main+1,w,c
   431  007AD0  22DA               	addwfc	fsr2h,f,c
   432  007AD2  C058  FFDE         	movff	main@newData4,postinc2
   433  007AD6  C059  FFDD         	movff	main@newData4+1,postdec2
   434                           
   435                           ; BSR set to: 1
   436                           ;Main.c: 65: newData4++;
   437  007ADA  4A58               	infsnz	main@newData4,f,c
   438  007ADC  2A59               	incf	main@newData4+1,f,c
   439                           
   440                           ; BSR set to: 1
   441  007ADE  0101               	movlb	1	; () banked
   442  007AE0  4BFE               	infsnz	main@i& (0+255),f,b
   443  007AE2  2BFF               	incf	(main@i+1)& (0+255),f,b
   444  007AE4  D7DE               	goto	L5
   445  007AE6                     l1896:
   446                           
   447                           ; BSR set to: 1
   448                           ;Main.c: 66: }
   449                           ;Main.c: 68: trisInit();
   450  007AE6  EC97  F037         	call	_trisInit	;wreg free
   451                           
   452                           ;Main.c: 69: enter_HVP();
   453  007AEA  ECD0  F037         	call	_enter_HVP	;wreg free
   454                           
   455                           ;Main.c: 71: bulkErase();
   456  007AEE  ECCD  F03B         	call	_bulkErase	;wreg free
   457                           
   458                           ;Main.c: 72: enableWrite();
   459  007AF2  EC19  F038         	call	_enableWrite	;wreg free
   460                           
   461                           ;Main.c: 73: flashWriteBlock(blockWrite, blockWrite2, 1);
   462  007AF6  0101               	movlb	1	; () banked
   463  007AF8  0E01               	movlw	high main@blockWrite
   464  007AFA  6E27               	movwf	flashWriteBlock@firstHalf+1,c
   465  007AFC  0101               	movlb	1	; () banked
   466  007AFE  0EDE               	movlw	low main@blockWrite
   467  007B00  6E26               	movwf	flashWriteBlock@firstHalf,c
   468  007B02  0102               	movlb	2	; () banked
   469  007B04  0E02               	movlw	high main@blockWrite2
   470  007B06  6E29               	movwf	flashWriteBlock@secondHalf+1,c
   471  007B08  0102               	movlb	2	; () banked
   472  007B0A  0E60               	movlw	low main@blockWrite2
   473  007B0C  6E28               	movwf	flashWriteBlock@secondHalf,c
   474  007B0E  0E01               	movlw	1
   475  007B10  6E2A               	movwf	flashWriteBlock@blockNumber,c
   476  007B12  0E00               	movlw	0
   477  007B14  6E2B               	movwf	flashWriteBlock@blockNumber+1,c
   478  007B16  0E00               	movlw	0
   479  007B18  6E2C               	movwf	flashWriteBlock@blockNumber+2,c
   480  007B1A  0E00               	movlw	0
   481  007B1C  6E2D               	movwf	flashWriteBlock@blockNumber+3,c
   482  007B1E  ECA7  F03A         	call	_flashWriteBlock	;wreg free
   483                           
   484                           ;Main.c: 74: flashWriteBlock(blockWrite3, blockWrite4, 2);
   485  007B22  0102               	movlb	2	; () banked
   486  007B24  0E02               	movlw	high main@blockWrite3
   487  007B26  6E27               	movwf	flashWriteBlock@firstHalf+1,c
   488  007B28  0102               	movlb	2	; () banked
   489  007B2A  0E80               	movlw	low main@blockWrite3
   490  007B2C  6E26               	movwf	flashWriteBlock@firstHalf,c
   491  007B2E  0102               	movlb	2	; () banked
   492  007B30  0E02               	movlw	high main@blockWrite4
   493  007B32  6E29               	movwf	flashWriteBlock@secondHalf+1,c
   494  007B34  0102               	movlb	2	; () banked
   495  007B36  0EA0               	movlw	low main@blockWrite4
   496  007B38  6E28               	movwf	flashWriteBlock@secondHalf,c
   497  007B3A  0E02               	movlw	2
   498  007B3C  6E2A               	movwf	flashWriteBlock@blockNumber,c
   499  007B3E  0E00               	movlw	0
   500  007B40  6E2B               	movwf	flashWriteBlock@blockNumber+1,c
   501  007B42  0E00               	movlw	0
   502  007B44  6E2C               	movwf	flashWriteBlock@blockNumber+2,c
   503  007B46  0E00               	movlw	0
   504  007B48  6E2D               	movwf	flashWriteBlock@blockNumber+3,c
   505  007B4A  ECA7  F03A         	call	_flashWriteBlock	;wreg free
   506                           
   507                           ;Main.c: 76: flashWriteData(blockWrite5, 62, 0);
   508  007B4E  0100               	movlb	0	; () banked
   509  007B50  0E00               	movlw	high main@blockWrite5
   510  007B52  6E39               	movwf	flashWriteData@data+1,c
   511  007B54  0100               	movlb	0	; () banked
   512  007B56  0EC0               	movlw	low main@blockWrite5
   513  007B58  6E38               	movwf	flashWriteData@data,c
   514  007B5A  0E00               	movlw	0
   515  007B5C  6E3B               	movwf	flashWriteData@size+1,c
   516  007B5E  0E3E               	movlw	62
   517  007B60  6E3A               	movwf	flashWriteData@size,c
   518  007B62  0E00               	movlw	0
   519  007B64  6E3C               	movwf	flashWriteData@address,c
   520  007B66  0E00               	movlw	0
   521  007B68  6E3D               	movwf	flashWriteData@address+1,c
   522  007B6A  0E00               	movlw	0
   523  007B6C  6E3E               	movwf	flashWriteData@address+2,c
   524  007B6E  0E00               	movlw	0
   525  007B70  6E3F               	movwf	flashWriteData@address+3,c
   526  007B72  ECD2  F03D         	call	_flashWriteData	;wreg free
   527                           
   528                           ;Main.c: 77: flashReadBlock(blockRead, 62, 0);
   529  007B76  0100               	movlb	0	; () banked
   530  007B78  0E00               	movlw	high main@blockRead
   531  007B7A  6E27               	movwf	flashReadBlock@data+1,c
   532  007B7C  0100               	movlb	0	; () banked
   533  007B7E  0E80               	movlw	low main@blockRead
   534  007B80  6E26               	movwf	flashReadBlock@data,c
   535  007B82  0E00               	movlw	0
   536  007B84  6E29               	movwf	flashReadBlock@size+1,c
   537  007B86  0E3E               	movlw	62
   538  007B88  6E28               	movwf	flashReadBlock@size,c
   539  007B8A  0E00               	movlw	0
   540  007B8C  6E2A               	movwf	flashReadBlock@blockNumber,c
   541  007B8E  0E00               	movlw	0
   542  007B90  6E2B               	movwf	flashReadBlock@blockNumber+1,c
   543  007B92  0E00               	movlw	0
   544  007B94  6E2C               	movwf	flashReadBlock@blockNumber+2,c
   545  007B96  0E00               	movlw	0
   546  007B98  6E2D               	movwf	flashReadBlock@blockNumber+3,c
   547  007B9A  EC1F  F039         	call	_flashReadBlock	;wreg free
   548                           
   549                           ;Main.c: 78: exit_HVP();
   550  007B9E  ECB2  F037         	call	_exit_HVP	;wreg free
   551  007BA2                     l185:
   552  007BA2  D7FF               	goto	l185
   553  007BA4                     __end_of_main:
   554                           	opt stack 0
   555                           postinc2	equ	0xFDE
   556                           postdec2	equ	0xFDD
   557                           fsr2h	equ	0xFDA
   558                           fsr2l	equ	0xFD9
   559                           status	equ	0xFD8
   560                           
   561                           	psect	cinit
   562  006FEA                     __pcinit:
   563                           	opt stack 0
   564  006FEA                     start_initialization:
   565                           	opt stack 0
   566  006FEA                     __initialization:
   567                           	opt stack 0
   568                           
   569                           ; Clear objects allocated to BANK2 (96 bytes)
   570  006FEA  EE02  F000         	lfsr	0,__pbssBANK2
   571  006FEE  0E60               	movlw	96
   572  006FF0                     clear_0:
   573  006FF0  6AEE               	clrf	postinc0,c
   574  006FF2  06E8               	decf	wreg,f,c
   575  006FF4  E1FD               	bnz	clear_0
   576                           
   577                           ; Clear objects allocated to COMRAM (32 bytes)
   578  006FF6  EE00  F05A         	lfsr	0,__pbssCOMRAM
   579  006FFA  0E20               	movlw	32
   580  006FFC                     clear_1:
   581  006FFC  6AEE               	clrf	postinc0,c
   582  006FFE  06E8               	decf	wreg,f,c
   583  007000  E1FD               	bnz	clear_1
   584  007002                     end_of_initialization:
   585                           	opt stack 0
   586  007002                     __end_of__initialization:
   587                           	opt stack 0
   588  007002  0100               	movlb	0
   589  007004  EF8B  F03C         	goto	_main	;jump to C main() function
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           postinc2	equ	0xFDE
   593                           postdec2	equ	0xFDD
   594                           fsr2h	equ	0xFDA
   595                           fsr2l	equ	0xFD9
   596                           status	equ	0xFD8
   597                           
   598                           	psect	bssCOMRAM
   599  00005A                     __pbssCOMRAM:
   600                           	opt stack 0
   601  00005A                     _halfBuffer1:
   602                           	opt stack 0
   603  00005A                     	ds	32
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postinc2	equ	0xFDE
   607                           postdec2	equ	0xFDD
   608                           fsr2h	equ	0xFDA
   609                           fsr2l	equ	0xFD9
   610                           status	equ	0xFD8
   611                           
   612                           	psect	bssBANK2
   613  000200                     __pbssBANK2:
   614                           	opt stack 0
   615  000200                     _blockBuffer:
   616                           	opt stack 0
   617  000200                     	ds	64
   618  000240                     _halfBuffer2:
   619                           	opt stack 0
   620  000240                     	ds	32
   621                           postinc0	equ	0xFEE
   622                           wreg	equ	0xFE8
   623                           postinc2	equ	0xFDE
   624                           postdec2	equ	0xFDD
   625                           fsr2h	equ	0xFDA
   626                           fsr2l	equ	0xFD9
   627                           status	equ	0xFD8
   628                           
   629                           	psect	cstackBANK2
   630  000260                     __pcstackBANK2:
   631                           	opt stack 0
   632  000260                     main@blockWrite2:
   633                           	opt stack 0
   634                           
   635                           ; 32 bytes @ 0x0
   636  000260                     	ds	32
   637  000280                     main@blockWrite3:
   638                           	opt stack 0
   639                           
   640                           ; 32 bytes @ 0x20
   641  000280                     	ds	32
   642  0002A0                     main@blockWrite4:
   643                           	opt stack 0
   644                           
   645                           ; 32 bytes @ 0x40
   646  0002A0                     	ds	32
   647                           postinc0	equ	0xFEE
   648                           wreg	equ	0xFE8
   649                           postinc2	equ	0xFDE
   650                           postdec2	equ	0xFDD
   651                           fsr2h	equ	0xFDA
   652                           fsr2l	equ	0xFD9
   653                           status	equ	0xFD8
   654                           
   655                           	psect	cstackBANK1
   656  000100                     __pcstackBANK1:
   657                           	opt stack 0
   658  000100                     flashWriteData@newData:
   659                           	opt stack 0
   660                           
   661                           ; 200 bytes @ 0x0
   662  000100                     	ds	200
   663  0001C8                     flashWriteData@j:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0xC8
   667  0001C8                     	ds	2
   668  0001CA                     flashWriteData@nextDataSet:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0xCA
   672  0001CA                     	ds	2
   673  0001CC                     flashWriteData@timesToWrite:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0xCC
   677  0001CC                     	ds	2
   678  0001CE                     flashWriteData@k:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0xCE
   682  0001CE                     	ds	2
   683  0001D0                     flashWriteData@newSize:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0xD0
   687  0001D0                     	ds	2
   688  0001D2                     flashWriteData@memoryBlock:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0xD2
   692  0001D2                     	ds	2
   693  0001D4                     flashWriteData@currentStartPoint:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0xD4
   697  0001D4                     	ds	2
   698  0001D6                     flashWriteData@bytesWritten:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0xD6
   702  0001D6                     	ds	2
   703  0001D8                     flashWriteData@newAddress:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0xD8
   707  0001D8                     	ds	4
   708  0001DC                     flashWriteData@i:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0xDC
   712  0001DC                     	ds	2
   713  0001DE                     main@blockWrite:
   714                           	opt stack 0
   715                           
   716                           ; 32 bytes @ 0xDE
   717  0001DE                     	ds	32
   718  0001FE                     main@i:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0xFE
   722  0001FE                     	ds	2
   723                           postinc0	equ	0xFEE
   724                           wreg	equ	0xFE8
   725                           postinc2	equ	0xFDE
   726                           postdec2	equ	0xFDD
   727                           fsr2h	equ	0xFDA
   728                           fsr2l	equ	0xFD9
   729                           status	equ	0xFD8
   730                           
   731                           	psect	cstackBANK0
   732  000080                     __pcstackBANK0:
   733                           	opt stack 0
   734  000080                     main@blockRead:
   735                           	opt stack 0
   736                           
   737                           ; 64 bytes @ 0x0
   738  000080                     	ds	64
   739  0000C0                     main@blockWrite5:
   740                           	opt stack 0
   741                           
   742                           ; 64 bytes @ 0x40
   743  0000C0                     	ds	64
   744                           postinc0	equ	0xFEE
   745                           wreg	equ	0xFE8
   746                           postinc2	equ	0xFDE
   747                           postdec2	equ	0xFDD
   748                           fsr2h	equ	0xFDA
   749                           fsr2l	equ	0xFD9
   750                           status	equ	0xFD8
   751                           
   752                           	psect	cstackCOMRAM
   753  000001                     __pcstackCOMRAM:
   754                           	opt stack 0
   755  000001                     ??_loadHalfBuffer:
   756  000001                     ?_readPGD:
   757                           	opt stack 0
   758  000001                     writePGD@data:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x0
   762  000001                     	ds	2
   763  000003                     ??_readPGD:
   764  000003                     writeBit@bitToWrite:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x2
   768  000003                     	ds	1
   769  000004                     ?_readBit:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x3
   773  000004                     	ds	1
   774  000005                     writeBits@pattern:
   775                           	opt stack 0
   776  000005                     loadHalfBuffer@j:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x4
   780  000005                     	ds	1
   781  000006                     readBit@data:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x5
   785  000006                     	ds	1
   786  000007                     writeBits@bitsToWrite:
   787                           	opt stack 0
   788  000007                     loadHalfBuffer@i:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x6
   792  000007                     	ds	1
   793  000008                     ?_readBits:
   794                           	opt stack 0
   795  000008                     readBits@bitsToRead:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x7
   799  000008                     	ds	1
   800  000009                     ??_writeBits:
   801  000009                     ?_overwriteBufferData:
   802                           	opt stack 0
   803  000009                     overwriteBufferData@data:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x8
   807  000009                     	ds	1
   808  00000A                     ??_readBits:
   809                           
   810                           ; 0 bytes @ 0x9
   811  00000A                     	ds	1
   812  00000B                     readBits@i:
   813                           	opt stack 0
   814  00000B                     overwriteBufferData@sizeToWrite:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0xA
   818  00000B                     	ds	1
   819  00000C                     writeBits@i:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0xB
   823  00000C                     	ds	1
   824  00000D                     readBits@data:
   825                           	opt stack 0
   826  00000D                     overwriteBufferData@bufferStartPoint:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0xC
   830  00000D                     	ds	1
   831  00000E                     writeICSP@commandByte:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0xD
   835  00000E                     	ds	1
   836  00000F                     ??_overwriteBufferData:
   837  00000F                     ?_readICSP:
   838                           	opt stack 0
   839  00000F                     ?_readFirstByte:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0xE
   843  00000F                     	ds	1
   844  000010                     writeICSP@dataBytes:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0xF
   848  000010                     	ds	1
   849  000011                     readICSP@data:
   850                           	opt stack 0
   851  000011                     readFirstByte@data:
   852                           	opt stack 0
   853  000011                     overwriteBufferData@j:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x10
   857  000011                     	ds	1
   858  000012                     bulkErase@i:
   859                           	opt stack 0
   860  000012                     writeToBuffer@data:
   861                           	opt stack 0
   862  000012                     flashWriteAndProgram@data:
   863                           	opt stack 0
   864  000012                     flashSetAddress@address:
   865                           	opt stack 0
   866                           
   867                           ; 4 bytes @ 0x11
   868  000012                     	ds	1
   869  000013                     ?_flashRead16Bits:
   870                           	opt stack 0
   871  000013                     overwriteBufferData@bytesLeft:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x12
   875  000013                     	ds	1
   876  000014                     flashWriteAndProgram@i:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x13
   880  000014                     	ds	1
   881  000015                     flashRead16Bits@firstData:
   882                           	opt stack 0
   883  000015                     overwriteBufferData@bytesWritten:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x14
   887  000015                     	ds	1
   888  000016                     ??_flashSetAddress:
   889                           
   890                           ; 0 bytes @ 0x15
   891  000016                     	ds	1
   892  000017                     flashRead16Bits@data:
   893                           	opt stack 0
   894  000017                     overwriteBufferData@start:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x16
   898  000017                     	ds	2
   899  000019                     overwriteBufferData@availableWriteSpace:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x18
   903  000019                     	ds	1
   904  00001A                     flashSetAddress@upperAddr:
   905                           	opt stack 0
   906                           
   907                           ; 4 bytes @ 0x19
   908  00001A                     	ds	1
   909  00001B                     overwriteBufferData@i:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x1A
   913  00001B                     	ds	3
   914  00001E                     flashSetAddress@highAddr:
   915                           	opt stack 0
   916                           
   917                           ; 4 bytes @ 0x1D
   918  00001E                     	ds	4
   919  000022                     flashSetAddress@lowAddr:
   920                           	opt stack 0
   921                           
   922                           ; 4 bytes @ 0x21
   923  000022                     	ds	4
   924  000026                     flashReadBlock@data:
   925                           	opt stack 0
   926  000026                     flashWriteBlock@firstHalf:
   927                           	opt stack 0
   928  000026                     rowErase@address:
   929                           	opt stack 0
   930                           
   931                           ; 4 bytes @ 0x25
   932  000026                     	ds	2
   933  000028                     flashReadBlock@size:
   934                           	opt stack 0
   935  000028                     flashWriteBlock@secondHalf:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x27
   939  000028                     	ds	2
   940  00002A                     rowErase@i:
   941                           	opt stack 0
   942  00002A                     flashReadBlock@blockNumber:
   943                           	opt stack 0
   944  00002A                     flashWriteBlock@blockNumber:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x29
   948  00002A                     	ds	4
   949  00002E                     ??_flashReadBlock:
   950  00002E                     ??_flashWriteBlock:
   951                           
   952                           ; 0 bytes @ 0x2D
   953  00002E                     	ds	4
   954  000032                     flashReadBlock@blockSelect:
   955                           	opt stack 0
   956  000032                     flashWriteBlock@blockSelect:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x31
   960  000032                     	ds	4
   961  000036                     flashReadBlock@i:
   962                           	opt stack 0
   963  000036                     flashWriteBlock@i:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x35
   967  000036                     	ds	2
   968  000038                     flashWriteData@data:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x37
   972  000038                     	ds	2
   973  00003A                     flashWriteData@size:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x39
   977  00003A                     	ds	2
   978  00003C                     flashWriteData@address:
   979                           	opt stack 0
   980                           
   981                           ; 4 bytes @ 0x3B
   982  00003C                     	ds	4
   983  000040                     ??_flashWriteData:
   984                           
   985                           ; 0 bytes @ 0x3F
   986  000040                     	ds	8
   987  000048                     ??_main:
   988                           
   989                           ; 0 bytes @ 0x47
   990  000048                     	ds	2
   991  00004A                     main@address:
   992                           	opt stack 0
   993                           
   994                           ; 4 bytes @ 0x49
   995  00004A                     	ds	4
   996  00004E                     main@newData5:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x4D
  1000  00004E                     	ds	2
  1001  000050                     main@data:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x4F
  1005  000050                     	ds	2
  1006  000052                     main@newData:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x51
  1010  000052                     	ds	2
  1011  000054                     main@newData2:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x53
  1015  000054                     	ds	2
  1016  000056                     main@newData3:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x55
  1020  000056                     	ds	2
  1021  000058                     main@newData4:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x57
  1025  000058                     	ds	2
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postinc2	equ	0xFDE
  1029                           postdec2	equ	0xFDD
  1030                           fsr2h	equ	0xFDA
  1031                           fsr2l	equ	0xFD9
  1032                           status	equ	0xFD8
  1033                           
  1034 ;; *************** function _trisInit *****************
  1035 ;; Defined at:
  1036 ;;		line 22 in file "../src/PIC18/Main.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;		None               void
  1043 ;; Registers used:
  1044 ;;		None
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1050 ;;      Params:         0       0       0       0       0       0       0
  1051 ;;      Locals:         0       0       0       0       0       0       0
  1052 ;;      Temps:          0       0       0       0       0       0       0
  1053 ;;      Totals:         0       0       0       0       0       0       0
  1054 ;;Total ram usage:        0 bytes
  1055 ;; Hardware stack levels used:    1
  1056 ;; This function calls:
  1057 ;;		Nothing
  1058 ;; This function is called by:
  1059 ;;		_main
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063                           	psect	text1
  1064  006F2E                     __ptext1:
  1065                           	opt stack 0
  1066  006F2E                     _trisInit:
  1067                           	opt stack 30
  1068                           
  1069                           ;Main.c: 23: TRISDbits.TRISD4 = 0;
  1070                           
  1071                           ;incstack = 0
  1072  006F2E  9895               	bcf	3989,4,c	;volatile
  1073                           
  1074                           ;Main.c: 24: TRISDbits.TRISD5 = 0;
  1075  006F30  9A95               	bcf	3989,5,c	;volatile
  1076                           
  1077                           ;Main.c: 25: TRISDbits.TRISD6 = 0;
  1078  006F32  9C95               	bcf	3989,6,c	;volatile
  1079                           
  1080                           ;Main.c: 26: TRISDbits.TRISD7 = 0;
  1081  006F34  9E95               	bcf	3989,7,c	;volatile
  1082  006F36  0012               	return	
  1083  006F38                     __end_of_trisInit:
  1084                           	opt stack 0
  1085                           postinc0	equ	0xFEE
  1086                           wreg	equ	0xFE8
  1087                           postinc2	equ	0xFDE
  1088                           postdec2	equ	0xFDD
  1089                           fsr2h	equ	0xFDA
  1090                           fsr2l	equ	0xFD9
  1091                           status	equ	0xFD8
  1092                           
  1093 ;; *************** function _flashWriteData *****************
  1094 ;; Defined at:
  1095 ;;		line 11 in file "../src/PIC18/FlashWrite.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  data            2   55[COMRAM] PTR unsigned int 
  1098 ;;		 -> main@blockWrite5(64), 
  1099 ;;  size            2   57[COMRAM] unsigned int 
  1100 ;;  address         4   59[COMRAM] unsigned long 
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;  newData       200    0[BANK1 ] unsigned int [100]
  1103 ;;  newAddress      4  216[BANK1 ] unsigned long 
  1104 ;;  i               2  220[BANK1 ] int 
  1105 ;;  bytesWritten    2  214[BANK1 ] int 
  1106 ;;  currentStart    2  212[BANK1 ] unsigned int 
  1107 ;;  memoryBlock     2  210[BANK1 ] unsigned int 
  1108 ;;  newSize         2  208[BANK1 ] unsigned int 
  1109 ;;  k               2  206[BANK1 ] int 
  1110 ;;  timesToWrite    2  204[BANK1 ] int 
  1111 ;;  nextDataSet     2  202[BANK1 ] int 
  1112 ;;  j               2  200[BANK1 ] int 
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  2   55[COMRAM] int 
  1115 ;; Registers used:
  1116 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1122 ;;      Params:         8       0       0       0       0       0       0
  1123 ;;      Locals:         0       0     222       0       0       0       0
  1124 ;;      Temps:          8       0       0       0       0       0       0
  1125 ;;      Totals:        16       0     222       0       0       0       0
  1126 ;;Total ram usage:      238 bytes
  1127 ;; Hardware stack levels used:    1
  1128 ;; Hardware stack levels required when called:    6
  1129 ;; This function calls:
  1130 ;;		_flashReadBlock
  1131 ;;		_flashSetAddress
  1132 ;;		_flashWriteBlock
  1133 ;;		_loadHalfBuffer
  1134 ;;		_overwriteBufferData
  1135 ;;		_rowErase
  1136 ;; This function is called by:
  1137 ;;		_main
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141                           	psect	text2
  1142  007BA4                     __ptext2:
  1143                           	opt stack 0
  1144  007BA4                     _flashWriteData:
  1145                           	opt stack 24
  1146                           
  1147                           ;FlashWrite.c: 12: int i, k, bytesWritten = 0, timesToWrite = 1, nextDataSet;
  1148                           
  1149                           ;incstack = 0
  1150  007BA4  0E00               	movlw	0
  1151  007BA6  0101               	movlb	1	; () banked
  1152  007BA8  6FD7               	movwf	(flashWriteData@bytesWritten+1)& (0+255),b
  1153  007BAA  0E00               	movlw	0
  1154  007BAC  0101               	movlb	1	; () banked
  1155  007BAE  6FD6               	movwf	flashWriteData@bytesWritten& (0+255),b
  1156  007BB0  0E00               	movlw	0
  1157  007BB2  0101               	movlb	1	; () banked
  1158  007BB4  6FCD               	movwf	(flashWriteData@timesToWrite+1)& (0+255),b
  1159  007BB6  0E01               	movlw	1
  1160  007BB8  0101               	movlb	1	; () banked
  1161  007BBA  6FCC               	movwf	flashWriteData@timesToWrite& (0+255),b
  1162                           
  1163                           ;FlashWrite.c: 13: int j = 16;
  1164  007BBC  0E00               	movlw	0
  1165  007BBE  0101               	movlb	1	; () banked
  1166  007BC0  6FC9               	movwf	(flashWriteData@j+1)& (0+255),b
  1167  007BC2  0E10               	movlw	16
  1168  007BC4  0101               	movlb	1	; () banked
  1169  007BC6  6FC8               	movwf	flashWriteData@j& (0+255),b
  1170                           
  1171                           ; BSR set to: 1
  1172                           ;FlashWrite.c: 14: uint32 newAddress = address;
  1173  007BC8  C03C  F1D8         	movff	flashWriteData@address,flashWriteData@newAddress
  1174  007BCC  C03D  F1D9         	movff	flashWriteData@address+1,flashWriteData@newAddress+1
  1175  007BD0  C03E  F1DA         	movff	flashWriteData@address+2,flashWriteData@newAddress+2
  1176  007BD4  C03F  F1DB         	movff	flashWriteData@address+3,flashWriteData@newAddress+3
  1177                           
  1178                           ; BSR set to: 1
  1179                           ;FlashWrite.c: 15: uint16 newSize = size;
  1180  007BD8  C03A  F1D0         	movff	flashWriteData@size,flashWriteData@newSize
  1181  007BDC  C03B  F1D1         	movff	flashWriteData@size+1,flashWriteData@newSize+1
  1182                           
  1183                           ;FlashWrite.c: 16: uint16 memoryBlock, currentStartPoint;
  1184                           ;FlashWrite.c: 17: uint16 newData[100];
  1185                           ;FlashWrite.c: 19: for(i = 0 ; i < size ; i++){
  1186  007BE0  0E00               	movlw	0
  1187  007BE2  0101               	movlb	1	; () banked
  1188  007BE4  6FDD               	movwf	(flashWriteData@i+1)& (0+255),b
  1189  007BE6  0E00               	movlw	0
  1190  007BE8  0101               	movlb	1	; () banked
  1191  007BEA  6FDC               	movwf	flashWriteData@i& (0+255),b
  1192  007BEC  D021               	goto	l1696
  1193  007BEE                     l1692:
  1194                           
  1195                           ; BSR set to: 1
  1196                           ;FlashWrite.c: 20: newData[i] = data[i];
  1197  007BEE  90D8               	bcf	status,0,c
  1198  007BF0  0101               	movlb	1	; () banked
  1199  007BF2  35DC               	rlcf	flashWriteData@i& (0+255),w,b
  1200  007BF4  6ED9               	movwf	fsr2l,c
  1201  007BF6  0101               	movlb	1	; () banked
  1202  007BF8  35DD               	rlcf	(flashWriteData@i+1)& (0+255),w,b
  1203  007BFA  6EDA               	movwf	fsr2h,c
  1204  007BFC  5038               	movf	flashWriteData@data,w,c
  1205  007BFE  26D9               	addwf	fsr2l,f,c
  1206  007C00  5039               	movf	flashWriteData@data+1,w,c
  1207  007C02  22DA               	addwfc	fsr2h,f,c
  1208  007C04  0E00               	movlw	low flashWriteData@newData
  1209  007C06  6E40               	movwf	??_flashWriteData& (0+255),c
  1210  007C08  0E01               	movlw	high flashWriteData@newData
  1211  007C0A  6E41               	movwf	(??_flashWriteData+1)& (0+255),c
  1212  007C0C  90D8               	bcf	status,0,c
  1213  007C0E  0101               	movlb	1	; () banked
  1214  007C10  35DC               	rlcf	flashWriteData@i& (0+255),w,b
  1215  007C12  6EE1               	movwf	fsr1l,c
  1216  007C14  0101               	movlb	1	; () banked
  1217  007C16  35DD               	rlcf	(flashWriteData@i+1)& (0+255),w,b
  1218  007C18  6EE2               	movwf	fsr1h,c
  1219  007C1A  5040               	movf	??_flashWriteData,w,c
  1220  007C1C  26E1               	addwf	fsr1l,f,c
  1221  007C1E  5041               	movf	??_flashWriteData+1,w,c
  1222  007C20  22E2               	addwfc	fsr1h,f,c
  1223  007C22  CFDE FFE6          	movff	postinc2,postinc1
  1224  007C26  CFDD FFE5          	movff	postdec2,postdec1
  1225                           
  1226                           ; BSR set to: 1
  1227  007C2A  0101               	movlb	1	; () banked
  1228  007C2C  4BDC               	infsnz	flashWriteData@i& (0+255),f,b
  1229  007C2E  2BDD               	incf	(flashWriteData@i+1)& (0+255),f,b
  1230  007C30                     l1696:
  1231                           
  1232                           ; BSR set to: 1
  1233  007C30  503A               	movf	flashWriteData@size,w,c
  1234  007C32  0101               	movlb	1	; () banked
  1235  007C34  5DDC               	subwf	flashWriteData@i& (0+255),w,b
  1236  007C36  503B               	movf	flashWriteData@size+1,w,c
  1237  007C38  0101               	movlb	1	; () banked
  1238  007C3A  59DD               	subwfb	(flashWriteData@i+1)& (0+255),w,b
  1239  007C3C  A0D8               	btfss	status,0,c
  1240  007C3E  D7D7               	goto	l1692
  1241                           
  1242                           ; BSR set to: 1
  1243                           ;FlashWrite.c: 21: }
  1244                           ;FlashWrite.c: 23: currentStartPoint = (address - ((address/64)*64))/2;
  1245                           
  1246                           ; BSR set to: 1
  1247  007C40  C03C  F040         	movff	flashWriteData@address,??_flashWriteData
  1248  007C44  C03D  F041         	movff	flashWriteData@address+1,??_flashWriteData+1
  1249  007C48  C03E  F042         	movff	flashWriteData@address+2,??_flashWriteData+2
  1250  007C4C  C03F  F043         	movff	flashWriteData@address+3,??_flashWriteData+3
  1251  007C50  0E07               	movlw	7
  1252  007C52  D005               	goto	u940
  1253  007C54                     u945:
  1254  007C54  90D8               	bcf	status,0,c
  1255  007C56  3243               	rrcf	??_flashWriteData+3,f,c
  1256  007C58  3242               	rrcf	??_flashWriteData+2,f,c
  1257  007C5A  3241               	rrcf	??_flashWriteData+1,f,c
  1258  007C5C  3240               	rrcf	??_flashWriteData,f,c
  1259  007C5E                     u940:
  1260  007C5E  2EE8               	decfsz	wreg,f,c
  1261  007C60  D7F9               	goto	u945
  1262  007C62  0E06               	movlw	6
  1263  007C64                     u955:
  1264  007C64  90D8               	bcf	status,0,c
  1265  007C66  3640               	rlcf	??_flashWriteData,f,c
  1266  007C68  3641               	rlcf	??_flashWriteData+1,f,c
  1267  007C6A  3642               	rlcf	??_flashWriteData+2,f,c
  1268  007C6C  3643               	rlcf	??_flashWriteData+3,f,c
  1269  007C6E  2EE8               	decfsz	wreg,f,c
  1270  007C70  D7F9               	goto	u955
  1271  007C72  1E40               	comf	??_flashWriteData,f,c
  1272  007C74  1E41               	comf	??_flashWriteData+1,f,c
  1273  007C76  1E42               	comf	??_flashWriteData+2,f,c
  1274  007C78  1E43               	comf	??_flashWriteData+3,f,c
  1275  007C7A  2A40               	incf	??_flashWriteData,f,c
  1276  007C7C  0E00               	movlw	0
  1277  007C7E  2241               	addwfc	??_flashWriteData+1,f,c
  1278  007C80  2242               	addwfc	??_flashWriteData+2,f,c
  1279  007C82  2243               	addwfc	??_flashWriteData+3,f,c
  1280  007C84  503C               	movf	flashWriteData@address,w,c
  1281  007C86  2440               	addwf	??_flashWriteData,w,c
  1282  007C88  6E44               	movwf	(??_flashWriteData+4)& (0+255),c
  1283  007C8A  503D               	movf	flashWriteData@address+1,w,c
  1284  007C8C  2041               	addwfc	??_flashWriteData+1,w,c
  1285  007C8E  6E45               	movwf	(??_flashWriteData+5)& (0+255),c
  1286  007C90  503E               	movf	flashWriteData@address+2,w,c
  1287  007C92  2042               	addwfc	??_flashWriteData+2,w,c
  1288  007C94  6E46               	movwf	(??_flashWriteData+6)& (0+255),c
  1289  007C96  503F               	movf	flashWriteData@address+3,w,c
  1290  007C98  2043               	addwfc	??_flashWriteData+3,w,c
  1291  007C9A  6E47               	movwf	(??_flashWriteData+7)& (0+255),c
  1292  007C9C  90D8               	bcf	status,0,c
  1293  007C9E  3247               	rrcf	??_flashWriteData+7,f,c
  1294  007CA0  3246               	rrcf	??_flashWriteData+6,f,c
  1295  007CA2  3245               	rrcf	??_flashWriteData+5,f,c
  1296  007CA4  3244               	rrcf	??_flashWriteData+4,f,c
  1297  007CA6  C044  F1D4         	movff	??_flashWriteData+4,flashWriteData@currentStartPoint
  1298  007CAA  C045  F1D5         	movff	??_flashWriteData+5,flashWriteData@currentStartPoint+1
  1299                           
  1300                           ;FlashWrite.c: 24: if((size+currentStartPoint) > 32){
  1301  007CAE  C03A  F040         	movff	flashWriteData@size,??_flashWriteData
  1302  007CB2  C03B  F041         	movff	flashWriteData@size+1,??_flashWriteData+1
  1303  007CB6  0101               	movlb	1	; () banked
  1304  007CB8  51D4               	movf	flashWriteData@currentStartPoint& (0+255),w,b
  1305  007CBA  2640               	addwf	??_flashWriteData,f,c
  1306  007CBC  0101               	movlb	1	; () banked
  1307  007CBE  51D5               	movf	(flashWriteData@currentStartPoint+1)& (0+255),w,b
  1308  007CC0  2241               	addwfc	??_flashWriteData+1,f,c
  1309  007CC2  0E21               	movlw	33
  1310  007CC4  5C40               	subwf	??_flashWriteData,w,c
  1311  007CC6  0E00               	movlw	0
  1312  007CC8  5841               	subwfb	??_flashWriteData+1,w,c
  1313  007CCA  A0D8               	btfss	status,0,c
  1314  007CCC  D029               	goto	l1710
  1315                           
  1316                           ; BSR set to: 1
  1317                           ;FlashWrite.c: 25: i = (size+currentStartPoint) - 32;
  1318  007CCE  C03A  F040         	movff	flashWriteData@size,??_flashWriteData
  1319  007CD2  C03B  F041         	movff	flashWriteData@size+1,??_flashWriteData+1
  1320  007CD6  0101               	movlb	1	; () banked
  1321  007CD8  51D4               	movf	flashWriteData@currentStartPoint& (0+255),w,b
  1322  007CDA  2640               	addwf	??_flashWriteData,f,c
  1323  007CDC  0101               	movlb	1	; () banked
  1324  007CDE  51D5               	movf	(flashWriteData@currentStartPoint+1)& (0+255),w,b
  1325  007CE0  2241               	addwfc	??_flashWriteData+1,f,c
  1326  007CE2  0EE0               	movlw	224
  1327  007CE4  2440               	addwf	??_flashWriteData,w,c
  1328  007CE6  0101               	movlb	1	; () banked
  1329  007CE8  6FDC               	movwf	flashWriteData@i& (0+255),b
  1330  007CEA  0EFF               	movlw	255
  1331  007CEC  2041               	addwfc	??_flashWriteData+1,w,c
  1332  007CEE  D008               	goto	L6
  1333  007CF0                     l1704:
  1334                           
  1335                           ; BSR set to: 1
  1336                           ;FlashWrite.c: 28: i = i - 32;
  1337  007CF0  0EE0               	movlw	224
  1338  007CF2  0101               	movlb	1	; () banked
  1339  007CF4  25DC               	addwf	flashWriteData@i& (0+255),w,b
  1340  007CF6  0101               	movlb	1	; () banked
  1341  007CF8  6FDC               	movwf	flashWriteData@i& (0+255),b
  1342  007CFA  0EFF               	movlw	255
  1343  007CFC  0101               	movlb	1	; () banked
  1344  007CFE  21DD               	addwfc	(flashWriteData@i+1)& (0+255),w,b
  1345  007D00                     L6:
  1346  007D00  0101               	movlb	1	; () banked
  1347  007D02  6FDD               	movwf	(flashWriteData@i+1)& (0+255),b
  1348                           
  1349                           ; BSR set to: 1
  1350                           ;FlashWrite.c: 29: timesToWrite++;
  1351  007D04  0101               	movlb	1	; () banked
  1352  007D06  4BCC               	infsnz	flashWriteData@timesToWrite& (0+255),f,b
  1353  007D08  2BCD               	incf	(flashWriteData@timesToWrite+1)& (0+255),f,b
  1354                           
  1355                           ; BSR set to: 1
  1356                           
  1357                           ; BSR set to: 1
  1358  007D0A  0101               	movlb	1	; () banked
  1359  007D0C  51DD               	movf	(flashWriteData@i+1)& (0+255),w,b
  1360  007D0E  0A80               	xorlw	128
  1361  007D10  6EF3               	movwf	prodl,c
  1362  007D12  0E80               	movlw	128
  1363  007D14  5CF3               	subwf	prodl,w,c
  1364  007D16  0E21               	movlw	33
  1365  007D18  B4D8               	btfsc	status,2,c
  1366  007D1A  5DDC               	subwf	flashWriteData@i& (0+255),w,b
  1367  007D1C  B0D8               	btfsc	status,0,c
  1368  007D1E  D7E8               	goto	l1704
  1369  007D20                     l1710:
  1370                           
  1371                           ; BSR set to: 1
  1372                           ;FlashWrite.c: 30: }
  1373                           ;FlashWrite.c: 31: }
  1374                           ;FlashWrite.c: 33: for(i = 0 ; i < timesToWrite ; i++){
  1375  007D20  0E00               	movlw	0
  1376  007D22  0101               	movlb	1	; () banked
  1377  007D24  6FDD               	movwf	(flashWriteData@i+1)& (0+255),b
  1378  007D26  0E00               	movlw	0
  1379  007D28  0101               	movlb	1	; () banked
  1380  007D2A  6FDC               	movwf	flashWriteData@i& (0+255),b
  1381  007D2C  D15A               	goto	l1742
  1382  007D2E                     l1712:
  1383                           
  1384                           ; BSR set to: 1
  1385                           ;FlashWrite.c: 34: memoryBlock = (newAddress/64)+1;
  1386  007D2E  0101               	movlb	1	; () banked
  1387  007D30  C1D8  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1388  007D34  0101               	movlb	1	; () banked
  1389  007D36  C1D9  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1390  007D3A  0101               	movlb	1	; () banked
  1391  007D3C  C1DA  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1392  007D40  0101               	movlb	1	; () banked
  1393  007D42  C1DB  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1394  007D46  0E07               	movlw	7
  1395  007D48  D005               	goto	u980
  1396  007D4A                     u985:
  1397  007D4A  90D8               	bcf	status,0,c
  1398  007D4C  3243               	rrcf	??_flashWriteData+3,f,c
  1399  007D4E  3242               	rrcf	??_flashWriteData+2,f,c
  1400  007D50  3241               	rrcf	??_flashWriteData+1,f,c
  1401  007D52  3240               	rrcf	??_flashWriteData,f,c
  1402  007D54                     u980:
  1403  007D54  2EE8               	decfsz	wreg,f,c
  1404  007D56  D7F9               	goto	u985
  1405  007D58  0E01               	movlw	1
  1406  007D5A  2440               	addwf	??_flashWriteData,w,c
  1407  007D5C  0101               	movlb	1	; () banked
  1408  007D5E  6FD2               	movwf	flashWriteData@memoryBlock& (0+255),b
  1409  007D60  0E00               	movlw	0
  1410  007D62  2041               	addwfc	??_flashWriteData+1,w,c
  1411  007D64  0101               	movlb	1	; () banked
  1412  007D66  6FD3               	movwf	(flashWriteData@memoryBlock+1)& (0+255),b
  1413                           
  1414                           ; BSR set to: 1
  1415                           ;FlashWrite.c: 35: flashReadBlock(blockBuffer, 64, memoryBlock);
  1416  007D68  0102               	movlb	2	; () banked
  1417  007D6A  0E02               	movlw	high _blockBuffer
  1418  007D6C  6E27               	movwf	flashReadBlock@data+1,c
  1419  007D6E  0102               	movlb	2	; () banked
  1420  007D70  0E00               	movlw	low _blockBuffer
  1421  007D72  6E26               	movwf	flashReadBlock@data,c
  1422  007D74  0E00               	movlw	0
  1423  007D76  6E29               	movwf	flashReadBlock@size+1,c
  1424  007D78  0E40               	movlw	64
  1425  007D7A  6E28               	movwf	flashReadBlock@size,c
  1426  007D7C  0101               	movlb	1	; () banked
  1427  007D7E  C1D2  F02A         	movff	flashWriteData@memoryBlock,flashReadBlock@blockNumber
  1428  007D82  0101               	movlb	1	; () banked
  1429  007D84  C1D3  F02B         	movff	flashWriteData@memoryBlock+1,flashReadBlock@blockNumber+1
  1430  007D88  6A2C               	clrf	flashReadBlock@blockNumber+2,c
  1431  007D8A  6A2D               	clrf	flashReadBlock@blockNumber+3,c
  1432  007D8C  EC1F  F039         	call	_flashReadBlock	;wreg free
  1433                           
  1434                           ;FlashWrite.c: 36: loadHalfBuffer();
  1435  007D90  EC67  F039         	call	_loadHalfBuffer	;wreg free
  1436                           
  1437                           ;FlashWrite.c: 37: bytesWritten = bytesWritten + (overwriteBufferData(newData, newSize, 
      +                          currentStartPoint));
  1438  007D94  0101               	movlb	1	; () banked
  1439  007D96  0E01               	movlw	high flashWriteData@newData
  1440  007D98  6E0A               	movwf	overwriteBufferData@data+1,c
  1441  007D9A  0101               	movlb	1	; () banked
  1442  007D9C  0E00               	movlw	low flashWriteData@newData
  1443  007D9E  6E09               	movwf	overwriteBufferData@data,c
  1444  007DA0  C1D0  F00B         	movff	flashWriteData@newSize,overwriteBufferData@sizeToWrite
  1445  007DA4  C1D1  F00C         	movff	flashWriteData@newSize+1,overwriteBufferData@sizeToWrite+1
  1446  007DA8  C1D4  F00D         	movff	flashWriteData@currentStartPoint,overwriteBufferData@bufferStartPoint
  1447  007DAC  C1D5  F00E         	movff	flashWriteData@currentStartPoint+1,overwriteBufferData@bufferStartPoint+1
  1448  007DB0  ECC8  F039         	call	_overwriteBufferData	;wreg free
  1449  007DB4  0101               	movlb	1	; () banked
  1450  007DB6  51D6               	movf	flashWriteData@bytesWritten& (0+255),w,b
  1451  007DB8  2409               	addwf	?_overwriteBufferData,w,c
  1452  007DBA  0101               	movlb	1	; () banked
  1453  007DBC  6FD6               	movwf	flashWriteData@bytesWritten& (0+255),b
  1454  007DBE  0101               	movlb	1	; () banked
  1455  007DC0  51D7               	movf	(flashWriteData@bytesWritten+1)& (0+255),w,b
  1456  007DC2  200A               	addwfc	?_overwriteBufferData+1,w,c
  1457  007DC4  0101               	movlb	1	; () banked
  1458  007DC6  6FD7               	movwf	(flashWriteData@bytesWritten+1)& (0+255),b
  1459                           
  1460                           ; BSR set to: 1
  1461                           ;FlashWrite.c: 39: rowErase((newAddress/64)*64);
  1462  007DC8  0101               	movlb	1	; () banked
  1463  007DCA  C1D8  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1464  007DCE  0101               	movlb	1	; () banked
  1465  007DD0  C1D9  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1466  007DD4  0101               	movlb	1	; () banked
  1467  007DD6  C1DA  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1468  007DDA  0101               	movlb	1	; () banked
  1469  007DDC  C1DB  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1470  007DE0  0E07               	movlw	7
  1471  007DE2  D005               	goto	u990
  1472  007DE4                     u995:
  1473  007DE4  90D8               	bcf	status,0,c
  1474  007DE6  3243               	rrcf	??_flashWriteData+3,f,c
  1475  007DE8  3242               	rrcf	??_flashWriteData+2,f,c
  1476  007DEA  3241               	rrcf	??_flashWriteData+1,f,c
  1477  007DEC  3240               	rrcf	??_flashWriteData,f,c
  1478  007DEE                     u990:
  1479  007DEE  2EE8               	decfsz	wreg,f,c
  1480  007DF0  D7F9               	goto	u995
  1481  007DF2  0E06               	movlw	6
  1482  007DF4                     u1005:
  1483  007DF4  90D8               	bcf	status,0,c
  1484  007DF6  3640               	rlcf	??_flashWriteData,f,c
  1485  007DF8  3641               	rlcf	??_flashWriteData+1,f,c
  1486  007DFA  3642               	rlcf	??_flashWriteData+2,f,c
  1487  007DFC  3643               	rlcf	??_flashWriteData+3,f,c
  1488  007DFE  2EE8               	decfsz	wreg,f,c
  1489  007E00  D7F9               	goto	u1005
  1490  007E02  C040  F026         	movff	??_flashWriteData,rowErase@address
  1491  007E06  C041  F027         	movff	??_flashWriteData+1,rowErase@address+1
  1492  007E0A  C042  F028         	movff	??_flashWriteData+2,rowErase@address+2
  1493  007E0E  C043  F029         	movff	??_flashWriteData+3,rowErase@address+3
  1494  007E12  EC3A  F03B         	call	_rowErase	;wreg free
  1495                           
  1496                           ;FlashWrite.c: 40: flashSetAddress((newAddress/64)*64);
  1497  007E16  0101               	movlb	1	; () banked
  1498  007E18  C1D8  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1499  007E1C  0101               	movlb	1	; () banked
  1500  007E1E  C1D9  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1501  007E22  0101               	movlb	1	; () banked
  1502  007E24  C1DA  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1503  007E28  0101               	movlb	1	; () banked
  1504  007E2A  C1DB  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1505  007E2E  0E07               	movlw	7
  1506  007E30  D005               	goto	u1010
  1507  007E32                     u1015:
  1508  007E32  90D8               	bcf	status,0,c
  1509  007E34  3243               	rrcf	??_flashWriteData+3,f,c
  1510  007E36  3242               	rrcf	??_flashWriteData+2,f,c
  1511  007E38  3241               	rrcf	??_flashWriteData+1,f,c
  1512  007E3A  3240               	rrcf	??_flashWriteData,f,c
  1513  007E3C                     u1010:
  1514  007E3C  2EE8               	decfsz	wreg,f,c
  1515  007E3E  D7F9               	goto	u1015
  1516  007E40  0E06               	movlw	6
  1517  007E42                     u1025:
  1518  007E42  90D8               	bcf	status,0,c
  1519  007E44  3640               	rlcf	??_flashWriteData,f,c
  1520  007E46  3641               	rlcf	??_flashWriteData+1,f,c
  1521  007E48  3642               	rlcf	??_flashWriteData+2,f,c
  1522  007E4A  3643               	rlcf	??_flashWriteData+3,f,c
  1523  007E4C  2EE8               	decfsz	wreg,f,c
  1524  007E4E  D7F9               	goto	u1025
  1525  007E50  C040  F012         	movff	??_flashWriteData,flashSetAddress@address
  1526  007E54  C041  F013         	movff	??_flashWriteData+1,flashSetAddress@address+1
  1527  007E58  C042  F014         	movff	??_flashWriteData+2,flashSetAddress@address+2
  1528  007E5C  C043  F015         	movff	??_flashWriteData+3,flashSetAddress@address+3
  1529  007E60  EC35  F03A         	call	_flashSetAddress	;wreg free
  1530                           
  1531                           ;FlashWrite.c: 41: flashWriteBlock(halfBuffer1, halfBuffer2, memoryBlock);
  1532  007E64  0E00               	movlw	high _halfBuffer1
  1533  007E66  6E27               	movwf	flashWriteBlock@firstHalf+1,c
  1534  007E68  0E5A               	movlw	low _halfBuffer1
  1535  007E6A  6E26               	movwf	flashWriteBlock@firstHalf,c
  1536  007E6C  0102               	movlb	2	; () banked
  1537  007E6E  0E02               	movlw	high _halfBuffer2
  1538  007E70  6E29               	movwf	flashWriteBlock@secondHalf+1,c
  1539  007E72  0102               	movlb	2	; () banked
  1540  007E74  0E40               	movlw	low _halfBuffer2
  1541  007E76  6E28               	movwf	flashWriteBlock@secondHalf,c
  1542  007E78  0101               	movlb	1	; () banked
  1543  007E7A  C1D2  F02A         	movff	flashWriteData@memoryBlock,flashWriteBlock@blockNumber
  1544  007E7E  0101               	movlb	1	; () banked
  1545  007E80  C1D3  F02B         	movff	flashWriteData@memoryBlock+1,flashWriteBlock@blockNumber+1
  1546  007E84  6A2C               	clrf	flashWriteBlock@blockNumber+2,c
  1547  007E86  6A2D               	clrf	flashWriteBlock@blockNumber+3,c
  1548  007E88  ECA7  F03A         	call	_flashWriteBlock	;wreg free
  1549                           
  1550                           ;FlashWrite.c: 43: if(bytesWritten < size){
  1551  007E8C  503A               	movf	flashWriteData@size,w,c
  1552  007E8E  0101               	movlb	1	; () banked
  1553  007E90  5DD6               	subwf	flashWriteData@bytesWritten& (0+255),w,b
  1554  007E92  503B               	movf	flashWriteData@size+1,w,c
  1555  007E94  0101               	movlb	1	; () banked
  1556  007E96  59D7               	subwfb	(flashWriteData@bytesWritten+1)& (0+255),w,b
  1557  007E98  B0D8               	btfsc	status,0,c
  1558  007E9A  D0A0               	goto	l1740
  1559                           
  1560                           ; BSR set to: 1
  1561                           ;FlashWrite.c: 44: nextDataSet = bytesWritten;
  1562  007E9C  C1D6  F1CA         	movff	flashWriteData@bytesWritten,flashWriteData@nextDataSet
  1563  007EA0  C1D7  F1CB         	movff	flashWriteData@bytesWritten+1,flashWriteData@nextDataSet+1
  1564                           
  1565                           ; BSR set to: 1
  1566                           ;FlashWrite.c: 45: newAddress = (memoryBlock*64);
  1567  007EA4  0101               	movlb	1	; () banked
  1568  007EA6  C1D2  F040         	movff	flashWriteData@memoryBlock,??_flashWriteData
  1569  007EAA  0101               	movlb	1	; () banked
  1570  007EAC  C1D3  F041         	movff	flashWriteData@memoryBlock+1,??_flashWriteData+1
  1571  007EB0  0E06               	movlw	6
  1572  007EB2                     u1045:
  1573  007EB2  90D8               	bcf	status,0,c
  1574  007EB4  3640               	rlcf	??_flashWriteData,f,c
  1575  007EB6  3641               	rlcf	??_flashWriteData+1,f,c
  1576  007EB8  2EE8               	decfsz	wreg,f,c
  1577  007EBA  D7FB               	goto	u1045
  1578  007EBC  0101               	movlb	1	; () banked
  1579  007EBE  C040  F1D8         	movff	??_flashWriteData,flashWriteData@newAddress
  1580  007EC2  0101               	movlb	1	; () banked
  1581  007EC4  C041  F1D9         	movff	??_flashWriteData+1,flashWriteData@newAddress+1
  1582  007EC8  0101               	movlb	1	; () banked
  1583  007ECA  6BDA               	clrf	(flashWriteData@newAddress+2)& (0+255),b
  1584  007ECC  0101               	movlb	1	; () banked
  1585  007ECE  6BDB               	clrf	(flashWriteData@newAddress+3)& (0+255),b
  1586                           
  1587                           ;FlashWrite.c: 46: newSize = size - bytesWritten;
  1588  007ED0  0101               	movlb	1	; () banked
  1589  007ED2  C1D6  F040         	movff	flashWriteData@bytesWritten,??_flashWriteData
  1590  007ED6  0101               	movlb	1	; () banked
  1591  007ED8  C1D7  F041         	movff	flashWriteData@bytesWritten+1,??_flashWriteData+1
  1592  007EDC  1E40               	comf	??_flashWriteData,f,c
  1593  007EDE  1E41               	comf	??_flashWriteData+1,f,c
  1594  007EE0  4A40               	infsnz	??_flashWriteData,f,c
  1595  007EE2  2A41               	incf	??_flashWriteData+1,f,c
  1596  007EE4  503A               	movf	flashWriteData@size,w,c
  1597  007EE6  2440               	addwf	??_flashWriteData,w,c
  1598  007EE8  0101               	movlb	1	; () banked
  1599  007EEA  6FD0               	movwf	flashWriteData@newSize& (0+255),b
  1600  007EEC  503B               	movf	flashWriteData@size+1,w,c
  1601  007EEE  2041               	addwfc	??_flashWriteData+1,w,c
  1602  007EF0  0101               	movlb	1	; () banked
  1603  007EF2  6FD1               	movwf	(flashWriteData@newSize+1)& (0+255),b
  1604                           
  1605                           ;FlashWrite.c: 47: currentStartPoint = (newAddress - ((newAddress/64)*64))/2;
  1606  007EF4  0101               	movlb	1	; () banked
  1607  007EF6  C1D8  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1608  007EFA  0101               	movlb	1	; () banked
  1609  007EFC  C1D9  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1610  007F00  0101               	movlb	1	; () banked
  1611  007F02  C1DA  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1612  007F06  0101               	movlb	1	; () banked
  1613  007F08  C1DB  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1614  007F0C  0E07               	movlw	7
  1615  007F0E  D005               	goto	u1050
  1616  007F10                     u1055:
  1617  007F10  90D8               	bcf	status,0,c
  1618  007F12  3243               	rrcf	??_flashWriteData+3,f,c
  1619  007F14  3242               	rrcf	??_flashWriteData+2,f,c
  1620  007F16  3241               	rrcf	??_flashWriteData+1,f,c
  1621  007F18  3240               	rrcf	??_flashWriteData,f,c
  1622  007F1A                     u1050:
  1623  007F1A  2EE8               	decfsz	wreg,f,c
  1624  007F1C  D7F9               	goto	u1055
  1625  007F1E  0E06               	movlw	6
  1626  007F20                     u1065:
  1627  007F20  90D8               	bcf	status,0,c
  1628  007F22  3640               	rlcf	??_flashWriteData,f,c
  1629  007F24  3641               	rlcf	??_flashWriteData+1,f,c
  1630  007F26  3642               	rlcf	??_flashWriteData+2,f,c
  1631  007F28  3643               	rlcf	??_flashWriteData+3,f,c
  1632  007F2A  2EE8               	decfsz	wreg,f,c
  1633  007F2C  D7F9               	goto	u1065
  1634  007F2E  1E40               	comf	??_flashWriteData,f,c
  1635  007F30  1E41               	comf	??_flashWriteData+1,f,c
  1636  007F32  1E42               	comf	??_flashWriteData+2,f,c
  1637  007F34  1E43               	comf	??_flashWriteData+3,f,c
  1638  007F36  2A40               	incf	??_flashWriteData,f,c
  1639  007F38  0E00               	movlw	0
  1640  007F3A  2241               	addwfc	??_flashWriteData+1,f,c
  1641  007F3C  2242               	addwfc	??_flashWriteData+2,f,c
  1642  007F3E  2243               	addwfc	??_flashWriteData+3,f,c
  1643  007F40  0101               	movlb	1	; () banked
  1644  007F42  51D8               	movf	flashWriteData@newAddress& (0+255),w,b
  1645  007F44  2440               	addwf	??_flashWriteData,w,c
  1646  007F46  6E44               	movwf	(??_flashWriteData+4)& (0+255),c
  1647  007F48  0101               	movlb	1	; () banked
  1648  007F4A  51D9               	movf	(flashWriteData@newAddress+1)& (0+255),w,b
  1649  007F4C  2041               	addwfc	??_flashWriteData+1,w,c
  1650  007F4E  6E45               	movwf	(??_flashWriteData+5)& (0+255),c
  1651  007F50  0101               	movlb	1	; () banked
  1652  007F52  51DA               	movf	(flashWriteData@newAddress+2)& (0+255),w,b
  1653  007F54  2042               	addwfc	??_flashWriteData+2,w,c
  1654  007F56  6E46               	movwf	(??_flashWriteData+6)& (0+255),c
  1655  007F58  0101               	movlb	1	; () banked
  1656  007F5A  51DB               	movf	(flashWriteData@newAddress+3)& (0+255),w,b
  1657  007F5C  2043               	addwfc	??_flashWriteData+3,w,c
  1658  007F5E  6E47               	movwf	(??_flashWriteData+7)& (0+255),c
  1659  007F60  90D8               	bcf	status,0,c
  1660  007F62  3247               	rrcf	??_flashWriteData+7,f,c
  1661  007F64  3246               	rrcf	??_flashWriteData+6,f,c
  1662  007F66  3245               	rrcf	??_flashWriteData+5,f,c
  1663  007F68  3244               	rrcf	??_flashWriteData+4,f,c
  1664  007F6A  C044  F1D4         	movff	??_flashWriteData+4,flashWriteData@currentStartPoint
  1665  007F6E  C045  F1D5         	movff	??_flashWriteData+5,flashWriteData@currentStartPoint+1
  1666                           
  1667                           ; BSR set to: 1
  1668                           ;FlashWrite.c: 48: for(k = 0 ; k < newSize ; k++){
  1669  007F72  0E00               	movlw	0
  1670  007F74  0101               	movlb	1	; () banked
  1671  007F76  6FCF               	movwf	(flashWriteData@k+1)& (0+255),b
  1672  007F78  0E00               	movlw	0
  1673  007F7A  0101               	movlb	1	; () banked
  1674  007F7C  6FCE               	movwf	flashWriteData@k& (0+255),b
  1675  007F7E  D024               	goto	l1738
  1676  007F80                     l1732:
  1677                           
  1678                           ; BSR set to: 1
  1679                           ;FlashWrite.c: 49: newData[k] = data[nextDataSet];
  1680  007F80  90D8               	bcf	status,0,c
  1681  007F82  0101               	movlb	1	; () banked
  1682  007F84  35CA               	rlcf	flashWriteData@nextDataSet& (0+255),w,b
  1683  007F86  6ED9               	movwf	fsr2l,c
  1684  007F88  0101               	movlb	1	; () banked
  1685  007F8A  35CB               	rlcf	(flashWriteData@nextDataSet+1)& (0+255),w,b
  1686  007F8C  6EDA               	movwf	fsr2h,c
  1687  007F8E  5038               	movf	flashWriteData@data,w,c
  1688  007F90  26D9               	addwf	fsr2l,f,c
  1689  007F92  5039               	movf	flashWriteData@data+1,w,c
  1690  007F94  22DA               	addwfc	fsr2h,f,c
  1691  007F96  0E00               	movlw	low flashWriteData@newData
  1692  007F98  6E40               	movwf	??_flashWriteData& (0+255),c
  1693  007F9A  0E01               	movlw	high flashWriteData@newData
  1694  007F9C  6E41               	movwf	(??_flashWriteData+1)& (0+255),c
  1695  007F9E  90D8               	bcf	status,0,c
  1696  007FA0  0101               	movlb	1	; () banked
  1697  007FA2  35CE               	rlcf	flashWriteData@k& (0+255),w,b
  1698  007FA4  6EE1               	movwf	fsr1l,c
  1699  007FA6  0101               	movlb	1	; () banked
  1700  007FA8  35CF               	rlcf	(flashWriteData@k+1)& (0+255),w,b
  1701  007FAA  6EE2               	movwf	fsr1h,c
  1702  007FAC  5040               	movf	??_flashWriteData,w,c
  1703  007FAE  26E1               	addwf	fsr1l,f,c
  1704  007FB0  5041               	movf	??_flashWriteData+1,w,c
  1705  007FB2  22E2               	addwfc	fsr1h,f,c
  1706  007FB4  CFDE FFE6          	movff	postinc2,postinc1
  1707  007FB8  CFDD FFE5          	movff	postdec2,postdec1
  1708                           
  1709                           ; BSR set to: 1
  1710                           ;FlashWrite.c: 50: nextDataSet++;
  1711  007FBC  0101               	movlb	1	; () banked
  1712  007FBE  4BCA               	infsnz	flashWriteData@nextDataSet& (0+255),f,b
  1713  007FC0  2BCB               	incf	(flashWriteData@nextDataSet+1)& (0+255),f,b
  1714                           
  1715                           ; BSR set to: 1
  1716  007FC2  0101               	movlb	1	; () banked
  1717  007FC4  4BCE               	infsnz	flashWriteData@k& (0+255),f,b
  1718  007FC6  2BCF               	incf	(flashWriteData@k+1)& (0+255),f,b
  1719  007FC8                     l1738:
  1720                           
  1721                           ; BSR set to: 1
  1722  007FC8  0101               	movlb	1	; () banked
  1723  007FCA  51D0               	movf	flashWriteData@newSize& (0+255),w,b
  1724  007FCC  0101               	movlb	1	; () banked
  1725  007FCE  5DCE               	subwf	flashWriteData@k& (0+255),w,b
  1726  007FD0  0101               	movlb	1	; () banked
  1727  007FD2  51D1               	movf	(flashWriteData@newSize+1)& (0+255),w,b
  1728  007FD4  0101               	movlb	1	; () banked
  1729  007FD6  59CF               	subwfb	(flashWriteData@k+1)& (0+255),w,b
  1730  007FD8  A0D8               	btfss	status,0,c
  1731  007FDA  D7D2               	goto	l1732
  1732  007FDC                     l1740:
  1733                           
  1734                           ; BSR set to: 1
  1735  007FDC  0101               	movlb	1	; () banked
  1736  007FDE  4BDC               	infsnz	flashWriteData@i& (0+255),f,b
  1737  007FE0  2BDD               	incf	(flashWriteData@i+1)& (0+255),f,b
  1738  007FE2                     l1742:
  1739                           
  1740                           ; BSR set to: 1
  1741  007FE2  0101               	movlb	1	; () banked
  1742  007FE4  51DD               	movf	(flashWriteData@i+1)& (0+255),w,b
  1743  007FE6  0A80               	xorlw	128
  1744  007FE8  6E40               	movwf	??_flashWriteData& (0+255),c
  1745  007FEA  0101               	movlb	1	; () banked
  1746  007FEC  51CC               	movf	flashWriteData@timesToWrite& (0+255),w,b
  1747  007FEE  0101               	movlb	1	; () banked
  1748  007FF0  5DDC               	subwf	flashWriteData@i& (0+255),w,b
  1749  007FF2  0101               	movlb	1	; () banked
  1750  007FF4  51CD               	movf	(flashWriteData@timesToWrite+1)& (0+255),w,b
  1751  007FF6  0A80               	xorlw	128
  1752  007FF8  5840               	subwfb	??_flashWriteData& (0+255),w,c
  1753  007FFA  B0D8               	btfsc	status,0,c
  1754                           
  1755                           ; BSR set to: 1
  1756                           
  1757                           ; BSR set to: 1
  1758                           ;FlashWrite.c: 51: }
  1759                           ;FlashWrite.c: 52: }
  1760                           ;FlashWrite.c: 53: }
  1761                           ;FlashWrite.c: 54: return bytesWritten;
  1762                           ;	Return value of _flashWriteData is never used
  1763  007FFC  0012               	return	
  1764  007FFE  D697               	goto	l1712
  1765  008000                     __end_of_flashWriteData:
  1766                           	opt stack 0
  1767                           prodl	equ	0xFF3
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postinc1	equ	0xFE6
  1771                           postdec1	equ	0xFE5
  1772                           fsr1h	equ	0xFE2
  1773                           fsr1l	equ	0xFE1
  1774                           postinc2	equ	0xFDE
  1775                           postdec2	equ	0xFDD
  1776                           fsr2h	equ	0xFDA
  1777                           fsr2l	equ	0xFD9
  1778                           status	equ	0xFD8
  1779                           
  1780 ;; *************** function _rowErase *****************
  1781 ;; Defined at:
  1782 ;;		line 236 in file "../src/PIC18/FlashProg.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;  address         4   37[COMRAM] unsigned long 
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;  i               2   41[COMRAM] int 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;		None               void
  1789 ;; Registers used:
  1790 ;;		wreg, status,2, status,0, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1796 ;;      Params:         4       0       0       0       0       0       0
  1797 ;;      Locals:         2       0       0       0       0       0       0
  1798 ;;      Temps:          0       0       0       0       0       0       0
  1799 ;;      Totals:         6       0       0       0       0       0       0
  1800 ;;Total ram usage:        6 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    5
  1803 ;; This function calls:
  1804 ;;		_PGC_high
  1805 ;;		_PGC_low
  1806 ;;		_PGD_low
  1807 ;;		_flashSetAddress
  1808 ;;		_writeBits
  1809 ;;		_writeICSP
  1810 ;; This function is called by:
  1811 ;;		_flashWriteData
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text3
  1816  007674                     __ptext3:
  1817                           	opt stack 0
  1818  007674                     _rowErase:
  1819                           	opt stack 24
  1820                           
  1821                           ;FlashProg.c: 237: int i;
  1822                           ;FlashProg.c: 238: writeICSP(0x0, 0x8ea6);
  1823                           
  1824                           ; BSR set to: 1
  1825                           ;incstack = 0
  1826  007674  0E00               	movlw	0
  1827  007676  6E0F               	movwf	writeICSP@commandByte+1,c
  1828  007678  0E00               	movlw	0
  1829  00767A  6E0E               	movwf	writeICSP@commandByte,c
  1830  00767C  0E8E               	movlw	142
  1831  00767E  6E11               	movwf	writeICSP@dataBytes+1,c
  1832  007680  0EA6               	movlw	166
  1833  007682  6E10               	movwf	writeICSP@dataBytes,c
  1834  007684  EC04  F038         	call	_writeICSP	;wreg free
  1835                           
  1836                           ;FlashProg.c: 239: writeICSP(0x0, 0x9ca6);
  1837  007688  0E00               	movlw	0
  1838  00768A  6E0F               	movwf	writeICSP@commandByte+1,c
  1839  00768C  0E00               	movlw	0
  1840  00768E  6E0E               	movwf	writeICSP@commandByte,c
  1841  007690  0E9C               	movlw	156
  1842  007692  6E11               	movwf	writeICSP@dataBytes+1,c
  1843  007694  0EA6               	movlw	166
  1844  007696  6E10               	movwf	writeICSP@dataBytes,c
  1845  007698  EC04  F038         	call	_writeICSP	;wreg free
  1846                           
  1847                           ;FlashProg.c: 240: writeICSP(0x0, 0x84a6);
  1848  00769C  0E00               	movlw	0
  1849  00769E  6E0F               	movwf	writeICSP@commandByte+1,c
  1850  0076A0  0E00               	movlw	0
  1851  0076A2  6E0E               	movwf	writeICSP@commandByte,c
  1852  0076A4  0E84               	movlw	132
  1853  0076A6  6E11               	movwf	writeICSP@dataBytes+1,c
  1854  0076A8  0EA6               	movlw	166
  1855  0076AA  6E10               	movwf	writeICSP@dataBytes,c
  1856  0076AC  EC04  F038         	call	_writeICSP	;wreg free
  1857                           
  1858                           ;FlashProg.c: 243: writeICSP(0x0, 0x6af8);
  1859  0076B0  0E00               	movlw	0
  1860  0076B2  6E0F               	movwf	writeICSP@commandByte+1,c
  1861  0076B4  0E00               	movlw	0
  1862  0076B6  6E0E               	movwf	writeICSP@commandByte,c
  1863  0076B8  0E6A               	movlw	106
  1864  0076BA  6E11               	movwf	writeICSP@dataBytes+1,c
  1865  0076BC  0EF8               	movlw	248
  1866  0076BE  6E10               	movwf	writeICSP@dataBytes,c
  1867  0076C0  EC04  F038         	call	_writeICSP	;wreg free
  1868                           
  1869                           ;FlashProg.c: 244: writeICSP(0x0, 0x6af7);
  1870  0076C4  0E00               	movlw	0
  1871  0076C6  6E0F               	movwf	writeICSP@commandByte+1,c
  1872  0076C8  0E00               	movlw	0
  1873  0076CA  6E0E               	movwf	writeICSP@commandByte,c
  1874  0076CC  0E6A               	movlw	106
  1875  0076CE  6E11               	movwf	writeICSP@dataBytes+1,c
  1876  0076D0  0EF7               	movlw	247
  1877  0076D2  6E10               	movwf	writeICSP@dataBytes,c
  1878  0076D4  EC04  F038         	call	_writeICSP	;wreg free
  1879                           
  1880                           ;FlashProg.c: 245: writeICSP(0x0, 0x6af6);
  1881  0076D8  0E00               	movlw	0
  1882  0076DA  6E0F               	movwf	writeICSP@commandByte+1,c
  1883  0076DC  0E00               	movlw	0
  1884  0076DE  6E0E               	movwf	writeICSP@commandByte,c
  1885  0076E0  0E6A               	movlw	106
  1886  0076E2  6E11               	movwf	writeICSP@dataBytes+1,c
  1887  0076E4  0EF6               	movlw	246
  1888  0076E6  6E10               	movwf	writeICSP@dataBytes,c
  1889  0076E8  EC04  F038         	call	_writeICSP	;wreg free
  1890                           
  1891                           ;FlashProg.c: 246: flashSetAddress(address);
  1892  0076EC  C026  F012         	movff	rowErase@address,flashSetAddress@address
  1893  0076F0  C027  F013         	movff	rowErase@address+1,flashSetAddress@address+1
  1894  0076F4  C028  F014         	movff	rowErase@address+2,flashSetAddress@address+2
  1895  0076F8  C029  F015         	movff	rowErase@address+3,flashSetAddress@address+3
  1896  0076FC  EC35  F03A         	call	_flashSetAddress	;wreg free
  1897                           
  1898                           ;FlashProg.c: 248: writeICSP(0x0, 0x88a6);
  1899  007700  0E00               	movlw	0
  1900  007702  6E0F               	movwf	writeICSP@commandByte+1,c
  1901  007704  0E00               	movlw	0
  1902  007706  6E0E               	movwf	writeICSP@commandByte,c
  1903  007708  0E88               	movlw	136
  1904  00770A  6E11               	movwf	writeICSP@dataBytes+1,c
  1905  00770C  0EA6               	movlw	166
  1906  00770E  6E10               	movwf	writeICSP@dataBytes,c
  1907  007710  EC04  F038         	call	_writeICSP	;wreg free
  1908                           
  1909                           ;FlashProg.c: 249: writeICSP(0x0, 0x82a6);
  1910  007714  0E00               	movlw	0
  1911  007716  6E0F               	movwf	writeICSP@commandByte+1,c
  1912  007718  0E00               	movlw	0
  1913  00771A  6E0E               	movwf	writeICSP@commandByte,c
  1914  00771C  0E82               	movlw	130
  1915  00771E  6E11               	movwf	writeICSP@dataBytes+1,c
  1916  007720  0EA6               	movlw	166
  1917  007722  6E10               	movwf	writeICSP@dataBytes,c
  1918  007724  EC04  F038         	call	_writeICSP	;wreg free
  1919                           
  1920                           ;FlashProg.c: 250: writeBits(0x0, 3);
  1921  007728  0E00               	movlw	0
  1922  00772A  6E06               	movwf	writeBits@pattern+1,c
  1923  00772C  0E00               	movlw	0
  1924  00772E  6E05               	movwf	writeBits@pattern,c
  1925  007730  0E00               	movlw	0
  1926  007732  6E08               	movwf	writeBits@bitsToWrite+1,c
  1927  007734  0E03               	movlw	3
  1928  007736  6E07               	movwf	writeBits@bitsToWrite,c
  1929  007738  EC45  F038         	call	_writeBits	;wreg free
  1930                           
  1931                           ;FlashProg.c: 251: PGC_high();
  1932  00773C  EC8D  F037         	call	_PGC_high	;wreg free
  1933                           
  1934                           ;FlashProg.c: 252: PGD_low();
  1935  007740  ECA2  F037         	call	_PGD_low	;wreg free
  1936                           
  1937                           ;FlashProg.c: 253: for(i = 0; i < 25 ; i++){}
  1938  007744  0E00               	movlw	0
  1939  007746  6E2B               	movwf	rowErase@i+1,c
  1940  007748  0E00               	movlw	0
  1941  00774A  6E2A               	movwf	rowErase@i,c
  1942  00774C  502B               	movf	rowErase@i+1,w,c
  1943  00774E  0A80               	xorlw	128
  1944  007750  0F80               	addlw	-128
  1945  007752  0E19               	movlw	25
  1946  007754  B4D8               	btfsc	status,2,c
  1947  007756  5C2A               	subwf	rowErase@i,w,c
  1948  007758  B0D8               	btfsc	status,0,c
  1949  00775A  D003               	goto	l1590
  1950  00775C  4A2A               	infsnz	rowErase@i,f,c
  1951  00775E  2A2B               	incf	rowErase@i+1,f,c
  1952  007760  D7F5               	goto	L7
  1953  007762                     l1590:
  1954                           
  1955                           ;FlashProg.c: 254: PGC_low();
  1956  007762  EC8F  F037         	call	_PGC_low	;wreg free
  1957                           
  1958                           ;FlashProg.c: 255: for(i = 0; i < 25 ; i++){}
  1959  007766  0E00               	movlw	0
  1960  007768  6E2B               	movwf	rowErase@i+1,c
  1961  00776A  0E00               	movlw	0
  1962  00776C  6E2A               	movwf	rowErase@i,c
  1963  00776E  502B               	movf	rowErase@i+1,w,c
  1964  007770  0A80               	xorlw	128
  1965  007772  0F80               	addlw	-128
  1966  007774  0E19               	movlw	25
  1967  007776  B4D8               	btfsc	status,2,c
  1968  007778  5C2A               	subwf	rowErase@i,w,c
  1969  00777A  B0D8               	btfsc	status,0,c
  1970  00777C  D003               	goto	l1602
  1971  00777E  4A2A               	infsnz	rowErase@i,f,c
  1972  007780  2A2B               	incf	rowErase@i+1,f,c
  1973  007782  D7F5               	goto	L8
  1974  007784                     l1602:
  1975                           
  1976                           ;FlashProg.c: 256: writeBits(0x0, 16);
  1977  007784  0E00               	movlw	0
  1978  007786  6E06               	movwf	writeBits@pattern+1,c
  1979  007788  0E00               	movlw	0
  1980  00778A  6E05               	movwf	writeBits@pattern,c
  1981  00778C  0E00               	movlw	0
  1982  00778E  6E08               	movwf	writeBits@bitsToWrite+1,c
  1983  007790  0E10               	movlw	16
  1984  007792  6E07               	movwf	writeBits@bitsToWrite,c
  1985  007794  EC45  F038         	call	_writeBits	;wreg free
  1986  007798  0012               	return	
  1987  00779A                     __end_of_rowErase:
  1988                           	opt stack 0
  1989                           prodl	equ	0xFF3
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           postinc1	equ	0xFE6
  1993                           postdec1	equ	0xFE5
  1994                           fsr1h	equ	0xFE2
  1995                           fsr1l	equ	0xFE1
  1996                           postinc2	equ	0xFDE
  1997                           postdec2	equ	0xFDD
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _overwriteBufferData *****************
  2003 ;; Defined at:
  2004 ;;		line 57 in file "../src/PIC18/FlashWrite.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  data            2    8[COMRAM] PTR unsigned int 
  2007 ;;		 -> flashWriteData@newData(200), 
  2008 ;;  sizeToWrite     2   10[COMRAM] unsigned int 
  2009 ;;  bufferStartP    2   12[COMRAM] unsigned int 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  i               2   26[COMRAM] int 
  2012 ;;  availableWri    2   24[COMRAM] int 
  2013 ;;  start           2   22[COMRAM] int 
  2014 ;;  bytesWritten    2   20[COMRAM] int 
  2015 ;;  bytesLeft       2   18[COMRAM] int 
  2016 ;;  j               2   16[COMRAM] int 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  2    8[COMRAM] int 
  2019 ;; Registers used:
  2020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2026 ;;      Params:         6       0       0       0       0       0       0
  2027 ;;      Locals:        12       0       0       0       0       0       0
  2028 ;;      Temps:          2       0       0       0       0       0       0
  2029 ;;      Totals:        20       0       0       0       0       0       0
  2030 ;;Total ram usage:       20 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    1
  2033 ;; This function calls:
  2034 ;;		_loadHalfBuffer
  2035 ;; This function is called by:
  2036 ;;		_flashWriteData
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           	psect	text4
  2041  007390                     __ptext4:
  2042                           	opt stack 0
  2043  007390                     _overwriteBufferData:
  2044                           	opt stack 28
  2045                           
  2046                           ;FlashWrite.c: 58: int bytesWritten, availableWriteSpace, bytesLeft, start;
  2047                           ;FlashWrite.c: 59: int i, j = 16;
  2048                           
  2049                           ;incstack = 0
  2050  007390  0E00               	movlw	0
  2051  007392  6E12               	movwf	overwriteBufferData@j+1,c
  2052  007394  0E10               	movlw	16
  2053  007396  6E11               	movwf	overwriteBufferData@j,c
  2054                           
  2055                           ;FlashWrite.c: 61: start = bufferStartPoint;
  2056  007398  C00D  F017         	movff	overwriteBufferData@bufferStartPoint,overwriteBufferData@start
  2057  00739C  C00E  F018         	movff	overwriteBufferData@bufferStartPoint+1,overwriteBufferData@start+1
  2058                           
  2059                           ;FlashWrite.c: 62: for(i = 0 ; i < sizeToWrite ; i++){
  2060  0073A0  0E00               	movlw	0
  2061  0073A2  6E1C               	movwf	overwriteBufferData@i+1,c
  2062  0073A4  0E00               	movlw	0
  2063  0073A6  6E1B               	movwf	overwriteBufferData@i,c
  2064  0073A8  D01E               	goto	l1614
  2065  0073AA                     l1608:
  2066                           
  2067                           ;FlashWrite.c: 63: blockBuffer[start] = data[i];
  2068  0073AA  90D8               	bcf	status,0,c
  2069  0073AC  341B               	rlcf	overwriteBufferData@i,w,c
  2070  0073AE  6ED9               	movwf	fsr2l,c
  2071  0073B0  341C               	rlcf	overwriteBufferData@i+1,w,c
  2072  0073B2  6EDA               	movwf	fsr2h,c
  2073  0073B4  5009               	movf	overwriteBufferData@data,w,c
  2074  0073B6  26D9               	addwf	fsr2l,f,c
  2075  0073B8  500A               	movf	overwriteBufferData@data+1,w,c
  2076  0073BA  22DA               	addwfc	fsr2h,f,c
  2077  0073BC  0E00               	movlw	low _blockBuffer
  2078  0073BE  6E0F               	movwf	??_overwriteBufferData& (0+255),c
  2079  0073C0  0E02               	movlw	high _blockBuffer
  2080  0073C2  6E10               	movwf	(??_overwriteBufferData+1)& (0+255),c
  2081  0073C4  90D8               	bcf	status,0,c
  2082  0073C6  3417               	rlcf	overwriteBufferData@start,w,c
  2083  0073C8  6EE1               	movwf	fsr1l,c
  2084  0073CA  3418               	rlcf	overwriteBufferData@start+1,w,c
  2085  0073CC  6EE2               	movwf	fsr1h,c
  2086  0073CE  500F               	movf	??_overwriteBufferData,w,c
  2087  0073D0  26E1               	addwf	fsr1l,f,c
  2088  0073D2  5010               	movf	??_overwriteBufferData+1,w,c
  2089  0073D4  22E2               	addwfc	fsr1h,f,c
  2090  0073D6  CFDE FFE6          	movff	postinc2,postinc1
  2091  0073DA  CFDD FFE5          	movff	postdec2,postdec1
  2092                           
  2093                           ;FlashWrite.c: 64: start++;
  2094  0073DE  4A17               	infsnz	overwriteBufferData@start,f,c
  2095  0073E0  2A18               	incf	overwriteBufferData@start+1,f,c
  2096  0073E2  4A1B               	infsnz	overwriteBufferData@i,f,c
  2097  0073E4  2A1C               	incf	overwriteBufferData@i+1,f,c
  2098  0073E6                     l1614:
  2099  0073E6  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2100  0073E8  5C1B               	subwf	overwriteBufferData@i,w,c
  2101  0073EA  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2102  0073EC  581C               	subwfb	overwriteBufferData@i+1,w,c
  2103  0073EE  A0D8               	btfss	status,0,c
  2104  0073F0  D7DC               	goto	l1608
  2105                           
  2106                           ;FlashWrite.c: 65: }
  2107                           ;FlashWrite.c: 67: availableWriteSpace = 32 - bufferStartPoint;
  2108  0073F2  C00D  F00F         	movff	overwriteBufferData@bufferStartPoint,??_overwriteBufferData
  2109  0073F6  C00E  F010         	movff	overwriteBufferData@bufferStartPoint+1,??_overwriteBufferData+1
  2110  0073FA  1E0F               	comf	??_overwriteBufferData,f,c
  2111  0073FC  1E10               	comf	??_overwriteBufferData+1,f,c
  2112  0073FE  4A0F               	infsnz	??_overwriteBufferData,f,c
  2113  007400  2A10               	incf	??_overwriteBufferData+1,f,c
  2114  007402  0E20               	movlw	32
  2115  007404  240F               	addwf	??_overwriteBufferData,w,c
  2116  007406  6E19               	movwf	overwriteBufferData@availableWriteSpace,c
  2117  007408  0E00               	movlw	0
  2118  00740A  2010               	addwfc	??_overwriteBufferData+1,w,c
  2119  00740C  6E1A               	movwf	overwriteBufferData@availableWriteSpace+1,c
  2120                           
  2121                           ;FlashWrite.c: 69: if(sizeToWrite > availableWriteSpace){
  2122  00740E  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2123  007410  5C19               	subwf	overwriteBufferData@availableWriteSpace,w,c
  2124  007412  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2125  007414  581A               	subwfb	overwriteBufferData@availableWriteSpace+1,w,c
  2126  007416  B0D8               	btfsc	status,0,c
  2127  007418  D01D               	goto	l229
  2128                           
  2129                           ;FlashWrite.c: 70: bytesLeft = sizeToWrite - availableWriteSpace;
  2130  00741A  C019  F00F         	movff	overwriteBufferData@availableWriteSpace,??_overwriteBufferData
  2131  00741E  C01A  F010         	movff	overwriteBufferData@availableWriteSpace+1,??_overwriteBufferData+1
  2132  007422  1E0F               	comf	??_overwriteBufferData,f,c
  2133  007424  1E10               	comf	??_overwriteBufferData+1,f,c
  2134  007426  4A0F               	infsnz	??_overwriteBufferData,f,c
  2135  007428  2A10               	incf	??_overwriteBufferData+1,f,c
  2136  00742A  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2137  00742C  240F               	addwf	??_overwriteBufferData,w,c
  2138  00742E  6E13               	movwf	overwriteBufferData@bytesLeft,c
  2139  007430  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2140  007432  2010               	addwfc	??_overwriteBufferData+1,w,c
  2141  007434  6E14               	movwf	overwriteBufferData@bytesLeft+1,c
  2142                           
  2143                           ;FlashWrite.c: 71: bytesWritten = sizeToWrite - bytesLeft;
  2144  007436  C013  F00F         	movff	overwriteBufferData@bytesLeft,??_overwriteBufferData
  2145  00743A  C014  F010         	movff	overwriteBufferData@bytesLeft+1,??_overwriteBufferData+1
  2146  00743E  1E0F               	comf	??_overwriteBufferData,f,c
  2147  007440  1E10               	comf	??_overwriteBufferData+1,f,c
  2148  007442  4A0F               	infsnz	??_overwriteBufferData,f,c
  2149  007444  2A10               	incf	??_overwriteBufferData+1,f,c
  2150  007446  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2151  007448  240F               	addwf	??_overwriteBufferData,w,c
  2152  00744A  6E15               	movwf	overwriteBufferData@bytesWritten,c
  2153  00744C  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2154  00744E  2010               	addwfc	??_overwriteBufferData+1,w,c
  2155  007450  6E16               	movwf	overwriteBufferData@bytesWritten+1,c
  2156                           
  2157                           ;FlashWrite.c: 72: }
  2158  007452  D004               	goto	l1620
  2159  007454                     l229:
  2160                           
  2161                           ;FlashWrite.c: 73: else
  2162                           ;FlashWrite.c: 74: bytesWritten = sizeToWrite;
  2163  007454  C00B  F015         	movff	overwriteBufferData@sizeToWrite,overwriteBufferData@bytesWritten
  2164  007458  C00C  F016         	movff	overwriteBufferData@sizeToWrite+1,overwriteBufferData@bytesWritten+1
  2165  00745C                     l1620:
  2166                           
  2167                           ;FlashWrite.c: 76: loadHalfBuffer();
  2168  00745C  EC67  F039         	call	_loadHalfBuffer	;wreg free
  2169                           
  2170                           ;FlashWrite.c: 78: return bytesWritten;
  2171  007460  C015  F009         	movff	overwriteBufferData@bytesWritten,?_overwriteBufferData
  2172  007464  C016  F00A         	movff	overwriteBufferData@bytesWritten+1,?_overwriteBufferData+1
  2173  007468  0012               	return	
  2174  00746A                     __end_of_overwriteBufferData:
  2175                           	opt stack 0
  2176                           prodl	equ	0xFF3
  2177                           postinc0	equ	0xFEE
  2178                           wreg	equ	0xFE8
  2179                           postinc1	equ	0xFE6
  2180                           postdec1	equ	0xFE5
  2181                           fsr1h	equ	0xFE2
  2182                           fsr1l	equ	0xFE1
  2183                           postinc2	equ	0xFDE
  2184                           postdec2	equ	0xFDD
  2185                           fsr2h	equ	0xFDA
  2186                           fsr2l	equ	0xFD9
  2187                           status	equ	0xFD8
  2188                           
  2189 ;; *************** function _loadHalfBuffer *****************
  2190 ;; Defined at:
  2191 ;;		line 82 in file "../src/PIC18/FlashWrite.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;		None
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;  i               2    6[COMRAM] int 
  2196 ;;  j               2    4[COMRAM] int 
  2197 ;; Return value:  Size  Location     Type
  2198 ;;		None               void
  2199 ;; Registers used:
  2200 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2206 ;;      Params:         0       0       0       0       0       0       0
  2207 ;;      Locals:         4       0       0       0       0       0       0
  2208 ;;      Temps:          4       0       0       0       0       0       0
  2209 ;;      Totals:         8       0       0       0       0       0       0
  2210 ;;Total ram usage:        8 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_flashWriteData
  2216 ;;		_overwriteBufferData
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text5
  2221  0072CE                     __ptext5:
  2222                           	opt stack 0
  2223  0072CE                     _loadHalfBuffer:
  2224                           	opt stack 28
  2225                           
  2226                           ;FlashWrite.c: 83: int i, j = 16;
  2227                           
  2228                           ;incstack = 0
  2229  0072CE  0E00               	movlw	0
  2230  0072D0  6E06               	movwf	loadHalfBuffer@j+1,c
  2231  0072D2  0E10               	movlw	16
  2232  0072D4  6E05               	movwf	loadHalfBuffer@j,c
  2233                           
  2234                           ;FlashWrite.c: 85: for(i = 0 ; i < 16 ; i++){
  2235  0072D6  0E00               	movlw	0
  2236  0072D8  6E08               	movwf	loadHalfBuffer@i+1,c
  2237  0072DA  0E00               	movlw	0
  2238  0072DC  6E07               	movwf	loadHalfBuffer@i,c
  2239  0072DE  5008               	movf	loadHalfBuffer@i+1,w,c
  2240  0072E0  0A80               	xorlw	128
  2241  0072E2  0F80               	addlw	-128
  2242  0072E4  0E10               	movlw	16
  2243  0072E6  B4D8               	btfsc	status,2,c
  2244  0072E8  5C07               	subwf	loadHalfBuffer@i,w,c
  2245  0072EA  B0D8               	btfsc	status,0,c
  2246  0072EC  D021               	goto	l1500
  2247                           
  2248                           ;FlashWrite.c: 86: halfBuffer1[i] = blockBuffer[i];
  2249  0072EE  0E00               	movlw	low _blockBuffer
  2250  0072F0  6E01               	movwf	??_loadHalfBuffer& (0+255),c
  2251  0072F2  0E02               	movlw	high _blockBuffer
  2252  0072F4  6E02               	movwf	(??_loadHalfBuffer+1)& (0+255),c
  2253  0072F6  90D8               	bcf	status,0,c
  2254  0072F8  3407               	rlcf	loadHalfBuffer@i,w,c
  2255  0072FA  6ED9               	movwf	fsr2l,c
  2256  0072FC  3408               	rlcf	loadHalfBuffer@i+1,w,c
  2257  0072FE  6EDA               	movwf	fsr2h,c
  2258  007300  5001               	movf	??_loadHalfBuffer,w,c
  2259  007302  26D9               	addwf	fsr2l,f,c
  2260  007304  5002               	movf	??_loadHalfBuffer+1,w,c
  2261  007306  22DA               	addwfc	fsr2h,f,c
  2262  007308  0E5A               	movlw	low _halfBuffer1
  2263  00730A  6E03               	movwf	(??_loadHalfBuffer+2)& (0+255),c
  2264  00730C  0E00               	movlw	high _halfBuffer1
  2265  00730E  6E04               	movwf	(??_loadHalfBuffer+3)& (0+255),c
  2266  007310  90D8               	bcf	status,0,c
  2267  007312  3407               	rlcf	loadHalfBuffer@i,w,c
  2268  007314  6EE1               	movwf	fsr1l,c
  2269  007316  3408               	rlcf	loadHalfBuffer@i+1,w,c
  2270  007318  6EE2               	movwf	fsr1h,c
  2271  00731A  5003               	movf	??_loadHalfBuffer+2,w,c
  2272  00731C  26E1               	addwf	fsr1l,f,c
  2273  00731E  5004               	movf	??_loadHalfBuffer+3,w,c
  2274  007320  22E2               	addwfc	fsr1h,f,c
  2275  007322  CFDE FFE6          	movff	postinc2,postinc1
  2276  007326  CFDD FFE5          	movff	postdec2,postdec1
  2277  00732A  4A07               	infsnz	loadHalfBuffer@i,f,c
  2278  00732C  2A08               	incf	loadHalfBuffer@i+1,f,c
  2279  00732E  D7D7               	goto	L9
  2280  007330                     l1500:
  2281                           
  2282                           ;FlashWrite.c: 87: }
  2283                           ;FlashWrite.c: 88: for(i = 0 ; i < 16 ; i++){
  2284  007330  0E00               	movlw	0
  2285  007332  6E08               	movwf	loadHalfBuffer@i+1,c
  2286  007334  0E00               	movlw	0
  2287  007336  6E07               	movwf	loadHalfBuffer@i,c
  2288  007338  5008               	movf	loadHalfBuffer@i+1,w,c
  2289  00733A  0A80               	xorlw	128
  2290  00733C  0F80               	addlw	-128
  2291  00733E  0E10               	movlw	16
  2292  007340  B4D8               	btfsc	status,2,c
  2293  007342  5C07               	subwf	loadHalfBuffer@i,w,c
  2294  007344  B0D8               	btfsc	status,0,c
  2295  007346  D023               	goto	l238
  2296                           
  2297                           ;FlashWrite.c: 89: halfBuffer2[i] = blockBuffer[j];
  2298  007348  0E00               	movlw	low _blockBuffer
  2299  00734A  6E01               	movwf	??_loadHalfBuffer& (0+255),c
  2300  00734C  0E02               	movlw	high _blockBuffer
  2301  00734E  6E02               	movwf	(??_loadHalfBuffer+1)& (0+255),c
  2302  007350  90D8               	bcf	status,0,c
  2303  007352  3405               	rlcf	loadHalfBuffer@j,w,c
  2304  007354  6ED9               	movwf	fsr2l,c
  2305  007356  3406               	rlcf	loadHalfBuffer@j+1,w,c
  2306  007358  6EDA               	movwf	fsr2h,c
  2307  00735A  5001               	movf	??_loadHalfBuffer,w,c
  2308  00735C  26D9               	addwf	fsr2l,f,c
  2309  00735E  5002               	movf	??_loadHalfBuffer+1,w,c
  2310  007360  22DA               	addwfc	fsr2h,f,c
  2311  007362  0E40               	movlw	low _halfBuffer2
  2312  007364  6E03               	movwf	(??_loadHalfBuffer+2)& (0+255),c
  2313  007366  0E02               	movlw	high _halfBuffer2
  2314  007368  6E04               	movwf	(??_loadHalfBuffer+3)& (0+255),c
  2315  00736A  90D8               	bcf	status,0,c
  2316  00736C  3407               	rlcf	loadHalfBuffer@i,w,c
  2317  00736E  6EE1               	movwf	fsr1l,c
  2318  007370  3408               	rlcf	loadHalfBuffer@i+1,w,c
  2319  007372  6EE2               	movwf	fsr1h,c
  2320  007374  5003               	movf	??_loadHalfBuffer+2,w,c
  2321  007376  26E1               	addwf	fsr1l,f,c
  2322  007378  5004               	movf	??_loadHalfBuffer+3,w,c
  2323  00737A  22E2               	addwfc	fsr1h,f,c
  2324  00737C  CFDE FFE6          	movff	postinc2,postinc1
  2325  007380  CFDD FFE5          	movff	postdec2,postdec1
  2326                           
  2327                           ;FlashWrite.c: 90: j++;
  2328  007384  4A05               	infsnz	loadHalfBuffer@j,f,c
  2329  007386  2A06               	incf	loadHalfBuffer@j+1,f,c
  2330  007388  4A07               	infsnz	loadHalfBuffer@i,f,c
  2331  00738A  2A08               	incf	loadHalfBuffer@i+1,f,c
  2332  00738C  D7D5               	goto	L10
  2333  00738E                     l238:
  2334  00738E  0012               	return	
  2335  007390                     __end_of_loadHalfBuffer:
  2336                           	opt stack 0
  2337                           prodl	equ	0xFF3
  2338                           postinc0	equ	0xFEE
  2339                           wreg	equ	0xFE8
  2340                           postinc1	equ	0xFE6
  2341                           postdec1	equ	0xFE5
  2342                           fsr1h	equ	0xFE2
  2343                           fsr1l	equ	0xFE1
  2344                           postinc2	equ	0xFDE
  2345                           postdec2	equ	0xFDD
  2346                           fsr2h	equ	0xFDA
  2347                           fsr2l	equ	0xFD9
  2348                           status	equ	0xFD8
  2349                           
  2350 ;; *************** function _flashWriteBlock *****************
  2351 ;; Defined at:
  2352 ;;		line 201 in file "../src/PIC18/FlashProg.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;  firstHalf       2   37[COMRAM] PTR unsigned int 
  2355 ;;		 -> halfBuffer1(32), main@blockWrite3(32), main@blockWrite(32), 
  2356 ;;  secondHalf      2   39[COMRAM] PTR unsigned int 
  2357 ;;		 -> halfBuffer2(32), main@blockWrite4(32), main@blockWrite2(32), 
  2358 ;;  blockNumber     4   41[COMRAM] unsigned long 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  blockSelect     4   49[COMRAM] unsigned long 
  2361 ;;  i               2   53[COMRAM] int 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;		None               void
  2364 ;; Registers used:
  2365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2371 ;;      Params:         8       0       0       0       0       0       0
  2372 ;;      Locals:         6       0       0       0       0       0       0
  2373 ;;      Temps:          4       0       0       0       0       0       0
  2374 ;;      Totals:        18       0       0       0       0       0       0
  2375 ;;Total ram usage:       18 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    5
  2378 ;; This function calls:
  2379 ;;		_flashSetAddress
  2380 ;;		_flashWriteAndProgram
  2381 ;;		_writeToBuffer
  2382 ;; This function is called by:
  2383 ;;		_main
  2384 ;;		_flashWriteData
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text6
  2389  00754E                     __ptext6:
  2390                           	opt stack 0
  2391  00754E                     _flashWriteBlock:
  2392                           	opt stack 24
  2393                           
  2394                           ;FlashProg.c: 202: int i;
  2395                           ;FlashProg.c: 203: uint32 blockSelect;
  2396                           ;FlashProg.c: 205: blockSelect = (blockNumber-1)*64;
  2397                           
  2398                           ;incstack = 0
  2399  00754E  C02A  F02E         	movff	flashWriteBlock@blockNumber,??_flashWriteBlock
  2400  007552  C02B  F02F         	movff	flashWriteBlock@blockNumber+1,??_flashWriteBlock+1
  2401  007556  C02C  F030         	movff	flashWriteBlock@blockNumber+2,??_flashWriteBlock+2
  2402  00755A  C02D  F031         	movff	flashWriteBlock@blockNumber+3,??_flashWriteBlock+3
  2403  00755E  0E06               	movlw	6
  2404  007560                     u805:
  2405  007560  90D8               	bcf	status,0,c
  2406  007562  362E               	rlcf	??_flashWriteBlock,f,c
  2407  007564  362F               	rlcf	??_flashWriteBlock+1,f,c
  2408  007566  3630               	rlcf	??_flashWriteBlock+2,f,c
  2409  007568  3631               	rlcf	??_flashWriteBlock+3,f,c
  2410  00756A  2EE8               	decfsz	wreg,f,c
  2411  00756C  D7F9               	goto	u805
  2412  00756E  0EC0               	movlw	192
  2413  007570  242E               	addwf	??_flashWriteBlock,w,c
  2414  007572  6E32               	movwf	flashWriteBlock@blockSelect,c
  2415  007574  0EFF               	movlw	255
  2416  007576  202F               	addwfc	??_flashWriteBlock+1,w,c
  2417  007578  6E33               	movwf	flashWriteBlock@blockSelect+1,c
  2418  00757A  0EFF               	movlw	255
  2419  00757C  2030               	addwfc	??_flashWriteBlock+2,w,c
  2420  00757E  6E34               	movwf	flashWriteBlock@blockSelect+2,c
  2421  007580  0EFF               	movlw	255
  2422  007582  2031               	addwfc	??_flashWriteBlock+3,w,c
  2423  007584  6E35               	movwf	flashWriteBlock@blockSelect+3,c
  2424                           
  2425                           ;FlashProg.c: 206: flashSetAddress(blockSelect);
  2426  007586  C032  F012         	movff	flashWriteBlock@blockSelect,flashSetAddress@address
  2427  00758A  C033  F013         	movff	flashWriteBlock@blockSelect+1,flashSetAddress@address+1
  2428  00758E  C034  F014         	movff	flashWriteBlock@blockSelect+2,flashSetAddress@address+2
  2429  007592  C035  F015         	movff	flashWriteBlock@blockSelect+3,flashSetAddress@address+3
  2430  007596  EC35  F03A         	call	_flashSetAddress	;wreg free
  2431                           
  2432                           ;FlashProg.c: 207: flashSetAddress(blockSelect);
  2433  00759A  C032  F012         	movff	flashWriteBlock@blockSelect,flashSetAddress@address
  2434  00759E  C033  F013         	movff	flashWriteBlock@blockSelect+1,flashSetAddress@address+1
  2435  0075A2  C034  F014         	movff	flashWriteBlock@blockSelect+2,flashSetAddress@address+2
  2436  0075A6  C035  F015         	movff	flashWriteBlock@blockSelect+3,flashSetAddress@address+3
  2437  0075AA  EC35  F03A         	call	_flashSetAddress	;wreg free
  2438                           
  2439                           ;FlashProg.c: 208: for(i = 0 ; i < 15 ; i++){
  2440  0075AE  0E00               	movlw	0
  2441  0075B0  6E37               	movwf	flashWriteBlock@i+1,c
  2442  0075B2  0E00               	movlw	0
  2443  0075B4  6E36               	movwf	flashWriteBlock@i,c
  2444  0075B6  5037               	movf	flashWriteBlock@i+1,w,c
  2445  0075B8  0A80               	xorlw	128
  2446  0075BA  0F80               	addlw	-128
  2447  0075BC  0E0F               	movlw	15
  2448  0075BE  B4D8               	btfsc	status,2,c
  2449  0075C0  5C36               	subwf	flashWriteBlock@i,w,c
  2450  0075C2  B0D8               	btfsc	status,0,c
  2451  0075C4  D012               	goto	l1556
  2452                           
  2453                           ;FlashProg.c: 209: writeToBuffer(firstHalf[i]);
  2454  0075C6  90D8               	bcf	status,0,c
  2455  0075C8  3436               	rlcf	flashWriteBlock@i,w,c
  2456  0075CA  6ED9               	movwf	fsr2l,c
  2457  0075CC  3437               	rlcf	flashWriteBlock@i+1,w,c
  2458  0075CE  6EDA               	movwf	fsr2h,c
  2459  0075D0  5026               	movf	flashWriteBlock@firstHalf,w,c
  2460  0075D2  26D9               	addwf	fsr2l,f,c
  2461  0075D4  5027               	movf	flashWriteBlock@firstHalf+1,w,c
  2462  0075D6  22DA               	addwfc	fsr2h,f,c
  2463  0075D8  CFDE F012          	movff	postinc2,writeToBuffer@data
  2464  0075DC  CFDD F013          	movff	postdec2,writeToBuffer@data+1
  2465  0075E0  ECDB  F037         	call	_writeToBuffer	;wreg free
  2466  0075E4  4A36               	infsnz	flashWriteBlock@i,f,c
  2467  0075E6  2A37               	incf	flashWriteBlock@i+1,f,c
  2468  0075E8  D7E6               	goto	L11
  2469  0075EA                     l1556:
  2470                           
  2471                           ;FlashProg.c: 210: }
  2472                           ;FlashProg.c: 211: flashWriteAndProgram(firstHalf[15]);
  2473  0075EA  EE20 F01E          	lfsr	2,30
  2474  0075EE  5026               	movf	flashWriteBlock@firstHalf,w,c
  2475  0075F0  26D9               	addwf	fsr2l,f,c
  2476  0075F2  5027               	movf	flashWriteBlock@firstHalf+1,w,c
  2477  0075F4  22DA               	addwfc	fsr2h,f,c
  2478  0075F6  CFDE F012          	movff	postinc2,flashWriteAndProgram@data
  2479  0075FA  CFDD F013          	movff	postdec2,flashWriteAndProgram@data+1
  2480  0075FE  ECDC  F038         	call	_flashWriteAndProgram	;wreg free
  2481                           
  2482                           ;FlashProg.c: 213: flashSetAddress(blockSelect+32);
  2483  007602  0E20               	movlw	32
  2484  007604  2432               	addwf	flashWriteBlock@blockSelect,w,c
  2485  007606  6E12               	movwf	flashSetAddress@address,c
  2486  007608  0E00               	movlw	0
  2487  00760A  2033               	addwfc	flashWriteBlock@blockSelect+1,w,c
  2488  00760C  6E13               	movwf	flashSetAddress@address+1,c
  2489  00760E  0E00               	movlw	0
  2490  007610  2034               	addwfc	flashWriteBlock@blockSelect+2,w,c
  2491  007612  6E14               	movwf	flashSetAddress@address+2,c
  2492  007614  0E00               	movlw	0
  2493  007616  2035               	addwfc	flashWriteBlock@blockSelect+3,w,c
  2494  007618  6E15               	movwf	flashSetAddress@address+3,c
  2495  00761A  EC35  F03A         	call	_flashSetAddress	;wreg free
  2496                           
  2497                           ;FlashProg.c: 214: for(i = 0 ; i < 15 ; i++){
  2498  00761E  0E00               	movlw	0
  2499  007620  6E37               	movwf	flashWriteBlock@i+1,c
  2500  007622  0E00               	movlw	0
  2501  007624  6E36               	movwf	flashWriteBlock@i,c
  2502  007626  5037               	movf	flashWriteBlock@i+1,w,c
  2503  007628  0A80               	xorlw	128
  2504  00762A  0F80               	addlw	-128
  2505  00762C  0E0F               	movlw	15
  2506  00762E  B4D8               	btfsc	status,2,c
  2507  007630  5C36               	subwf	flashWriteBlock@i,w,c
  2508  007632  B0D8               	btfsc	status,0,c
  2509  007634  D012               	goto	l1572
  2510                           
  2511                           ;FlashProg.c: 215: writeToBuffer(secondHalf[i]);
  2512  007636  90D8               	bcf	status,0,c
  2513  007638  3436               	rlcf	flashWriteBlock@i,w,c
  2514  00763A  6ED9               	movwf	fsr2l,c
  2515  00763C  3437               	rlcf	flashWriteBlock@i+1,w,c
  2516  00763E  6EDA               	movwf	fsr2h,c
  2517  007640  5028               	movf	flashWriteBlock@secondHalf,w,c
  2518  007642  26D9               	addwf	fsr2l,f,c
  2519  007644  5029               	movf	flashWriteBlock@secondHalf+1,w,c
  2520  007646  22DA               	addwfc	fsr2h,f,c
  2521  007648  CFDE F012          	movff	postinc2,writeToBuffer@data
  2522  00764C  CFDD F013          	movff	postdec2,writeToBuffer@data+1
  2523  007650  ECDB  F037         	call	_writeToBuffer	;wreg free
  2524  007654  4A36               	infsnz	flashWriteBlock@i,f,c
  2525  007656  2A37               	incf	flashWriteBlock@i+1,f,c
  2526  007658  D7E6               	goto	L12
  2527  00765A                     l1572:
  2528                           
  2529                           ;FlashProg.c: 216: }
  2530                           ;FlashProg.c: 217: flashWriteAndProgram(secondHalf[15]);
  2531  00765A  EE20 F01E          	lfsr	2,30
  2532  00765E  5028               	movf	flashWriteBlock@secondHalf,w,c
  2533  007660  26D9               	addwf	fsr2l,f,c
  2534  007662  5029               	movf	flashWriteBlock@secondHalf+1,w,c
  2535  007664  22DA               	addwfc	fsr2h,f,c
  2536  007666  CFDE F012          	movff	postinc2,flashWriteAndProgram@data
  2537  00766A  CFDD F013          	movff	postdec2,flashWriteAndProgram@data+1
  2538  00766E  ECDC  F038         	call	_flashWriteAndProgram	;wreg free
  2539  007672  0012               	return	
  2540  007674                     __end_of_flashWriteBlock:
  2541                           	opt stack 0
  2542                           prodl	equ	0xFF3
  2543                           postinc0	equ	0xFEE
  2544                           wreg	equ	0xFE8
  2545                           postinc1	equ	0xFE6
  2546                           postdec1	equ	0xFE5
  2547                           fsr1h	equ	0xFE2
  2548                           fsr1l	equ	0xFE1
  2549                           postinc2	equ	0xFDE
  2550                           postdec2	equ	0xFDD
  2551                           fsr2h	equ	0xFDA
  2552                           fsr2l	equ	0xFD9
  2553                           status	equ	0xFD8
  2554                           
  2555 ;; *************** function _writeToBuffer *****************
  2556 ;; Defined at:
  2557 ;;		line 134 in file "../src/PIC18/FlashProg.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;  data            2   17[COMRAM] unsigned int 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;		None
  2562 ;; Return value:  Size  Location     Type
  2563 ;;		None               void
  2564 ;; Registers used:
  2565 ;;		wreg, status,2, status,0, cstack
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2571 ;;      Params:         2       0       0       0       0       0       0
  2572 ;;      Locals:         0       0       0       0       0       0       0
  2573 ;;      Temps:          0       0       0       0       0       0       0
  2574 ;;      Totals:         2       0       0       0       0       0       0
  2575 ;;Total ram usage:        2 bytes
  2576 ;; Hardware stack levels used:    1
  2577 ;; Hardware stack levels required when called:    4
  2578 ;; This function calls:
  2579 ;;		_writeICSP
  2580 ;; This function is called by:
  2581 ;;		_flashWriteBlock
  2582 ;;		_flashWriteHalfBlock
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	text7
  2587  006FB6                     __ptext7:
  2588                           	opt stack 0
  2589  006FB6                     _writeToBuffer:
  2590                           	opt stack 24
  2591                           
  2592                           ;FlashProg.c: 135: writeICSP(0xd, data);
  2593                           
  2594                           ;incstack = 0
  2595  006FB6  0E00               	movlw	0
  2596  006FB8  6E0F               	movwf	writeICSP@commandByte+1,c
  2597  006FBA  0E0D               	movlw	13
  2598  006FBC  6E0E               	movwf	writeICSP@commandByte,c
  2599  006FBE  C012  F010         	movff	writeToBuffer@data,writeICSP@dataBytes
  2600  006FC2  C013  F011         	movff	writeToBuffer@data+1,writeICSP@dataBytes+1
  2601  006FC6  EC04  F038         	call	_writeICSP	;wreg free
  2602  006FCA  0012               	return	
  2603  006FCC                     __end_of_writeToBuffer:
  2604                           	opt stack 0
  2605                           prodl	equ	0xFF3
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           postinc1	equ	0xFE6
  2609                           postdec1	equ	0xFE5
  2610                           fsr1h	equ	0xFE2
  2611                           fsr1l	equ	0xFE1
  2612                           postinc2	equ	0xFDE
  2613                           postdec2	equ	0xFDD
  2614                           fsr2h	equ	0xFDA
  2615                           fsr2l	equ	0xFD9
  2616                           status	equ	0xFD8
  2617                           
  2618 ;; *************** function _flashWriteAndProgram *****************
  2619 ;; Defined at:
  2620 ;;		line 138 in file "../src/PIC18/FlashProg.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  data            2   17[COMRAM] unsigned int 
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;  i               2   19[COMRAM] int 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;		None               void
  2627 ;; Registers used:
  2628 ;;		wreg, status,2, status,0, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2634 ;;      Params:         2       0       0       0       0       0       0
  2635 ;;      Locals:         2       0       0       0       0       0       0
  2636 ;;      Temps:          0       0       0       0       0       0       0
  2637 ;;      Totals:         4       0       0       0       0       0       0
  2638 ;;Total ram usage:        4 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    4
  2641 ;; This function calls:
  2642 ;;		_PGC_high
  2643 ;;		_PGC_low
  2644 ;;		_PGD_low
  2645 ;;		_writeBits
  2646 ;;		_writeICSP
  2647 ;; This function is called by:
  2648 ;;		_flashWriteBlock
  2649 ;;		_flashWriteHalfBlock
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text8
  2654  0071B8                     __ptext8:
  2655                           	opt stack 0
  2656  0071B8                     _flashWriteAndProgram:
  2657                           	opt stack 24
  2658                           
  2659                           ;FlashProg.c: 139: int i;
  2660                           ;FlashProg.c: 142: writeICSP(0xf, data);
  2661                           
  2662                           ;incstack = 0
  2663  0071B8  0E00               	movlw	0
  2664  0071BA  6E0F               	movwf	writeICSP@commandByte+1,c
  2665  0071BC  0E0F               	movlw	15
  2666  0071BE  6E0E               	movwf	writeICSP@commandByte,c
  2667  0071C0  C012  F010         	movff	flashWriteAndProgram@data,writeICSP@dataBytes
  2668  0071C4  C013  F011         	movff	flashWriteAndProgram@data+1,writeICSP@dataBytes+1
  2669  0071C8  EC04  F038         	call	_writeICSP	;wreg free
  2670                           
  2671                           ;FlashProg.c: 144: writeBits(0x0, 3);
  2672  0071CC  0E00               	movlw	0
  2673  0071CE  6E06               	movwf	writeBits@pattern+1,c
  2674  0071D0  0E00               	movlw	0
  2675  0071D2  6E05               	movwf	writeBits@pattern,c
  2676  0071D4  0E00               	movlw	0
  2677  0071D6  6E08               	movwf	writeBits@bitsToWrite+1,c
  2678  0071D8  0E03               	movlw	3
  2679  0071DA  6E07               	movwf	writeBits@bitsToWrite,c
  2680  0071DC  EC45  F038         	call	_writeBits	;wreg free
  2681                           
  2682                           ;FlashProg.c: 145: PGC_high();
  2683  0071E0  EC8D  F037         	call	_PGC_high	;wreg free
  2684                           
  2685                           ;FlashProg.c: 146: PGD_low();
  2686  0071E4  ECA2  F037         	call	_PGD_low	;wreg free
  2687                           
  2688                           ;FlashProg.c: 147: for(i = 0; i < 25 ; i++){}
  2689  0071E8  0E00               	movlw	0
  2690  0071EA  6E15               	movwf	flashWriteAndProgram@i+1,c
  2691  0071EC  0E00               	movlw	0
  2692  0071EE  6E14               	movwf	flashWriteAndProgram@i,c
  2693  0071F0  5015               	movf	flashWriteAndProgram@i+1,w,c
  2694  0071F2  0A80               	xorlw	128
  2695  0071F4  0F80               	addlw	-128
  2696  0071F6  0E19               	movlw	25
  2697  0071F8  B4D8               	btfsc	status,2,c
  2698  0071FA  5C14               	subwf	flashWriteAndProgram@i,w,c
  2699  0071FC  B0D8               	btfsc	status,0,c
  2700  0071FE  D003               	goto	l1466
  2701  007200  4A14               	infsnz	flashWriteAndProgram@i,f,c
  2702  007202  2A15               	incf	flashWriteAndProgram@i+1,f,c
  2703  007204  D7F5               	goto	L13
  2704  007206                     l1466:
  2705                           
  2706                           ;FlashProg.c: 148: PGC_low();
  2707  007206  EC8F  F037         	call	_PGC_low	;wreg free
  2708                           
  2709                           ;FlashProg.c: 149: for(i = 0; i < 25 ; i++){}
  2710  00720A  0E00               	movlw	0
  2711  00720C  6E15               	movwf	flashWriteAndProgram@i+1,c
  2712  00720E  0E00               	movlw	0
  2713  007210  6E14               	movwf	flashWriteAndProgram@i,c
  2714  007212  5015               	movf	flashWriteAndProgram@i+1,w,c
  2715  007214  0A80               	xorlw	128
  2716  007216  0F80               	addlw	-128
  2717  007218  0E19               	movlw	25
  2718  00721A  B4D8               	btfsc	status,2,c
  2719  00721C  5C14               	subwf	flashWriteAndProgram@i,w,c
  2720  00721E  B0D8               	btfsc	status,0,c
  2721  007220  D003               	goto	l1478
  2722  007222  4A14               	infsnz	flashWriteAndProgram@i,f,c
  2723  007224  2A15               	incf	flashWriteAndProgram@i+1,f,c
  2724  007226  D7F5               	goto	L14
  2725  007228                     l1478:
  2726                           
  2727                           ;FlashProg.c: 150: writeBits(0x0, 16);
  2728  007228  0E00               	movlw	0
  2729  00722A  6E06               	movwf	writeBits@pattern+1,c
  2730  00722C  0E00               	movlw	0
  2731  00722E  6E05               	movwf	writeBits@pattern,c
  2732  007230  0E00               	movlw	0
  2733  007232  6E08               	movwf	writeBits@bitsToWrite+1,c
  2734  007234  0E10               	movlw	16
  2735  007236  6E07               	movwf	writeBits@bitsToWrite,c
  2736  007238  EC45  F038         	call	_writeBits	;wreg free
  2737  00723C  0012               	return	
  2738  00723E                     __end_of_flashWriteAndProgram:
  2739                           	opt stack 0
  2740                           prodl	equ	0xFF3
  2741                           postinc0	equ	0xFEE
  2742                           wreg	equ	0xFE8
  2743                           postinc1	equ	0xFE6
  2744                           postdec1	equ	0xFE5
  2745                           fsr1h	equ	0xFE2
  2746                           fsr1l	equ	0xFE1
  2747                           postinc2	equ	0xFDE
  2748                           postdec2	equ	0xFDD
  2749                           fsr2h	equ	0xFDA
  2750                           fsr2l	equ	0xFD9
  2751                           status	equ	0xFD8
  2752                           
  2753 ;; *************** function _flashReadBlock *****************
  2754 ;; Defined at:
  2755 ;;		line 189 in file "../src/PIC18/FlashProg.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;  data            2   37[COMRAM] PTR unsigned int 
  2758 ;;		 -> blockBuffer(64), main@blockRead(64), 
  2759 ;;  size            2   39[COMRAM] unsigned int 
  2760 ;;  blockNumber     4   41[COMRAM] unsigned long 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  blockSelect     4   49[COMRAM] unsigned long 
  2763 ;;  i               2   53[COMRAM] int 
  2764 ;; Return value:  Size  Location     Type
  2765 ;;		None               void
  2766 ;; Registers used:
  2767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2773 ;;      Params:         8       0       0       0       0       0       0
  2774 ;;      Locals:         6       0       0       0       0       0       0
  2775 ;;      Temps:          4       0       0       0       0       0       0
  2776 ;;      Totals:        18       0       0       0       0       0       0
  2777 ;;Total ram usage:       18 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    5
  2780 ;; This function calls:
  2781 ;;		_flashRead16Bits
  2782 ;;		_flashSetAddress
  2783 ;; This function is called by:
  2784 ;;		_main
  2785 ;;		_flashWriteData
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text9
  2790  00723E                     __ptext9:
  2791                           	opt stack 0
  2792  00723E                     _flashReadBlock:
  2793                           	opt stack 24
  2794                           
  2795                           ;FlashProg.c: 190: int i;
  2796                           ;FlashProg.c: 191: uint32 blockSelect;
  2797                           ;FlashProg.c: 193: blockSelect = (blockNumber-1)*64;
  2798                           
  2799                           ;incstack = 0
  2800  00723E  C02A  F02E         	movff	flashReadBlock@blockNumber,??_flashReadBlock
  2801  007242  C02B  F02F         	movff	flashReadBlock@blockNumber+1,??_flashReadBlock+1
  2802  007246  C02C  F030         	movff	flashReadBlock@blockNumber+2,??_flashReadBlock+2
  2803  00724A  C02D  F031         	movff	flashReadBlock@blockNumber+3,??_flashReadBlock+3
  2804  00724E  0E06               	movlw	6
  2805  007250                     u785:
  2806  007250  90D8               	bcf	status,0,c
  2807  007252  362E               	rlcf	??_flashReadBlock,f,c
  2808  007254  362F               	rlcf	??_flashReadBlock+1,f,c
  2809  007256  3630               	rlcf	??_flashReadBlock+2,f,c
  2810  007258  3631               	rlcf	??_flashReadBlock+3,f,c
  2811  00725A  2EE8               	decfsz	wreg,f,c
  2812  00725C  D7F9               	goto	u785
  2813  00725E  0EC0               	movlw	192
  2814  007260  242E               	addwf	??_flashReadBlock,w,c
  2815  007262  6E32               	movwf	flashReadBlock@blockSelect,c
  2816  007264  0EFF               	movlw	255
  2817  007266  202F               	addwfc	??_flashReadBlock+1,w,c
  2818  007268  6E33               	movwf	flashReadBlock@blockSelect+1,c
  2819  00726A  0EFF               	movlw	255
  2820  00726C  2030               	addwfc	??_flashReadBlock+2,w,c
  2821  00726E  6E34               	movwf	flashReadBlock@blockSelect+2,c
  2822  007270  0EFF               	movlw	255
  2823  007272  2031               	addwfc	??_flashReadBlock+3,w,c
  2824  007274  6E35               	movwf	flashReadBlock@blockSelect+3,c
  2825                           
  2826                           ;FlashProg.c: 194: flashSetAddress(blockSelect);
  2827  007276  C032  F012         	movff	flashReadBlock@blockSelect,flashSetAddress@address
  2828  00727A  C033  F013         	movff	flashReadBlock@blockSelect+1,flashSetAddress@address+1
  2829  00727E  C034  F014         	movff	flashReadBlock@blockSelect+2,flashSetAddress@address+2
  2830  007282  C035  F015         	movff	flashReadBlock@blockSelect+3,flashSetAddress@address+3
  2831  007286  EC35  F03A         	call	_flashSetAddress	;wreg free
  2832                           
  2833                           ;FlashProg.c: 196: for(i = 0; i < size/2 ; i++){
  2834  00728A  0E00               	movlw	0
  2835  00728C  6E37               	movwf	flashReadBlock@i+1,c
  2836  00728E  0E00               	movlw	0
  2837  007290  6E36               	movwf	flashReadBlock@i,c
  2838  007292  D011               	goto	l1536
  2839  007294                     l1532:
  2840                           
  2841                           ;FlashProg.c: 197: data[i] = flashRead16Bits();
  2842  007294  EC2E  F038         	call	_flashRead16Bits	;wreg free
  2843  007298  90D8               	bcf	status,0,c
  2844  00729A  3436               	rlcf	flashReadBlock@i,w,c
  2845  00729C  6ED9               	movwf	fsr2l,c
  2846  00729E  3437               	rlcf	flashReadBlock@i+1,w,c
  2847  0072A0  6EDA               	movwf	fsr2h,c
  2848  0072A2  5026               	movf	flashReadBlock@data,w,c
  2849  0072A4  26D9               	addwf	fsr2l,f,c
  2850  0072A6  5027               	movf	flashReadBlock@data+1,w,c
  2851  0072A8  22DA               	addwfc	fsr2h,f,c
  2852  0072AA  C013  FFDE         	movff	?_flashRead16Bits,postinc2
  2853  0072AE  C014  FFDD         	movff	?_flashRead16Bits+1,postdec2
  2854  0072B2  4A36               	infsnz	flashReadBlock@i,f,c
  2855  0072B4  2A37               	incf	flashReadBlock@i+1,f,c
  2856  0072B6                     l1536:
  2857  0072B6  90D8               	bcf	status,0,c
  2858  0072B8  3029               	rrcf	flashReadBlock@size+1,w,c
  2859  0072BA  6E2F               	movwf	(??_flashReadBlock+1)& (0+255),c
  2860  0072BC  3028               	rrcf	flashReadBlock@size,w,c
  2861  0072BE  6E2E               	movwf	??_flashReadBlock& (0+255),c
  2862  0072C0  502E               	movf	??_flashReadBlock,w,c
  2863  0072C2  5C36               	subwf	flashReadBlock@i,w,c
  2864  0072C4  502F               	movf	??_flashReadBlock+1,w,c
  2865  0072C6  5837               	subwfb	flashReadBlock@i+1,w,c
  2866  0072C8  B0D8               	btfsc	status,0,c
  2867  0072CA  0012               	return	
  2868  0072CC  D7E3               	goto	l1532
  2869  0072CE                     __end_of_flashReadBlock:
  2870                           	opt stack 0
  2871                           prodl	equ	0xFF3
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           postinc1	equ	0xFE6
  2875                           postdec1	equ	0xFE5
  2876                           fsr1h	equ	0xFE2
  2877                           fsr1l	equ	0xFE1
  2878                           postinc2	equ	0xFDE
  2879                           postdec2	equ	0xFDD
  2880                           fsr2h	equ	0xFDA
  2881                           fsr2l	equ	0xFD9
  2882                           status	equ	0xFD8
  2883                           
  2884 ;; *************** function _flashSetAddress *****************
  2885 ;; Defined at:
  2886 ;;		line 117 in file "../src/PIC18/FlashProg.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  address         4   17[COMRAM] unsigned long 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  lowAddr         4   33[COMRAM] unsigned long 
  2891 ;;  highAddr        4   29[COMRAM] unsigned long 
  2892 ;;  upperAddr       4   25[COMRAM] unsigned long 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;		None               void
  2895 ;; Registers used:
  2896 ;;		wreg, status,2, status,0, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2902 ;;      Params:         4       0       0       0       0       0       0
  2903 ;;      Locals:        12       0       0       0       0       0       0
  2904 ;;      Temps:          4       0       0       0       0       0       0
  2905 ;;      Totals:        20       0       0       0       0       0       0
  2906 ;;Total ram usage:       20 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    4
  2909 ;; This function calls:
  2910 ;;		_writeICSP
  2911 ;; This function is called by:
  2912 ;;		_flashReadBlock
  2913 ;;		_flashWriteBlock
  2914 ;;		_rowErase
  2915 ;;		_flashWriteData
  2916 ;;		_flashWriteHalfBlock
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text10
  2921  00746A                     __ptext10:
  2922                           	opt stack 0
  2923  00746A                     _flashSetAddress:
  2924                           	opt stack 24
  2925                           
  2926                           ;FlashProg.c: 118: uint32 upperAddr;
  2927                           ;FlashProg.c: 119: uint32 highAddr;
  2928                           ;FlashProg.c: 120: uint32 lowAddr;
  2929                           ;FlashProg.c: 122: lowAddr = (address&0x0000ff);
  2930                           
  2931                           ;incstack = 0
  2932  00746A  5012               	movf	flashSetAddress@address,w,c
  2933  00746C  6E22               	movwf	flashSetAddress@lowAddr,c
  2934  00746E  6A23               	clrf	flashSetAddress@lowAddr+1,c
  2935  007470  6A24               	clrf	flashSetAddress@lowAddr+2,c
  2936  007472  6A25               	clrf	flashSetAddress@lowAddr+3,c
  2937                           
  2938                           ;FlashProg.c: 123: highAddr = ((address>>8)&0x0000ff);
  2939  007474  C012  F016         	movff	flashSetAddress@address,??_flashSetAddress
  2940  007478  C013  F017         	movff	flashSetAddress@address+1,??_flashSetAddress+1
  2941  00747C  C014  F018         	movff	flashSetAddress@address+2,??_flashSetAddress+2
  2942  007480  C015  F019         	movff	flashSetAddress@address+3,??_flashSetAddress+3
  2943  007484  C017  F016         	movff	??_flashSetAddress+1,??_flashSetAddress
  2944  007488  C018  F017         	movff	??_flashSetAddress+2,??_flashSetAddress+1
  2945  00748C  C019  F018         	movff	??_flashSetAddress+3,??_flashSetAddress+2
  2946  007490  6A19               	clrf	??_flashSetAddress+3,c
  2947  007492  5016               	movf	??_flashSetAddress,w,c
  2948  007494  6E1E               	movwf	flashSetAddress@highAddr,c
  2949  007496  6A1F               	clrf	flashSetAddress@highAddr+1,c
  2950  007498  6A20               	clrf	flashSetAddress@highAddr+2,c
  2951  00749A  6A21               	clrf	flashSetAddress@highAddr+3,c
  2952                           
  2953                           ;FlashProg.c: 124: upperAddr = ((address>>16)&0x0000ff);
  2954  00749C  C012  F016         	movff	flashSetAddress@address,??_flashSetAddress
  2955  0074A0  C013  F017         	movff	flashSetAddress@address+1,??_flashSetAddress+1
  2956  0074A4  C014  F018         	movff	flashSetAddress@address+2,??_flashSetAddress+2
  2957  0074A8  C015  F019         	movff	flashSetAddress@address+3,??_flashSetAddress+3
  2958  0074AC  0E11               	movlw	17
  2959  0074AE  D005               	goto	u690
  2960  0074B0                     u695:
  2961  0074B0  90D8               	bcf	status,0,c
  2962  0074B2  3219               	rrcf	??_flashSetAddress+3,f,c
  2963  0074B4  3218               	rrcf	??_flashSetAddress+2,f,c
  2964  0074B6  3217               	rrcf	??_flashSetAddress+1,f,c
  2965  0074B8  3216               	rrcf	??_flashSetAddress,f,c
  2966  0074BA                     u690:
  2967  0074BA  2EE8               	decfsz	wreg,f,c
  2968  0074BC  D7F9               	goto	u695
  2969  0074BE  5016               	movf	??_flashSetAddress,w,c
  2970  0074C0  6E1A               	movwf	flashSetAddress@upperAddr,c
  2971  0074C2  6A1B               	clrf	flashSetAddress@upperAddr+1,c
  2972  0074C4  6A1C               	clrf	flashSetAddress@upperAddr+2,c
  2973  0074C6  6A1D               	clrf	flashSetAddress@upperAddr+3,c
  2974                           
  2975                           ;FlashProg.c: 126: writeICSP(0x0, 0x0e00|upperAddr);
  2976  0074C8  0E00               	movlw	0
  2977  0074CA  6E0F               	movwf	writeICSP@commandByte+1,c
  2978  0074CC  0E00               	movlw	0
  2979  0074CE  6E0E               	movwf	writeICSP@commandByte,c
  2980  0074D0  0E00               	movlw	0
  2981  0074D2  101A               	iorwf	flashSetAddress@upperAddr,w,c
  2982  0074D4  6E10               	movwf	writeICSP@dataBytes,c
  2983  0074D6  0E0E               	movlw	14
  2984  0074D8  101B               	iorwf	flashSetAddress@upperAddr+1,w,c
  2985  0074DA  6E11               	movwf	writeICSP@dataBytes+1,c
  2986  0074DC  EC04  F038         	call	_writeICSP	;wreg free
  2987                           
  2988                           ;FlashProg.c: 127: writeICSP(0x0, 0x6ef8);
  2989  0074E0  0E00               	movlw	0
  2990  0074E2  6E0F               	movwf	writeICSP@commandByte+1,c
  2991  0074E4  0E00               	movlw	0
  2992  0074E6  6E0E               	movwf	writeICSP@commandByte,c
  2993  0074E8  0E6E               	movlw	110
  2994  0074EA  6E11               	movwf	writeICSP@dataBytes+1,c
  2995  0074EC  0EF8               	movlw	248
  2996  0074EE  6E10               	movwf	writeICSP@dataBytes,c
  2997  0074F0  EC04  F038         	call	_writeICSP	;wreg free
  2998                           
  2999                           ;FlashProg.c: 128: writeICSP(0x0, 0x0e00|highAddr);
  3000  0074F4  0E00               	movlw	0
  3001  0074F6  6E0F               	movwf	writeICSP@commandByte+1,c
  3002  0074F8  0E00               	movlw	0
  3003  0074FA  6E0E               	movwf	writeICSP@commandByte,c
  3004  0074FC  0E00               	movlw	0
  3005  0074FE  101E               	iorwf	flashSetAddress@highAddr,w,c
  3006  007500  6E10               	movwf	writeICSP@dataBytes,c
  3007  007502  0E0E               	movlw	14
  3008  007504  101F               	iorwf	flashSetAddress@highAddr+1,w,c
  3009  007506  6E11               	movwf	writeICSP@dataBytes+1,c
  3010  007508  EC04  F038         	call	_writeICSP	;wreg free
  3011                           
  3012                           ;FlashProg.c: 129: writeICSP(0x0, 0x6ef7);
  3013  00750C  0E00               	movlw	0
  3014  00750E  6E0F               	movwf	writeICSP@commandByte+1,c
  3015  007510  0E00               	movlw	0
  3016  007512  6E0E               	movwf	writeICSP@commandByte,c
  3017  007514  0E6E               	movlw	110
  3018  007516  6E11               	movwf	writeICSP@dataBytes+1,c
  3019  007518  0EF7               	movlw	247
  3020  00751A  6E10               	movwf	writeICSP@dataBytes,c
  3021  00751C  EC04  F038         	call	_writeICSP	;wreg free
  3022                           
  3023                           ;FlashProg.c: 130: writeICSP(0x0, 0x0e00|lowAddr);
  3024  007520  0E00               	movlw	0
  3025  007522  6E0F               	movwf	writeICSP@commandByte+1,c
  3026  007524  0E00               	movlw	0
  3027  007526  6E0E               	movwf	writeICSP@commandByte,c
  3028  007528  0E00               	movlw	0
  3029  00752A  1022               	iorwf	flashSetAddress@lowAddr,w,c
  3030  00752C  6E10               	movwf	writeICSP@dataBytes,c
  3031  00752E  0E0E               	movlw	14
  3032  007530  1023               	iorwf	flashSetAddress@lowAddr+1,w,c
  3033  007532  6E11               	movwf	writeICSP@dataBytes+1,c
  3034  007534  EC04  F038         	call	_writeICSP	;wreg free
  3035                           
  3036                           ;FlashProg.c: 131: writeICSP(0x0, 0x6ef6);
  3037  007538  0E00               	movlw	0
  3038  00753A  6E0F               	movwf	writeICSP@commandByte+1,c
  3039  00753C  0E00               	movlw	0
  3040  00753E  6E0E               	movwf	writeICSP@commandByte,c
  3041  007540  0E6E               	movlw	110
  3042  007542  6E11               	movwf	writeICSP@dataBytes+1,c
  3043  007544  0EF6               	movlw	246
  3044  007546  6E10               	movwf	writeICSP@dataBytes,c
  3045  007548  EC04  F038         	call	_writeICSP	;wreg free
  3046  00754C  0012               	return	
  3047  00754E                     __end_of_flashSetAddress:
  3048                           	opt stack 0
  3049                           prodl	equ	0xFF3
  3050                           postinc0	equ	0xFEE
  3051                           wreg	equ	0xFE8
  3052                           postinc1	equ	0xFE6
  3053                           postdec1	equ	0xFE5
  3054                           fsr1h	equ	0xFE2
  3055                           fsr1l	equ	0xFE1
  3056                           postinc2	equ	0xFDE
  3057                           postdec2	equ	0xFDD
  3058                           fsr2h	equ	0xFDA
  3059                           fsr2l	equ	0xFD9
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function _flashRead16Bits *****************
  3063 ;; Defined at:
  3064 ;;		line 169 in file "../src/PIC18/FlashProg.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;  data            2   22[COMRAM] unsigned int 
  3069 ;;  firstData       2   20[COMRAM] unsigned int 
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  2   18[COMRAM] unsigned int 
  3072 ;; Registers used:
  3073 ;;		wreg, status,2, status,0, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3079 ;;      Params:         2       0       0       0       0       0       0
  3080 ;;      Locals:         4       0       0       0       0       0       0
  3081 ;;      Temps:          0       0       0       0       0       0       0
  3082 ;;      Totals:         6       0       0       0       0       0       0
  3083 ;;Total ram usage:        6 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    4
  3086 ;; This function calls:
  3087 ;;		_readFirstByte
  3088 ;;		_readICSP
  3089 ;; This function is called by:
  3090 ;;		_flashReadBlock
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text11
  3095  00705C                     __ptext11:
  3096                           	opt stack 0
  3097  00705C                     _flashRead16Bits:
  3098                           	opt stack 24
  3099                           
  3100                           ;FlashProg.c: 170: uint16 data;
  3101                           ;FlashProg.c: 171: uint16 firstData;
  3102                           ;FlashProg.c: 173: data = readICSP();
  3103                           
  3104                           ;incstack = 0
  3105  00705C  EC67  F038         	call	_readICSP	;wreg free
  3106  007060  C00F  F017         	movff	?_readICSP,flashRead16Bits@data
  3107  007064  C010  F018         	movff	?_readICSP+1,flashRead16Bits@data+1
  3108                           
  3109                           ;FlashProg.c: 174: firstData = readFirstByte();
  3110  007068  EC8A  F038         	call	_readFirstByte	;wreg free
  3111  00706C  C00F  F015         	movff	?_readFirstByte,flashRead16Bits@firstData
  3112  007070  C010  F016         	movff	?_readFirstByte+1,flashRead16Bits@firstData+1
  3113                           
  3114                           ;FlashProg.c: 176: data = firstData|data;
  3115  007074  5017               	movf	flashRead16Bits@data,w,c
  3116  007076  1015               	iorwf	flashRead16Bits@firstData,w,c
  3117  007078  6E17               	movwf	flashRead16Bits@data,c
  3118  00707A  5018               	movf	flashRead16Bits@data+1,w,c
  3119  00707C  1016               	iorwf	flashRead16Bits@firstData+1,w,c
  3120  00707E  6E18               	movwf	flashRead16Bits@data+1,c
  3121                           
  3122                           ;FlashProg.c: 178: return data;
  3123  007080  C017  F013         	movff	flashRead16Bits@data,?_flashRead16Bits
  3124  007084  C018  F014         	movff	flashRead16Bits@data+1,?_flashRead16Bits+1
  3125  007088  0012               	return	
  3126  00708A                     __end_of_flashRead16Bits:
  3127                           	opt stack 0
  3128                           prodl	equ	0xFF3
  3129                           postinc0	equ	0xFEE
  3130                           wreg	equ	0xFE8
  3131                           postinc1	equ	0xFE6
  3132                           postdec1	equ	0xFE5
  3133                           fsr1h	equ	0xFE2
  3134                           fsr1l	equ	0xFE1
  3135                           postinc2	equ	0xFDE
  3136                           postdec2	equ	0xFDD
  3137                           fsr2h	equ	0xFDA
  3138                           fsr2l	equ	0xFD9
  3139                           status	equ	0xFD8
  3140                           
  3141 ;; *************** function _readICSP *****************
  3142 ;; Defined at:
  3143 ;;		line 25 in file "../src/PIC18/ICSP.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;		None
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;  data            2   16[COMRAM] unsigned int 
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  2   14[COMRAM] unsigned int 
  3150 ;; Registers used:
  3151 ;;		wreg, status,2, status,0, cstack
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3157 ;;      Params:         2       0       0       0       0       0       0
  3158 ;;      Locals:         2       0       0       0       0       0       0
  3159 ;;      Temps:          0       0       0       0       0       0       0
  3160 ;;      Totals:         4       0       0       0       0       0       0
  3161 ;;Total ram usage:        4 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    3
  3164 ;; This function calls:
  3165 ;;		_readBits
  3166 ;;		_writeBits
  3167 ;; This function is called by:
  3168 ;;		_flashRead16Bits
  3169 ;;		_readDeviceID1
  3170 ;;		_readDeviceID2
  3171 ;;		_flashRead8Bits
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text12
  3176  0070CE                     __ptext12:
  3177                           	opt stack 0
  3178  0070CE                     _readICSP:
  3179                           	opt stack 24
  3180                           
  3181                           ;ICSP.c: 26: uint16 data;
  3182                           ;ICSP.c: 27: writeBits(9, 4);
  3183                           
  3184                           ;incstack = 0
  3185  0070CE  0E00               	movlw	0
  3186  0070D0  6E06               	movwf	writeBits@pattern+1,c
  3187  0070D2  0E09               	movlw	9
  3188  0070D4  6E05               	movwf	writeBits@pattern,c
  3189  0070D6  0E00               	movlw	0
  3190  0070D8  6E08               	movwf	writeBits@bitsToWrite+1,c
  3191  0070DA  0E04               	movlw	4
  3192  0070DC  6E07               	movwf	writeBits@bitsToWrite,c
  3193  0070DE  EC45  F038         	call	_writeBits	;wreg free
  3194                           
  3195                           ;ICSP.c: 28: writeBits(0, 8);
  3196  0070E2  0E00               	movlw	0
  3197  0070E4  6E06               	movwf	writeBits@pattern+1,c
  3198  0070E6  0E00               	movlw	0
  3199  0070E8  6E05               	movwf	writeBits@pattern,c
  3200  0070EA  0E00               	movlw	0
  3201  0070EC  6E08               	movwf	writeBits@bitsToWrite+1,c
  3202  0070EE  0E08               	movlw	8
  3203  0070F0  6E07               	movwf	writeBits@bitsToWrite,c
  3204  0070F2  EC45  F038         	call	_writeBits	;wreg free
  3205                           
  3206                           ;ICSP.c: 29: data = readBits(8);
  3207  0070F6  0E00               	movlw	0
  3208  0070F8  6E09               	movwf	readBits@bitsToRead+1,c
  3209  0070FA  0E08               	movlw	8
  3210  0070FC  6E08               	movwf	readBits@bitsToRead,c
  3211  0070FE  ECB0  F038         	call	_readBits	;wreg free
  3212  007102  C008  F011         	movff	?_readBits,readICSP@data
  3213  007106  C009  F012         	movff	?_readBits+1,readICSP@data+1
  3214                           
  3215                           ;ICSP.c: 31: return data;
  3216  00710A  C011  F00F         	movff	readICSP@data,?_readICSP
  3217  00710E  C012  F010         	movff	readICSP@data+1,?_readICSP+1
  3218  007112  0012               	return	
  3219  007114                     __end_of_readICSP:
  3220                           	opt stack 0
  3221                           prodl	equ	0xFF3
  3222                           postinc0	equ	0xFEE
  3223                           wreg	equ	0xFE8
  3224                           postinc1	equ	0xFE6
  3225                           postdec1	equ	0xFE5
  3226                           fsr1h	equ	0xFE2
  3227                           fsr1l	equ	0xFE1
  3228                           postinc2	equ	0xFDE
  3229                           postdec2	equ	0xFDD
  3230                           fsr2h	equ	0xFDA
  3231                           fsr2l	equ	0xFD9
  3232                           status	equ	0xFD8
  3233                           
  3234 ;; *************** function _readFirstByte *****************
  3235 ;; Defined at:
  3236 ;;		line 34 in file "../src/PIC18/ICSP.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;  data            2   16[COMRAM] unsigned int 
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  2   14[COMRAM] unsigned int 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0, cstack
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3250 ;;      Params:         2       0       0       0       0       0       0
  3251 ;;      Locals:         2       0       0       0       0       0       0
  3252 ;;      Temps:          0       0       0       0       0       0       0
  3253 ;;      Totals:         4       0       0       0       0       0       0
  3254 ;;Total ram usage:        4 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    3
  3257 ;; This function calls:
  3258 ;;		_readBits
  3259 ;;		_writeBits
  3260 ;; This function is called by:
  3261 ;;		_flashRead16Bits
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text13
  3266  007114                     __ptext13:
  3267                           	opt stack 0
  3268  007114                     _readFirstByte:
  3269                           	opt stack 24
  3270                           
  3271                           ;ICSP.c: 35: uint16 data;
  3272                           ;ICSP.c: 36: writeBits(9, 4);
  3273                           
  3274                           ;incstack = 0
  3275  007114  0E00               	movlw	0
  3276  007116  6E06               	movwf	writeBits@pattern+1,c
  3277  007118  0E09               	movlw	9
  3278  00711A  6E05               	movwf	writeBits@pattern,c
  3279  00711C  0E00               	movlw	0
  3280  00711E  6E08               	movwf	writeBits@bitsToWrite+1,c
  3281  007120  0E04               	movlw	4
  3282  007122  6E07               	movwf	writeBits@bitsToWrite,c
  3283  007124  EC45  F038         	call	_writeBits	;wreg free
  3284                           
  3285                           ;ICSP.c: 37: writeBits(0, 8);
  3286  007128  0E00               	movlw	0
  3287  00712A  6E06               	movwf	writeBits@pattern+1,c
  3288  00712C  0E00               	movlw	0
  3289  00712E  6E05               	movwf	writeBits@pattern,c
  3290  007130  0E00               	movlw	0
  3291  007132  6E08               	movwf	writeBits@bitsToWrite+1,c
  3292  007134  0E08               	movlw	8
  3293  007136  6E07               	movwf	writeBits@bitsToWrite,c
  3294  007138  EC45  F038         	call	_writeBits	;wreg free
  3295                           
  3296                           ;ICSP.c: 38: data = readBits(8);
  3297  00713C  0E00               	movlw	0
  3298  00713E  6E09               	movwf	readBits@bitsToRead+1,c
  3299  007140  0E08               	movlw	8
  3300  007142  6E08               	movwf	readBits@bitsToRead,c
  3301  007144  ECB0  F038         	call	_readBits	;wreg free
  3302  007148  C008  F011         	movff	?_readBits,readFirstByte@data
  3303  00714C  C009  F012         	movff	?_readBits+1,readFirstByte@data+1
  3304                           
  3305                           ;ICSP.c: 39: data = data<<8;
  3306  007150  5011               	movf	readFirstByte@data,w,c
  3307  007152  6E12               	movwf	readFirstByte@data+1,c
  3308  007154  6A11               	clrf	readFirstByte@data,c
  3309                           
  3310                           ;ICSP.c: 40: return data;
  3311  007156  C011  F00F         	movff	readFirstByte@data,?_readFirstByte
  3312  00715A  C012  F010         	movff	readFirstByte@data+1,?_readFirstByte+1
  3313  00715E  0012               	return	
  3314  007160                     __end_of_readFirstByte:
  3315                           	opt stack 0
  3316                           prodl	equ	0xFF3
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           postinc1	equ	0xFE6
  3320                           postdec1	equ	0xFE5
  3321                           fsr1h	equ	0xFE2
  3322                           fsr1l	equ	0xFE1
  3323                           postinc2	equ	0xFDE
  3324                           postdec2	equ	0xFDD
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           
  3329 ;; *************** function _readBits *****************
  3330 ;; Defined at:
  3331 ;;		line 52 in file "../src/PIC18/ICSP.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  bitsToRead      2    7[COMRAM] int 
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;  data            2   12[COMRAM] unsigned int 
  3336 ;;  i               2   10[COMRAM] int 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  2    7[COMRAM] unsigned int 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3346 ;;      Params:         2       0       0       0       0       0       0
  3347 ;;      Locals:         4       0       0       0       0       0       0
  3348 ;;      Temps:          1       0       0       0       0       0       0
  3349 ;;      Totals:         7       0       0       0       0       0       0
  3350 ;;Total ram usage:        7 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    2
  3353 ;; This function calls:
  3354 ;;		_readBit
  3355 ;; This function is called by:
  3356 ;;		_readICSP
  3357 ;;		_readFirstByte
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text14
  3362  007160                     __ptext14:
  3363                           	opt stack 0
  3364  007160                     _readBits:
  3365                           	opt stack 24
  3366                           
  3367                           ;ICSP.c: 53: int i=0;
  3368                           
  3369                           ;incstack = 0
  3370  007160  0E00               	movlw	0
  3371  007162  6E0C               	movwf	readBits@i+1,c
  3372  007164  0E00               	movlw	0
  3373  007166  6E0B               	movwf	readBits@i,c
  3374                           
  3375                           ;ICSP.c: 54: uint16 data = 0;
  3376  007168  0E00               	movlw	0
  3377  00716A  6E0E               	movwf	readBits@data+1,c
  3378  00716C  0E00               	movlw	0
  3379  00716E  6E0D               	movwf	readBits@data,c
  3380                           
  3381                           ;ICSP.c: 56: (TRISDbits.TRISD4 = 1);
  3382  007170  8895               	bsf	3989,4,c	;volatile
  3383                           
  3384                           ;ICSP.c: 58: while(i < bitsToRead){
  3385  007172  D013               	goto	l1412
  3386  007174                     l1408:
  3387                           
  3388                           ;ICSP.c: 59: data = (readBit()<< i)|data;
  3389  007174  C00B  F00A         	movff	readBits@i,??_readBits
  3390  007178  ECE6  F037         	call	_readBit	;wreg free
  3391  00717C  2A0A               	incf	??_readBits,f,c
  3392  00717E  D003               	goto	u674
  3393  007180                     u675:
  3394  007180  90D8               	bcf	status,0,c
  3395  007182  3604               	rlcf	?_readBit,f,c
  3396  007184  3605               	rlcf	?_readBit+1,f,c
  3397  007186                     u674:
  3398  007186  2E0A               	decfsz	??_readBits,f,c
  3399  007188  D7FB               	goto	u675
  3400  00718A  500D               	movf	readBits@data,w,c
  3401  00718C  1004               	iorwf	?_readBit,w,c
  3402  00718E  6E0D               	movwf	readBits@data,c
  3403  007190  500E               	movf	readBits@data+1,w,c
  3404  007192  1005               	iorwf	?_readBit+1,w,c
  3405  007194  6E0E               	movwf	readBits@data+1,c
  3406                           
  3407                           ;ICSP.c: 60: i++;
  3408  007196  4A0B               	infsnz	readBits@i,f,c
  3409  007198  2A0C               	incf	readBits@i+1,f,c
  3410  00719A                     l1412:
  3411  00719A  500C               	movf	readBits@i+1,w,c
  3412  00719C  0A80               	xorlw	128
  3413  00719E  6E0A               	movwf	??_readBits& (0+255),c
  3414  0071A0  5008               	movf	readBits@bitsToRead,w,c
  3415  0071A2  5C0B               	subwf	readBits@i,w,c
  3416  0071A4  5009               	movf	readBits@bitsToRead+1,w,c
  3417  0071A6  0A80               	xorlw	128
  3418  0071A8  580A               	subwfb	??_readBits& (0+255),w,c
  3419  0071AA  A0D8               	btfss	status,0,c
  3420  0071AC  D7E3               	goto	l1408
  3421                           
  3422                           ;ICSP.c: 61: }
  3423                           ;ICSP.c: 62: return data;
  3424  0071AE  C00D  F008         	movff	readBits@data,?_readBits
  3425  0071B2  C00E  F009         	movff	readBits@data+1,?_readBits+1
  3426  0071B6  0012               	return	
  3427  0071B8                     __end_of_readBits:
  3428                           	opt stack 0
  3429                           prodl	equ	0xFF3
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           postinc1	equ	0xFE6
  3433                           postdec1	equ	0xFE5
  3434                           fsr1h	equ	0xFE2
  3435                           fsr1l	equ	0xFE1
  3436                           postinc2	equ	0xFDE
  3437                           postdec2	equ	0xFDD
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           
  3442 ;; *************** function _readBit *****************
  3443 ;; Defined at:
  3444 ;;		line 44 in file "../src/PIC18/ICSP.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;		None
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  data            2    5[COMRAM] unsigned int 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  2    3[COMRAM] unsigned int 
  3451 ;; Registers used:
  3452 ;;		wreg, status,2, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3458 ;;      Params:         2       0       0       0       0       0       0
  3459 ;;      Locals:         2       0       0       0       0       0       0
  3460 ;;      Temps:          0       0       0       0       0       0       0
  3461 ;;      Totals:         4       0       0       0       0       0       0
  3462 ;;Total ram usage:        4 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    1
  3465 ;; This function calls:
  3466 ;;		_PGC_high
  3467 ;;		_PGC_low
  3468 ;;		_readPGD
  3469 ;; This function is called by:
  3470 ;;		_readBits
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text15
  3475  006FCC                     __ptext15:
  3476                           	opt stack 0
  3477  006FCC                     _readBit:
  3478                           	opt stack 24
  3479                           
  3480                           ;ICSP.c: 45: uint16 data;
  3481                           ;ICSP.c: 46: PGC_high();
  3482                           
  3483                           ;incstack = 0
  3484  006FCC  EC8D  F037         	call	_PGC_high	;wreg free
  3485                           
  3486                           ;ICSP.c: 47: data = readPGD();
  3487  006FD0  ECBB  F037         	call	_readPGD	;wreg free
  3488  006FD4  C001  F006         	movff	?_readPGD,readBit@data
  3489  006FD8  C002  F007         	movff	?_readPGD+1,readBit@data+1
  3490                           
  3491                           ;ICSP.c: 48: PGC_low();
  3492  006FDC  EC8F  F037         	call	_PGC_low	;wreg free
  3493                           
  3494                           ;ICSP.c: 49: return data;
  3495  006FE0  C006  F004         	movff	readBit@data,?_readBit
  3496  006FE4  C007  F005         	movff	readBit@data+1,?_readBit+1
  3497  006FE8  0012               	return	
  3498  006FEA                     __end_of_readBit:
  3499                           	opt stack 0
  3500                           prodl	equ	0xFF3
  3501                           postinc0	equ	0xFEE
  3502                           wreg	equ	0xFE8
  3503                           postinc1	equ	0xFE6
  3504                           postdec1	equ	0xFE5
  3505                           fsr1h	equ	0xFE2
  3506                           fsr1l	equ	0xFE1
  3507                           postinc2	equ	0xFDE
  3508                           postdec2	equ	0xFDD
  3509                           fsr2h	equ	0xFDA
  3510                           fsr2l	equ	0xFD9
  3511                           status	equ	0xFD8
  3512                           
  3513 ;; *************** function _readPGD *****************
  3514 ;; Defined at:
  3515 ;;		line 6 in file "../src/PIC18/FlashProg.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;		None
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;		None
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  2    0[COMRAM] unsigned int 
  3522 ;; Registers used:
  3523 ;;		wreg, status,2
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3529 ;;      Params:         2       0       0       0       0       0       0
  3530 ;;      Locals:         0       0       0       0       0       0       0
  3531 ;;      Temps:          1       0       0       0       0       0       0
  3532 ;;      Totals:         3       0       0       0       0       0       0
  3533 ;;Total ram usage:        3 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; This function calls:
  3536 ;;		Nothing
  3537 ;; This function is called by:
  3538 ;;		_readBit
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text16
  3543  006F76                     __ptext16:
  3544                           	opt stack 0
  3545  006F76                     _readPGD:
  3546                           	opt stack 24
  3547                           
  3548                           ;FlashProg.c: 7: return PORTDbits.RD4;
  3549                           
  3550                           ;incstack = 0
  3551  006F76  A883               	btfss	3971,4,c	;volatile
  3552  006F78  D003               	goto	u630
  3553  006F7A  6A03               	clrf	??_readPGD& (0+255),c
  3554  006F7C  2A03               	incf	??_readPGD& (0+255),f,c
  3555  006F7E  D001               	goto	u638
  3556  006F80                     u630:
  3557  006F80  6A03               	clrf	??_readPGD& (0+255),c
  3558  006F82                     u638:
  3559  006F82  5003               	movf	??_readPGD,w,c
  3560  006F84  6E01               	movwf	?_readPGD,c
  3561  006F86  6A02               	clrf	?_readPGD+1,c
  3562  006F88  0012               	return	
  3563  006F8A                     __end_of_readPGD:
  3564                           	opt stack 0
  3565                           prodl	equ	0xFF3
  3566                           postinc0	equ	0xFEE
  3567                           wreg	equ	0xFE8
  3568                           postinc1	equ	0xFE6
  3569                           postdec1	equ	0xFE5
  3570                           fsr1h	equ	0xFE2
  3571                           fsr1l	equ	0xFE1
  3572                           postinc2	equ	0xFDE
  3573                           postdec2	equ	0xFDD
  3574                           fsr2h	equ	0xFDA
  3575                           fsr2l	equ	0xFD9
  3576                           status	equ	0xFD8
  3577                           
  3578 ;; *************** function _exit_HVP *****************
  3579 ;; Defined at:
  3580 ;;		line 57 in file "../src/PIC18/FlashProg.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;		None               void
  3587 ;; Registers used:
  3588 ;;		wreg, status,2, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3594 ;;      Params:         0       0       0       0       0       0       0
  3595 ;;      Locals:         0       0       0       0       0       0       0
  3596 ;;      Temps:          0       0       0       0       0       0       0
  3597 ;;      Totals:         0       0       0       0       0       0       0
  3598 ;;Total ram usage:        0 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    2
  3601 ;; This function calls:
  3602 ;;		_MCLR_low
  3603 ;;		_PGC_low
  3604 ;;		_PGD_low
  3605 ;;		_PGM_low
  3606 ;; This function is called by:
  3607 ;;		_main
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text17
  3612  006F64                     __ptext17:
  3613                           	opt stack 0
  3614  006F64                     _exit_HVP:
  3615                           	opt stack 28
  3616                           
  3617                           ;FlashProg.c: 58: PGC_low();
  3618                           
  3619                           ;incstack = 0
  3620  006F64  EC8F  F037         	call	_PGC_low	;wreg free
  3621                           
  3622                           ;FlashProg.c: 59: PGD_low();
  3623  006F68  ECA2  F037         	call	_PGD_low	;wreg free
  3624                           
  3625                           ;FlashProg.c: 60: PGM_low();
  3626  006F6C  EC95  F037         	call	_PGM_low	;wreg free
  3627                           
  3628                           ;FlashProg.c: 61: MCLR_low();
  3629  006F70  ECA9  F037         	call	_MCLR_low	;wreg free
  3630  006F74  0012               	return	
  3631  006F76                     __end_of_exit_HVP:
  3632                           	opt stack 0
  3633                           prodl	equ	0xFF3
  3634                           postinc0	equ	0xFEE
  3635                           wreg	equ	0xFE8
  3636                           postinc1	equ	0xFE6
  3637                           postdec1	equ	0xFE5
  3638                           fsr1h	equ	0xFE2
  3639                           fsr1l	equ	0xFE1
  3640                           postinc2	equ	0xFDE
  3641                           postdec2	equ	0xFDD
  3642                           fsr2h	equ	0xFDA
  3643                           fsr2l	equ	0xFD9
  3644                           status	equ	0xFD8
  3645                           
  3646 ;; *************** function _PGM_low *****************
  3647 ;; Defined at:
  3648 ;;		line 30 in file "../src/PIC18/FlashProg.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;		None
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;		None
  3653 ;; Return value:  Size  Location     Type
  3654 ;;		None               void
  3655 ;; Registers used:
  3656 ;;		None
  3657 ;; Tracked objects:
  3658 ;;		On entry : 0/0
  3659 ;;		On exit  : 0/0
  3660 ;;		Unchanged: 0/0
  3661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3662 ;;      Params:         0       0       0       0       0       0       0
  3663 ;;      Locals:         0       0       0       0       0       0       0
  3664 ;;      Temps:          0       0       0       0       0       0       0
  3665 ;;      Totals:         0       0       0       0       0       0       0
  3666 ;;Total ram usage:        0 bytes
  3667 ;; Hardware stack levels used:    1
  3668 ;; This function calls:
  3669 ;;		Nothing
  3670 ;; This function is called by:
  3671 ;;		_exit_HVP
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           	psect	text18
  3676  006F2A                     __ptext18:
  3677                           	opt stack 0
  3678  006F2A                     _PGM_low:
  3679                           	opt stack 29
  3680                           
  3681                           ;FlashProg.c: 31: PORTDbits.RD6 = 0;
  3682                           
  3683                           ;incstack = 0
  3684  006F2A  9C83               	bcf	3971,6,c	;volatile
  3685  006F2C  0012               	return	
  3686  006F2E                     __end_of_PGM_low:
  3687                           	opt stack 0
  3688                           prodl	equ	0xFF3
  3689                           postinc0	equ	0xFEE
  3690                           wreg	equ	0xFE8
  3691                           postinc1	equ	0xFE6
  3692                           postdec1	equ	0xFE5
  3693                           fsr1h	equ	0xFE2
  3694                           fsr1l	equ	0xFE1
  3695                           postinc2	equ	0xFDE
  3696                           postdec2	equ	0xFDD
  3697                           fsr2h	equ	0xFDA
  3698                           fsr2l	equ	0xFD9
  3699                           status	equ	0xFD8
  3700                           
  3701 ;; *************** function _enter_HVP *****************
  3702 ;; Defined at:
  3703 ;;		line 49 in file "../src/PIC18/FlashProg.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;		None
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;		None
  3708 ;; Return value:  Size  Location     Type
  3709 ;;		None               void
  3710 ;; Registers used:
  3711 ;;		wreg, status,2, cstack
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3717 ;;      Params:         0       0       0       0       0       0       0
  3718 ;;      Locals:         0       0       0       0       0       0       0
  3719 ;;      Temps:          0       0       0       0       0       0       0
  3720 ;;      Totals:         0       0       0       0       0       0       0
  3721 ;;Total ram usage:        0 bytes
  3722 ;; Hardware stack levels used:    1
  3723 ;; Hardware stack levels required when called:    2
  3724 ;; This function calls:
  3725 ;;		_MCLR_high
  3726 ;;		_MCLR_low
  3727 ;;		_PGC_low
  3728 ;;		_PGD_low
  3729 ;;		_PGM_high
  3730 ;; This function is called by:
  3731 ;;		_main
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           	psect	text19
  3736  006FA0                     __ptext19:
  3737                           	opt stack 0
  3738  006FA0                     _enter_HVP:
  3739                           	opt stack 28
  3740                           
  3741                           ;FlashProg.c: 50: MCLR_low();
  3742                           
  3743                           ;incstack = 0
  3744  006FA0  ECA9  F037         	call	_MCLR_low	;wreg free
  3745                           
  3746                           ;FlashProg.c: 51: PGC_low();
  3747  006FA4  EC8F  F037         	call	_PGC_low	;wreg free
  3748                           
  3749                           ;FlashProg.c: 52: PGD_low();
  3750  006FA8  ECA2  F037         	call	_PGD_low	;wreg free
  3751                           
  3752                           ;FlashProg.c: 53: PGM_high();
  3753  006FAC  EC93  F037         	call	_PGM_high	;wreg free
  3754                           
  3755                           ;FlashProg.c: 54: MCLR_high();
  3756  006FB0  EC91  F037         	call	_MCLR_high	;wreg free
  3757  006FB4  0012               	return	
  3758  006FB6                     __end_of_enter_HVP:
  3759                           	opt stack 0
  3760                           prodl	equ	0xFF3
  3761                           postinc0	equ	0xFEE
  3762                           wreg	equ	0xFE8
  3763                           postinc1	equ	0xFE6
  3764                           postdec1	equ	0xFE5
  3765                           fsr1h	equ	0xFE2
  3766                           fsr1l	equ	0xFE1
  3767                           postinc2	equ	0xFDE
  3768                           postdec2	equ	0xFDD
  3769                           fsr2h	equ	0xFDA
  3770                           fsr2l	equ	0xFD9
  3771                           status	equ	0xFD8
  3772                           
  3773 ;; *************** function _PGM_high *****************
  3774 ;; Defined at:
  3775 ;;		line 34 in file "../src/PIC18/FlashProg.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;		None
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;		None
  3780 ;; Return value:  Size  Location     Type
  3781 ;;		None               void
  3782 ;; Registers used:
  3783 ;;		None
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3789 ;;      Params:         0       0       0       0       0       0       0
  3790 ;;      Locals:         0       0       0       0       0       0       0
  3791 ;;      Temps:          0       0       0       0       0       0       0
  3792 ;;      Totals:         0       0       0       0       0       0       0
  3793 ;;Total ram usage:        0 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_enter_HVP
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text20
  3803  006F26                     __ptext20:
  3804                           	opt stack 0
  3805  006F26                     _PGM_high:
  3806                           	opt stack 29
  3807                           
  3808                           ;FlashProg.c: 35: PORTDbits.RD6 = 1;
  3809                           
  3810                           ;incstack = 0
  3811  006F26  8C83               	bsf	3971,6,c	;volatile
  3812  006F28  0012               	return	
  3813  006F2A                     __end_of_PGM_high:
  3814                           	opt stack 0
  3815                           prodl	equ	0xFF3
  3816                           postinc0	equ	0xFEE
  3817                           wreg	equ	0xFE8
  3818                           postinc1	equ	0xFE6
  3819                           postdec1	equ	0xFE5
  3820                           fsr1h	equ	0xFE2
  3821                           fsr1l	equ	0xFE1
  3822                           postinc2	equ	0xFDE
  3823                           postdec2	equ	0xFDD
  3824                           fsr2h	equ	0xFDA
  3825                           fsr2l	equ	0xFD9
  3826                           status	equ	0xFD8
  3827                           
  3828 ;; *************** function _PGD_low *****************
  3829 ;; Defined at:
  3830 ;;		line 18 in file "../src/PIC18/FlashProg.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;		None
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;		None
  3835 ;; Return value:  Size  Location     Type
  3836 ;;		None               void
  3837 ;; Registers used:
  3838 ;;		wreg, status,2, cstack
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3844 ;;      Params:         0       0       0       0       0       0       0
  3845 ;;      Locals:         0       0       0       0       0       0       0
  3846 ;;      Temps:          0       0       0       0       0       0       0
  3847 ;;      Totals:         0       0       0       0       0       0       0
  3848 ;;Total ram usage:        0 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:    1
  3851 ;; This function calls:
  3852 ;;		_writePGD
  3853 ;; This function is called by:
  3854 ;;		_enter_HVP
  3855 ;;		_exit_HVP
  3856 ;;		_flashWriteAndProgram
  3857 ;;		_rowErase
  3858 ;;		_flashWrite8Bits
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           	psect	text21
  3863  006F44                     __ptext21:
  3864                           	opt stack 0
  3865  006F44                     _PGD_low:
  3866                           	opt stack 27
  3867                           
  3868                           ;FlashProg.c: 19: writePGD(0);
  3869                           
  3870                           ;incstack = 0
  3871  006F44  0E00               	movlw	0
  3872  006F46  6E02               	movwf	writePGD@data+1,c
  3873  006F48  0E00               	movlw	0
  3874  006F4A  6E01               	movwf	writePGD@data,c
  3875  006F4C  EC9C  F037         	call	_writePGD	;wreg free
  3876  006F50  0012               	return	
  3877  006F52                     __end_of_PGD_low:
  3878                           	opt stack 0
  3879                           prodl	equ	0xFF3
  3880                           postinc0	equ	0xFEE
  3881                           wreg	equ	0xFE8
  3882                           postinc1	equ	0xFE6
  3883                           postdec1	equ	0xFE5
  3884                           fsr1h	equ	0xFE2
  3885                           fsr1l	equ	0xFE1
  3886                           postinc2	equ	0xFDE
  3887                           postdec2	equ	0xFDD
  3888                           fsr2h	equ	0xFDA
  3889                           fsr2l	equ	0xFD9
  3890                           status	equ	0xFD8
  3891                           
  3892 ;; *************** function _MCLR_low *****************
  3893 ;; Defined at:
  3894 ;;		line 38 in file "../src/PIC18/FlashProg.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;		None
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;		None
  3899 ;; Return value:  Size  Location     Type
  3900 ;;		None               void
  3901 ;; Registers used:
  3902 ;;		wreg, status,2, cstack
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3908 ;;      Params:         0       0       0       0       0       0       0
  3909 ;;      Locals:         0       0       0       0       0       0       0
  3910 ;;      Temps:          0       0       0       0       0       0       0
  3911 ;;      Totals:         0       0       0       0       0       0       0
  3912 ;;Total ram usage:        0 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    1
  3915 ;; This function calls:
  3916 ;;		_writePGD
  3917 ;; This function is called by:
  3918 ;;		_enter_HVP
  3919 ;;		_exit_HVP
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           	psect	text22
  3924  006F52                     __ptext22:
  3925                           	opt stack 0
  3926  006F52                     _MCLR_low:
  3927                           	opt stack 28
  3928                           
  3929                           ;FlashProg.c: 39: PORTDbits.RD7 = 0;
  3930                           
  3931                           ;incstack = 0
  3932  006F52  9E83               	bcf	3971,7,c	;volatile
  3933                           
  3934                           ;FlashProg.c: 41: writePGD(0);
  3935  006F54  0E00               	movlw	0
  3936  006F56  6E02               	movwf	writePGD@data+1,c
  3937  006F58  0E00               	movlw	0
  3938  006F5A  6E01               	movwf	writePGD@data,c
  3939  006F5C  EC9C  F037         	call	_writePGD	;wreg free
  3940                           
  3941                           ;FlashProg.c: 42: PORTDbits.RD5 = 0;
  3942  006F60  9A83               	bcf	3971,5,c	;volatile
  3943  006F62  0012               	return	
  3944  006F64                     __end_of_MCLR_low:
  3945                           	opt stack 0
  3946                           prodl	equ	0xFF3
  3947                           postinc0	equ	0xFEE
  3948                           wreg	equ	0xFE8
  3949                           postinc1	equ	0xFE6
  3950                           postdec1	equ	0xFE5
  3951                           fsr1h	equ	0xFE2
  3952                           fsr1l	equ	0xFE1
  3953                           postinc2	equ	0xFDE
  3954                           postdec2	equ	0xFDD
  3955                           fsr2h	equ	0xFDA
  3956                           fsr2l	equ	0xFD9
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function _MCLR_high *****************
  3960 ;; Defined at:
  3961 ;;		line 45 in file "../src/PIC18/FlashProg.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;		None
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;		None
  3966 ;; Return value:  Size  Location     Type
  3967 ;;		None               void
  3968 ;; Registers used:
  3969 ;;		None
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3975 ;;      Params:         0       0       0       0       0       0       0
  3976 ;;      Locals:         0       0       0       0       0       0       0
  3977 ;;      Temps:          0       0       0       0       0       0       0
  3978 ;;      Totals:         0       0       0       0       0       0       0
  3979 ;;Total ram usage:        0 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		_enter_HVP
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text23
  3989  006F22                     __ptext23:
  3990                           	opt stack 0
  3991  006F22                     _MCLR_high:
  3992                           	opt stack 29
  3993                           
  3994                           ;FlashProg.c: 46: PORTDbits.RD7 = 1;
  3995                           
  3996                           ;incstack = 0
  3997  006F22  8E83               	bsf	3971,7,c	;volatile
  3998  006F24  0012               	return	
  3999  006F26                     __end_of_MCLR_high:
  4000                           	opt stack 0
  4001                           prodl	equ	0xFF3
  4002                           postinc0	equ	0xFEE
  4003                           wreg	equ	0xFE8
  4004                           postinc1	equ	0xFE6
  4005                           postdec1	equ	0xFE5
  4006                           fsr1h	equ	0xFE2
  4007                           fsr1l	equ	0xFE1
  4008                           postinc2	equ	0xFDE
  4009                           postdec2	equ	0xFDD
  4010                           fsr2h	equ	0xFDA
  4011                           fsr2l	equ	0xFD9
  4012                           status	equ	0xFD8
  4013                           
  4014 ;; *************** function _enableWrite *****************
  4015 ;; Defined at:
  4016 ;;		line 112 in file "../src/PIC18/FlashProg.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;		None
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;		None
  4021 ;; Return value:  Size  Location     Type
  4022 ;;		None               void
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4030 ;;      Params:         0       0       0       0       0       0       0
  4031 ;;      Locals:         0       0       0       0       0       0       0
  4032 ;;      Temps:          0       0       0       0       0       0       0
  4033 ;;      Totals:         0       0       0       0       0       0       0
  4034 ;;Total ram usage:        0 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    4
  4037 ;; This function calls:
  4038 ;;		_writeICSP
  4039 ;; This function is called by:
  4040 ;;		_main
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text24
  4045  007032                     __ptext24:
  4046                           	opt stack 0
  4047  007032                     _enableWrite:
  4048                           	opt stack 26
  4049                           
  4050                           ;FlashProg.c: 113: writeICSP(0x0, 0x8ea6);
  4051                           
  4052                           ;incstack = 0
  4053  007032  0E00               	movlw	0
  4054  007034  6E0F               	movwf	writeICSP@commandByte+1,c
  4055  007036  0E00               	movlw	0
  4056  007038  6E0E               	movwf	writeICSP@commandByte,c
  4057  00703A  0E8E               	movlw	142
  4058  00703C  6E11               	movwf	writeICSP@dataBytes+1,c
  4059  00703E  0EA6               	movlw	166
  4060  007040  6E10               	movwf	writeICSP@dataBytes,c
  4061  007042  EC04  F038         	call	_writeICSP	;wreg free
  4062                           
  4063                           ;FlashProg.c: 114: writeICSP(0x0, 0x9ca6);
  4064  007046  0E00               	movlw	0
  4065  007048  6E0F               	movwf	writeICSP@commandByte+1,c
  4066  00704A  0E00               	movlw	0
  4067  00704C  6E0E               	movwf	writeICSP@commandByte,c
  4068  00704E  0E9C               	movlw	156
  4069  007050  6E11               	movwf	writeICSP@dataBytes+1,c
  4070  007052  0EA6               	movlw	166
  4071  007054  6E10               	movwf	writeICSP@dataBytes,c
  4072  007056  EC04  F038         	call	_writeICSP	;wreg free
  4073  00705A  0012               	return	
  4074  00705C                     __end_of_enableWrite:
  4075                           	opt stack 0
  4076                           prodl	equ	0xFF3
  4077                           postinc0	equ	0xFEE
  4078                           wreg	equ	0xFE8
  4079                           postinc1	equ	0xFE6
  4080                           postdec1	equ	0xFE5
  4081                           fsr1h	equ	0xFE2
  4082                           fsr1l	equ	0xFE1
  4083                           postinc2	equ	0xFDE
  4084                           postdec2	equ	0xFDD
  4085                           fsr2h	equ	0xFDA
  4086                           fsr2l	equ	0xFD9
  4087                           status	equ	0xFD8
  4088                           
  4089 ;; *************** function _bulkErase *****************
  4090 ;; Defined at:
  4091 ;;		line 65 in file "../src/PIC18/FlashProg.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;		None
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  i               2   17[COMRAM] int 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;		None               void
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4105 ;;      Params:         0       0       0       0       0       0       0
  4106 ;;      Locals:         2       0       0       0       0       0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0
  4108 ;;      Totals:         2       0       0       0       0       0       0
  4109 ;;Total ram usage:        2 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    4
  4112 ;; This function calls:
  4113 ;;		_writeBits
  4114 ;;		_writeICSP
  4115 ;; This function is called by:
  4116 ;;		_main
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           	psect	text25
  4121  00779A                     __ptext25:
  4122                           	opt stack 0
  4123  00779A                     _bulkErase:
  4124                           	opt stack 26
  4125                           
  4126                           ;FlashProg.c: 66: int i = 0;
  4127                           
  4128                           ;incstack = 0
  4129  00779A  0E00               	movlw	0
  4130  00779C  6E13               	movwf	bulkErase@i+1,c
  4131  00779E  0E00               	movlw	0
  4132  0077A0  6E12               	movwf	bulkErase@i,c
  4133                           
  4134                           ;FlashProg.c: 67: writeICSP(0x0, 0x0e3c);
  4135  0077A2  0E00               	movlw	0
  4136  0077A4  6E0F               	movwf	writeICSP@commandByte+1,c
  4137  0077A6  0E00               	movlw	0
  4138  0077A8  6E0E               	movwf	writeICSP@commandByte,c
  4139  0077AA  0E0E               	movlw	14
  4140  0077AC  6E11               	movwf	writeICSP@dataBytes+1,c
  4141  0077AE  0E3C               	movlw	60
  4142  0077B0  6E10               	movwf	writeICSP@dataBytes,c
  4143  0077B2  EC04  F038         	call	_writeICSP	;wreg free
  4144                           
  4145                           ;FlashProg.c: 68: writeICSP(0x0, 0x6ef8);
  4146  0077B6  0E00               	movlw	0
  4147  0077B8  6E0F               	movwf	writeICSP@commandByte+1,c
  4148  0077BA  0E00               	movlw	0
  4149  0077BC  6E0E               	movwf	writeICSP@commandByte,c
  4150  0077BE  0E6E               	movlw	110
  4151  0077C0  6E11               	movwf	writeICSP@dataBytes+1,c
  4152  0077C2  0EF8               	movlw	248
  4153  0077C4  6E10               	movwf	writeICSP@dataBytes,c
  4154  0077C6  EC04  F038         	call	_writeICSP	;wreg free
  4155                           
  4156                           ;FlashProg.c: 69: writeICSP(0x0, 0x0e00);
  4157  0077CA  0E00               	movlw	0
  4158  0077CC  6E0F               	movwf	writeICSP@commandByte+1,c
  4159  0077CE  0E00               	movlw	0
  4160  0077D0  6E0E               	movwf	writeICSP@commandByte,c
  4161  0077D2  0E0E               	movlw	14
  4162  0077D4  6E11               	movwf	writeICSP@dataBytes+1,c
  4163  0077D6  0E00               	movlw	0
  4164  0077D8  6E10               	movwf	writeICSP@dataBytes,c
  4165  0077DA  EC04  F038         	call	_writeICSP	;wreg free
  4166                           
  4167                           ;FlashProg.c: 70: writeICSP(0x0, 0x6ef7);
  4168  0077DE  0E00               	movlw	0
  4169  0077E0  6E0F               	movwf	writeICSP@commandByte+1,c
  4170  0077E2  0E00               	movlw	0
  4171  0077E4  6E0E               	movwf	writeICSP@commandByte,c
  4172  0077E6  0E6E               	movlw	110
  4173  0077E8  6E11               	movwf	writeICSP@dataBytes+1,c
  4174  0077EA  0EF7               	movlw	247
  4175  0077EC  6E10               	movwf	writeICSP@dataBytes,c
  4176  0077EE  EC04  F038         	call	_writeICSP	;wreg free
  4177                           
  4178                           ;FlashProg.c: 71: writeICSP(0x0, 0x0e05);
  4179  0077F2  0E00               	movlw	0
  4180  0077F4  6E0F               	movwf	writeICSP@commandByte+1,c
  4181  0077F6  0E00               	movlw	0
  4182  0077F8  6E0E               	movwf	writeICSP@commandByte,c
  4183  0077FA  0E0E               	movlw	14
  4184  0077FC  6E11               	movwf	writeICSP@dataBytes+1,c
  4185  0077FE  0E05               	movlw	5
  4186  007800  6E10               	movwf	writeICSP@dataBytes,c
  4187  007802  EC04  F038         	call	_writeICSP	;wreg free
  4188                           
  4189                           ;FlashProg.c: 72: writeICSP(0x0, 0x6ef6);
  4190  007806  0E00               	movlw	0
  4191  007808  6E0F               	movwf	writeICSP@commandByte+1,c
  4192  00780A  0E00               	movlw	0
  4193  00780C  6E0E               	movwf	writeICSP@commandByte,c
  4194  00780E  0E6E               	movlw	110
  4195  007810  6E11               	movwf	writeICSP@dataBytes+1,c
  4196  007812  0EF6               	movlw	246
  4197  007814  6E10               	movwf	writeICSP@dataBytes,c
  4198  007816  EC04  F038         	call	_writeICSP	;wreg free
  4199                           
  4200                           ;FlashProg.c: 73: writeICSP(0xc, 0x3f3f);
  4201  00781A  0E00               	movlw	0
  4202  00781C  6E0F               	movwf	writeICSP@commandByte+1,c
  4203  00781E  0E0C               	movlw	12
  4204  007820  6E0E               	movwf	writeICSP@commandByte,c
  4205  007822  0E3F               	movlw	63
  4206  007824  6E11               	movwf	writeICSP@dataBytes+1,c
  4207  007826  0E3F               	movlw	63
  4208  007828  6E10               	movwf	writeICSP@dataBytes,c
  4209  00782A  EC04  F038         	call	_writeICSP	;wreg free
  4210                           
  4211                           ;FlashProg.c: 74: writeICSP(0x0, 0x0e3c);
  4212  00782E  0E00               	movlw	0
  4213  007830  6E0F               	movwf	writeICSP@commandByte+1,c
  4214  007832  0E00               	movlw	0
  4215  007834  6E0E               	movwf	writeICSP@commandByte,c
  4216  007836  0E0E               	movlw	14
  4217  007838  6E11               	movwf	writeICSP@dataBytes+1,c
  4218  00783A  0E3C               	movlw	60
  4219  00783C  6E10               	movwf	writeICSP@dataBytes,c
  4220  00783E  EC04  F038         	call	_writeICSP	;wreg free
  4221                           
  4222                           ;FlashProg.c: 75: writeICSP(0x0, 0x6ef8);
  4223  007842  0E00               	movlw	0
  4224  007844  6E0F               	movwf	writeICSP@commandByte+1,c
  4225  007846  0E00               	movlw	0
  4226  007848  6E0E               	movwf	writeICSP@commandByte,c
  4227  00784A  0E6E               	movlw	110
  4228  00784C  6E11               	movwf	writeICSP@dataBytes+1,c
  4229  00784E  0EF8               	movlw	248
  4230  007850  6E10               	movwf	writeICSP@dataBytes,c
  4231  007852  EC04  F038         	call	_writeICSP	;wreg free
  4232                           
  4233                           ;FlashProg.c: 76: writeICSP(0x0, 0x0e00);
  4234  007856  0E00               	movlw	0
  4235  007858  6E0F               	movwf	writeICSP@commandByte+1,c
  4236  00785A  0E00               	movlw	0
  4237  00785C  6E0E               	movwf	writeICSP@commandByte,c
  4238  00785E  0E0E               	movlw	14
  4239  007860  6E11               	movwf	writeICSP@dataBytes+1,c
  4240  007862  0E00               	movlw	0
  4241  007864  6E10               	movwf	writeICSP@dataBytes,c
  4242  007866  EC04  F038         	call	_writeICSP	;wreg free
  4243                           
  4244                           ;FlashProg.c: 77: writeICSP(0x0, 0x6ef7);
  4245  00786A  0E00               	movlw	0
  4246  00786C  6E0F               	movwf	writeICSP@commandByte+1,c
  4247  00786E  0E00               	movlw	0
  4248  007870  6E0E               	movwf	writeICSP@commandByte,c
  4249  007872  0E6E               	movlw	110
  4250  007874  6E11               	movwf	writeICSP@dataBytes+1,c
  4251  007876  0EF7               	movlw	247
  4252  007878  6E10               	movwf	writeICSP@dataBytes,c
  4253  00787A  EC04  F038         	call	_writeICSP	;wreg free
  4254                           
  4255                           ;FlashProg.c: 78: writeICSP(0x0, 0x0e04);
  4256  00787E  0E00               	movlw	0
  4257  007880  6E0F               	movwf	writeICSP@commandByte+1,c
  4258  007882  0E00               	movlw	0
  4259  007884  6E0E               	movwf	writeICSP@commandByte,c
  4260  007886  0E0E               	movlw	14
  4261  007888  6E11               	movwf	writeICSP@dataBytes+1,c
  4262  00788A  0E04               	movlw	4
  4263  00788C  6E10               	movwf	writeICSP@dataBytes,c
  4264  00788E  EC04  F038         	call	_writeICSP	;wreg free
  4265                           
  4266                           ;FlashProg.c: 79: writeICSP(0x0, 0x6ef6);
  4267  007892  0E00               	movlw	0
  4268  007894  6E0F               	movwf	writeICSP@commandByte+1,c
  4269  007896  0E00               	movlw	0
  4270  007898  6E0E               	movwf	writeICSP@commandByte,c
  4271  00789A  0E6E               	movlw	110
  4272  00789C  6E11               	movwf	writeICSP@dataBytes+1,c
  4273  00789E  0EF6               	movlw	246
  4274  0078A0  6E10               	movwf	writeICSP@dataBytes,c
  4275  0078A2  EC04  F038         	call	_writeICSP	;wreg free
  4276                           
  4277                           ;FlashProg.c: 80: writeICSP(0xc, 0x8f8f);
  4278  0078A6  0E00               	movlw	0
  4279  0078A8  6E0F               	movwf	writeICSP@commandByte+1,c
  4280  0078AA  0E0C               	movlw	12
  4281  0078AC  6E0E               	movwf	writeICSP@commandByte,c
  4282  0078AE  0E8F               	movlw	143
  4283  0078B0  6E11               	movwf	writeICSP@dataBytes+1,c
  4284  0078B2  0E8F               	movlw	143
  4285  0078B4  6E10               	movwf	writeICSP@dataBytes,c
  4286  0078B6  EC04  F038         	call	_writeICSP	;wreg free
  4287                           
  4288                           ;FlashProg.c: 81: writeICSP(0x0, 0);
  4289  0078BA  0E00               	movlw	0
  4290  0078BC  6E0F               	movwf	writeICSP@commandByte+1,c
  4291  0078BE  0E00               	movlw	0
  4292  0078C0  6E0E               	movwf	writeICSP@commandByte,c
  4293  0078C2  0E00               	movlw	0
  4294  0078C4  6E11               	movwf	writeICSP@dataBytes+1,c
  4295  0078C6  0E00               	movlw	0
  4296  0078C8  6E10               	movwf	writeICSP@dataBytes,c
  4297  0078CA  EC04  F038         	call	_writeICSP	;wreg free
  4298                           
  4299                           ;FlashProg.c: 82: writeBits(0, 4);
  4300  0078CE  0E00               	movlw	0
  4301  0078D0  6E06               	movwf	writeBits@pattern+1,c
  4302  0078D2  0E00               	movlw	0
  4303  0078D4  6E05               	movwf	writeBits@pattern,c
  4304  0078D6  0E00               	movlw	0
  4305  0078D8  6E08               	movwf	writeBits@bitsToWrite+1,c
  4306  0078DA  0E04               	movlw	4
  4307  0078DC  6E07               	movwf	writeBits@bitsToWrite,c
  4308  0078DE  EC45  F038         	call	_writeBits	;wreg free
  4309                           
  4310                           ;FlashProg.c: 83: for(i = 0; i < 200 ; i++){}
  4311  0078E2  0E00               	movlw	0
  4312  0078E4  6E13               	movwf	bulkErase@i+1,c
  4313  0078E6  0E00               	movlw	0
  4314  0078E8  6E12               	movwf	bulkErase@i,c
  4315  0078EA  5013               	movf	bulkErase@i+1,w,c
  4316  0078EC  0A80               	xorlw	128
  4317  0078EE  0F80               	addlw	-128
  4318  0078F0  0EC8               	movlw	200
  4319  0078F2  B4D8               	btfsc	status,2,c
  4320  0078F4  5C12               	subwf	bulkErase@i,w,c
  4321  0078F6  B0D8               	btfsc	status,0,c
  4322  0078F8  D003               	goto	l1680
  4323  0078FA  4A12               	infsnz	bulkErase@i,f,c
  4324  0078FC  2A13               	incf	bulkErase@i+1,f,c
  4325  0078FE  D7F5               	goto	L15
  4326  007900                     l1680:
  4327                           
  4328                           ;FlashProg.c: 84: writeBits(0, 16);
  4329  007900  0E00               	movlw	0
  4330  007902  6E06               	movwf	writeBits@pattern+1,c
  4331  007904  0E00               	movlw	0
  4332  007906  6E05               	movwf	writeBits@pattern,c
  4333  007908  0E00               	movlw	0
  4334  00790A  6E08               	movwf	writeBits@bitsToWrite+1,c
  4335  00790C  0E10               	movlw	16
  4336  00790E  6E07               	movwf	writeBits@bitsToWrite,c
  4337  007910  EC45  F038         	call	_writeBits	;wreg free
  4338  007914  0012               	return	
  4339  007916                     __end_of_bulkErase:
  4340                           	opt stack 0
  4341                           prodl	equ	0xFF3
  4342                           postinc0	equ	0xFEE
  4343                           wreg	equ	0xFE8
  4344                           postinc1	equ	0xFE6
  4345                           postdec1	equ	0xFE5
  4346                           fsr1h	equ	0xFE2
  4347                           fsr1l	equ	0xFE1
  4348                           postinc2	equ	0xFDE
  4349                           postdec2	equ	0xFDD
  4350                           fsr2h	equ	0xFDA
  4351                           fsr2l	equ	0xFD9
  4352                           status	equ	0xFD8
  4353                           
  4354 ;; *************** function _writeICSP *****************
  4355 ;; Defined at:
  4356 ;;		line 5 in file "../src/PIC18/ICSP.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;  commandByte     2   13[COMRAM] unsigned int 
  4359 ;;  dataBytes       2   15[COMRAM] unsigned int 
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;		None
  4362 ;; Return value:  Size  Location     Type
  4363 ;;		None               void
  4364 ;; Registers used:
  4365 ;;		wreg, status,2, status,0, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4371 ;;      Params:         4       0       0       0       0       0       0
  4372 ;;      Locals:         0       0       0       0       0       0       0
  4373 ;;      Temps:          0       0       0       0       0       0       0
  4374 ;;      Totals:         4       0       0       0       0       0       0
  4375 ;;Total ram usage:        4 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    3
  4378 ;; This function calls:
  4379 ;;		_writeBits
  4380 ;; This function is called by:
  4381 ;;		_bulkErase
  4382 ;;		_enableWrite
  4383 ;;		_flashSetAddress
  4384 ;;		_writeToBuffer
  4385 ;;		_flashWriteAndProgram
  4386 ;;		_rowErase
  4387 ;;		_readDeviceID1
  4388 ;;		_readDeviceID2
  4389 ;;		_flashWrite8Bits
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392                           
  4393                           	psect	text26
  4394  007008                     __ptext26:
  4395                           	opt stack 0
  4396  007008                     _writeICSP:
  4397                           	opt stack 25
  4398                           
  4399                           ;ICSP.c: 6: writeBits(commandByte, 4);
  4400                           
  4401                           ;incstack = 0
  4402  007008  C00E  F005         	movff	writeICSP@commandByte,writeBits@pattern
  4403  00700C  C00F  F006         	movff	writeICSP@commandByte+1,writeBits@pattern+1
  4404  007010  0E00               	movlw	0
  4405  007012  6E08               	movwf	writeBits@bitsToWrite+1,c
  4406  007014  0E04               	movlw	4
  4407  007016  6E07               	movwf	writeBits@bitsToWrite,c
  4408  007018  EC45  F038         	call	_writeBits	;wreg free
  4409                           
  4410                           ;ICSP.c: 7: writeBits(dataBytes, 16);
  4411  00701C  C010  F005         	movff	writeICSP@dataBytes,writeBits@pattern
  4412  007020  C011  F006         	movff	writeICSP@dataBytes+1,writeBits@pattern+1
  4413  007024  0E00               	movlw	0
  4414  007026  6E08               	movwf	writeBits@bitsToWrite+1,c
  4415  007028  0E10               	movlw	16
  4416  00702A  6E07               	movwf	writeBits@bitsToWrite,c
  4417  00702C  EC45  F038         	call	_writeBits	;wreg free
  4418  007030  0012               	return	
  4419  007032                     __end_of_writeICSP:
  4420                           	opt stack 0
  4421                           prodl	equ	0xFF3
  4422                           postinc0	equ	0xFEE
  4423                           wreg	equ	0xFE8
  4424                           postinc1	equ	0xFE6
  4425                           postdec1	equ	0xFE5
  4426                           fsr1h	equ	0xFE2
  4427                           fsr1l	equ	0xFE1
  4428                           postinc2	equ	0xFDE
  4429                           postdec2	equ	0xFDD
  4430                           fsr2h	equ	0xFDA
  4431                           fsr2l	equ	0xFD9
  4432                           status	equ	0xFD8
  4433                           
  4434 ;; *************** function _writeBits *****************
  4435 ;; Defined at:
  4436 ;;		line 16 in file "../src/PIC18/ICSP.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;  pattern         2    4[COMRAM] unsigned int 
  4439 ;;  bitsToWrite     2    6[COMRAM] unsigned int 
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;  i               2   11[COMRAM] int 
  4442 ;; Return value:  Size  Location     Type
  4443 ;;		None               void
  4444 ;; Registers used:
  4445 ;;		wreg, status,2, status,0, cstack
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4451 ;;      Params:         4       0       0       0       0       0       0
  4452 ;;      Locals:         2       0       0       0       0       0       0
  4453 ;;      Temps:          3       0       0       0       0       0       0
  4454 ;;      Totals:         9       0       0       0       0       0       0
  4455 ;;Total ram usage:        9 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; Hardware stack levels required when called:    2
  4458 ;; This function calls:
  4459 ;;		_writeBit
  4460 ;; This function is called by:
  4461 ;;		_bulkErase
  4462 ;;		_flashWriteAndProgram
  4463 ;;		_rowErase
  4464 ;;		_writeICSP
  4465 ;;		_readICSP
  4466 ;;		_readFirstByte
  4467 ;;		_flashWrite8Bits
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text27
  4472  00708A                     __ptext27:
  4473                           	opt stack 0
  4474  00708A                     _writeBits:
  4475                           	opt stack 25
  4476                           
  4477                           ;ICSP.c: 17: int i=0;
  4478                           
  4479                           ;incstack = 0
  4480  00708A  0E00               	movlw	0
  4481  00708C  6E0D               	movwf	writeBits@i+1,c
  4482  00708E  0E00               	movlw	0
  4483  007090  6E0C               	movwf	writeBits@i,c
  4484                           
  4485                           ;ICSP.c: 18: (TRISDbits.TRISD4 = 0);
  4486  007092  9895               	bcf	3989,4,c	;volatile
  4487                           
  4488                           ;ICSP.c: 19: while(i < bitsToWrite){
  4489  007094  D015               	goto	l1402
  4490  007096                     l1398:
  4491                           
  4492                           ;ICSP.c: 20: writeBit(((pattern>>i)&0x1));
  4493  007096  C00C  F009         	movff	writeBits@i,??_writeBits
  4494  00709A  C005  F00A         	movff	writeBits@pattern,??_writeBits+1
  4495  00709E  C006  F00B         	movff	writeBits@pattern+1,??_writeBits+2
  4496  0070A2  2A09               	incf	??_writeBits,f,c
  4497  0070A4  D003               	goto	u654
  4498  0070A6                     u655:
  4499  0070A6  90D8               	bcf	status,0,c
  4500  0070A8  320B               	rrcf	??_writeBits+2,f,c
  4501  0070AA  320A               	rrcf	??_writeBits+1,f,c
  4502  0070AC                     u654:
  4503  0070AC  2E09               	decfsz	??_writeBits,f,c
  4504  0070AE  D7FB               	goto	u655
  4505  0070B0  0E01               	movlw	1
  4506  0070B2  140A               	andwf	??_writeBits+1,w,c
  4507  0070B4  6E03               	movwf	writeBit@bitToWrite,c
  4508  0070B6  6A04               	clrf	writeBit@bitToWrite+1,c
  4509  0070B8  ECC5  F037         	call	_writeBit	;wreg free
  4510                           
  4511                           ;ICSP.c: 21: i++;
  4512  0070BC  4A0C               	infsnz	writeBits@i,f,c
  4513  0070BE  2A0D               	incf	writeBits@i+1,f,c
  4514  0070C0                     l1402:
  4515  0070C0  5007               	movf	writeBits@bitsToWrite,w,c
  4516  0070C2  5C0C               	subwf	writeBits@i,w,c
  4517  0070C4  5008               	movf	writeBits@bitsToWrite+1,w,c
  4518  0070C6  580D               	subwfb	writeBits@i+1,w,c
  4519  0070C8  B0D8               	btfsc	status,0,c
  4520  0070CA  0012               	return	
  4521  0070CC  D7E4               	goto	l1398
  4522  0070CE                     __end_of_writeBits:
  4523                           	opt stack 0
  4524                           prodl	equ	0xFF3
  4525                           postinc0	equ	0xFEE
  4526                           wreg	equ	0xFE8
  4527                           postinc1	equ	0xFE6
  4528                           postdec1	equ	0xFE5
  4529                           fsr1h	equ	0xFE2
  4530                           fsr1l	equ	0xFE1
  4531                           postinc2	equ	0xFDE
  4532                           postdec2	equ	0xFDD
  4533                           fsr2h	equ	0xFDA
  4534                           fsr2l	equ	0xFD9
  4535                           status	equ	0xFD8
  4536                           
  4537 ;; *************** function _writeBit *****************
  4538 ;; Defined at:
  4539 ;;		line 10 in file "../src/PIC18/ICSP.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  bitToWrite      2    2[COMRAM] unsigned int 
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;		None
  4544 ;; Return value:  Size  Location     Type
  4545 ;;		None               void
  4546 ;; Registers used:
  4547 ;;		cstack
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 0/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4553 ;;      Params:         2       0       0       0       0       0       0
  4554 ;;      Locals:         0       0       0       0       0       0       0
  4555 ;;      Temps:          0       0       0       0       0       0       0
  4556 ;;      Totals:         2       0       0       0       0       0       0
  4557 ;;Total ram usage:        2 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; Hardware stack levels required when called:    1
  4560 ;; This function calls:
  4561 ;;		_PGC_high
  4562 ;;		_PGC_low
  4563 ;;		_writePGD
  4564 ;; This function is called by:
  4565 ;;		_writeBits
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text28
  4570  006F8A                     __ptext28:
  4571                           	opt stack 0
  4572  006F8A                     _writeBit:
  4573                           	opt stack 25
  4574                           
  4575                           ;ICSP.c: 11: PGC_high();
  4576                           
  4577                           ;incstack = 0
  4578  006F8A  EC8D  F037         	call	_PGC_high	;wreg free
  4579                           
  4580                           ;ICSP.c: 12: writePGD(bitToWrite);
  4581  006F8E  C003  F001         	movff	writeBit@bitToWrite,writePGD@data
  4582  006F92  C004  F002         	movff	writeBit@bitToWrite+1,writePGD@data+1
  4583  006F96  EC9C  F037         	call	_writePGD	;wreg free
  4584                           
  4585                           ;ICSP.c: 13: PGC_low();
  4586  006F9A  EC8F  F037         	call	_PGC_low	;wreg free
  4587  006F9E  0012               	return	
  4588  006FA0                     __end_of_writeBit:
  4589                           	opt stack 0
  4590                           prodl	equ	0xFF3
  4591                           postinc0	equ	0xFEE
  4592                           wreg	equ	0xFE8
  4593                           postinc1	equ	0xFE6
  4594                           postdec1	equ	0xFE5
  4595                           fsr1h	equ	0xFE2
  4596                           fsr1l	equ	0xFE1
  4597                           postinc2	equ	0xFDE
  4598                           postdec2	equ	0xFDD
  4599                           fsr2h	equ	0xFDA
  4600                           fsr2l	equ	0xFD9
  4601                           status	equ	0xFD8
  4602                           
  4603 ;; *************** function _writePGD *****************
  4604 ;; Defined at:
  4605 ;;		line 10 in file "../src/PIC18/FlashProg.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;  data            2    0[COMRAM] int 
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;		None
  4610 ;; Return value:  Size  Location     Type
  4611 ;;		None               void
  4612 ;; Registers used:
  4613 ;;		None
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4619 ;;      Params:         2       0       0       0       0       0       0
  4620 ;;      Locals:         0       0       0       0       0       0       0
  4621 ;;      Temps:          0       0       0       0       0       0       0
  4622 ;;      Totals:         2       0       0       0       0       0       0
  4623 ;;Total ram usage:        2 bytes
  4624 ;; Hardware stack levels used:    1
  4625 ;; This function calls:
  4626 ;;		Nothing
  4627 ;; This function is called by:
  4628 ;;		_PGD_low
  4629 ;;		_MCLR_low
  4630 ;;		_writeBit
  4631 ;;		_PGD_high
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text29
  4636  006F38                     __ptext29:
  4637                           	opt stack 0
  4638  006F38                     _writePGD:
  4639                           	opt stack 25
  4640                           
  4641                           ;FlashProg.c: 11: PORTDbits.RD4 = data;
  4642                           
  4643                           ;incstack = 0
  4644  006F38  B001               	btfsc	writePGD@data,0,c
  4645  006F3A  D002               	bra	u645
  4646  006F3C  9883               	bcf	3971,4,c	;volatile
  4647  006F3E  D001               	bra	u646
  4648  006F40                     u645:
  4649  006F40  8883               	bsf	3971,4,c	;volatile
  4650  006F42                     u646:
  4651  006F42  0012               	return	
  4652  006F44                     __end_of_writePGD:
  4653                           	opt stack 0
  4654                           prodl	equ	0xFF3
  4655                           postinc0	equ	0xFEE
  4656                           wreg	equ	0xFE8
  4657                           postinc1	equ	0xFE6
  4658                           postdec1	equ	0xFE5
  4659                           fsr1h	equ	0xFE2
  4660                           fsr1l	equ	0xFE1
  4661                           postinc2	equ	0xFDE
  4662                           postdec2	equ	0xFDD
  4663                           fsr2h	equ	0xFDA
  4664                           fsr2l	equ	0xFD9
  4665                           status	equ	0xFD8
  4666                           
  4667 ;; *************** function _PGC_low *****************
  4668 ;; Defined at:
  4669 ;;		line 26 in file "../src/PIC18/FlashProg.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;		None
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;		None
  4674 ;; Return value:  Size  Location     Type
  4675 ;;		None               void
  4676 ;; Registers used:
  4677 ;;		None
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4683 ;;      Params:         0       0       0       0       0       0       0
  4684 ;;      Locals:         0       0       0       0       0       0       0
  4685 ;;      Temps:          0       0       0       0       0       0       0
  4686 ;;      Totals:         0       0       0       0       0       0       0
  4687 ;;Total ram usage:        0 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; This function calls:
  4690 ;;		Nothing
  4691 ;; This function is called by:
  4692 ;;		_enter_HVP
  4693 ;;		_exit_HVP
  4694 ;;		_flashWriteAndProgram
  4695 ;;		_rowErase
  4696 ;;		_writeBit
  4697 ;;		_readBit
  4698 ;;		_flashWrite8Bits
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text30
  4703  006F1E                     __ptext30:
  4704                           	opt stack 0
  4705  006F1E                     _PGC_low:
  4706                           	opt stack 25
  4707                           
  4708                           ;FlashProg.c: 27: PORTDbits.RD5 = 0;
  4709                           
  4710                           ;incstack = 0
  4711  006F1E  9A83               	bcf	3971,5,c	;volatile
  4712  006F20  0012               	return	
  4713  006F22                     __end_of_PGC_low:
  4714                           	opt stack 0
  4715                           prodl	equ	0xFF3
  4716                           postinc0	equ	0xFEE
  4717                           wreg	equ	0xFE8
  4718                           postinc1	equ	0xFE6
  4719                           postdec1	equ	0xFE5
  4720                           fsr1h	equ	0xFE2
  4721                           fsr1l	equ	0xFE1
  4722                           postinc2	equ	0xFDE
  4723                           postdec2	equ	0xFDD
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function _PGC_high *****************
  4729 ;; Defined at:
  4730 ;;		line 22 in file "../src/PIC18/FlashProg.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;		None
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;		None
  4735 ;; Return value:  Size  Location     Type
  4736 ;;		None               void
  4737 ;; Registers used:
  4738 ;;		None
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4744 ;;      Params:         0       0       0       0       0       0       0
  4745 ;;      Locals:         0       0       0       0       0       0       0
  4746 ;;      Temps:          0       0       0       0       0       0       0
  4747 ;;      Totals:         0       0       0       0       0       0       0
  4748 ;;Total ram usage:        0 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; This function calls:
  4751 ;;		Nothing
  4752 ;; This function is called by:
  4753 ;;		_flashWriteAndProgram
  4754 ;;		_rowErase
  4755 ;;		_writeBit
  4756 ;;		_readBit
  4757 ;;		_flashWrite8Bits
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           	psect	text31
  4762  006F1A                     __ptext31:
  4763                           	opt stack 0
  4764  006F1A                     _PGC_high:
  4765                           	opt stack 25
  4766                           
  4767                           ;FlashProg.c: 23: PORTDbits.RD5 = 1;
  4768                           
  4769                           ;incstack = 0
  4770  006F1A  8A83               	bsf	3971,5,c	;volatile
  4771  006F1C  0012               	return	
  4772  006F1E                     __end_of_PGC_high:
  4773                           	opt stack 0
  4774  0000                     prodl	equ	0xFF3
  4775                           postinc0	equ	0xFEE
  4776                           wreg	equ	0xFE8
  4777                           postinc1	equ	0xFE6
  4778                           postdec1	equ	0xFE5
  4779                           fsr1h	equ	0xFE2
  4780                           fsr1l	equ	0xFE1
  4781                           postinc2	equ	0xFDE
  4782                           postdec2	equ	0xFDD
  4783                           fsr2h	equ	0xFDA
  4784                           fsr2l	equ	0xFD9
  4785                           status	equ	0xFD8
  4786                           prodl	equ	0xFF3
  4787                           postinc0	equ	0xFEE
  4788                           wreg	equ	0xFE8
  4789                           postinc1	equ	0xFE6
  4790                           postdec1	equ	0xFE5
  4791                           fsr1h	equ	0xFE2
  4792                           fsr1l	equ	0xFE1
  4793                           postinc2	equ	0xFDE
  4794                           postdec2	equ	0xFDD
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799                           	psect	rparam
  4800  0000                     prodl	equ	0xFF3
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postinc1	equ	0xFE6
  4804                           postdec1	equ	0xFE5
  4805                           fsr1h	equ	0xFE2
  4806                           fsr1l	equ	0xFE1
  4807                           postinc2	equ	0xFDE
  4808                           postdec2	equ	0xFDD
  4809                           fsr2h	equ	0xFDA
  4810                           fsr2l	equ	0xFD9
  4811                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     89     121
    BANK0           128    128     128
    BANK1           256    256     256
    BANK2           256     96     192
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    overwriteBufferData@data	PTR unsigned int  size(2) Largest target is 200
		 -> flashWriteData@newData(BANK1[200]), 

    flashWriteData@data	PTR unsigned int  size(2) Largest target is 64
		 -> main@blockWrite5(BANK0[64]), 

    flashWriteBlock@secondHalf	PTR unsigned int  size(2) Largest target is 32
		 -> halfBuffer2(BANK2[32]), main@blockWrite4(BANK2[32]), main@blockWrite2(BANK2[32]), 

    flashWriteBlock@firstHalf	PTR unsigned int  size(2) Largest target is 32
		 -> halfBuffer1(COMRAM[32]), main@blockWrite3(BANK2[32]), main@blockWrite(BANK1[32]), 

    flashReadBlock@data	PTR unsigned int  size(2) Largest target is 64
		 -> blockBuffer(BANK2[64]), main@blockRead(BANK0[64]), 


Critical Paths under _main in COMRAM

    _main->_flashWriteData
    _flashWriteData->_flashReadBlock
    _flashWriteData->_flashWriteBlock
    _rowErase->_flashSetAddress
    _overwriteBufferData->_loadHalfBuffer
    _flashWriteBlock->_flashSetAddress
    _writeToBuffer->_writeICSP
    _flashWriteAndProgram->_writeICSP
    _flashReadBlock->_flashSetAddress
    _flashSetAddress->_writeICSP
    _flashRead16Bits->_readFirstByte
    _flashRead16Bits->_readICSP
    _readICSP->_readBits
    _readFirstByte->_readBits
    _readBits->_readBit
    _readBit->_readPGD
    _PGD_low->_writePGD
    _MCLR_low->_writePGD
    _enableWrite->_writeICSP
    _bulkErase->_writeICSP
    _writeICSP->_writeBits
    _writeBits->_writeBit
    _writeBit->_writePGD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_flashWriteData

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               284   284      0  137892
                                             71 COMRAM    18    18      0
                                              0 BANK0    128   128      0
                                            222 BANK1     34    34      0
                                              0 BANK2     96    96      0
                          _bulkErase
                        _enableWrite
                          _enter_HVP
                           _exit_HVP
                     _flashReadBlock
                    _flashWriteBlock
                     _flashWriteData
                           _trisInit
 ---------------------------------------------------------------------------------
 (1) _trisInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flashWriteData                                     238   230      8   73915
                                             55 COMRAM    16     8      8
                                              0 BANK1    222   222      0
                     _flashReadBlock
                    _flashSetAddress
                    _flashWriteBlock
                     _loadHalfBuffer
                _overwriteBufferData
                           _rowErase
 ---------------------------------------------------------------------------------
 (2) _rowErase                                             6     2      4   19641
                                             37 COMRAM     6     2      4
                           _PGC_high
                            _PGC_low
                            _PGD_low
                    _flashSetAddress
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (2) _overwriteBufferData                                 20    14      6     713
                                              8 COMRAM    20    14      6
                     _loadHalfBuffer
 ---------------------------------------------------------------------------------
 (3) _loadHalfBuffer                                       8     8      0     182
                                              0 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (2) _flashWriteBlock                                     18    10      8   29050
                                             37 COMRAM    18    10      8
                    _flashSetAddress
               _flashWriteAndProgram
                      _writeToBuffer
 ---------------------------------------------------------------------------------
 (3) _writeToBuffer                                        2     0      2    8392
                                             17 COMRAM     2     0      2
                          _writeICSP
 ---------------------------------------------------------------------------------
 (3) _flashWriteAndProgram                                 4     2      2   11008
                                             17 COMRAM     4     2      2
                           _PGC_high
                            _PGC_low
                            _PGD_low
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (2) _flashReadBlock                                      18    10      8   14440
                                             37 COMRAM    18    10      8
                    _flashRead16Bits
                    _flashSetAddress
 ---------------------------------------------------------------------------------
 (3) _flashSetAddress                                     20    16      4    8761
                                             17 COMRAM    20    16      4
                          _writeICSP
 ---------------------------------------------------------------------------------
 (3) _flashRead16Bits                                      6     4      2    5160
                                             18 COMRAM     6     4      2
                      _readFirstByte
                           _readICSP
 ---------------------------------------------------------------------------------
 (4) _readICSP                                             4     2      2    2534
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (4) _readFirstByte                                        4     2      2    2557
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (5) _readBits                                             7     5      2     265
                                              7 COMRAM     7     5      2
                            _readBit
 ---------------------------------------------------------------------------------
 (6) _readBit                                              4     2      2      23
                                              3 COMRAM     4     2      2
                           _PGC_high
                            _PGC_low
                            _readPGD
 ---------------------------------------------------------------------------------
 (7) _readPGD                                              3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _exit_HVP                                             0     0      0     556
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                            _PGM_low
 ---------------------------------------------------------------------------------
 (2) _PGM_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enter_HVP                                            0     0      0     556
                          _MCLR_high
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                           _PGM_high
 ---------------------------------------------------------------------------------
 (2) _PGM_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PGD_low                                              0     0      0     278
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_low                                             0     0      0     278
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_high                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableWrite                                          0     0      0    8178
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _bulkErase                                            2     2      0   10471
                                             17 COMRAM     2     2      0
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (3) _writeICSP                                            4     0      4    8178
                                             13 COMRAM     4     0      4
                          _writeBits
 ---------------------------------------------------------------------------------
 (4) _writeBits                                            9     5      4    2246
                                              4 COMRAM     9     5      4
                           _writeBit
 ---------------------------------------------------------------------------------
 (5) _writeBit                                             2     0      2     364
                                              2 COMRAM     2     0      2
                           _PGC_high
                            _PGC_low
                           _writePGD
 ---------------------------------------------------------------------------------
 (6) _writePGD                                             2     0      2     278
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _PGC_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PGC_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bulkErase
     _writeBits
       _writeBit
         _PGC_high
         _PGC_low
         _writePGD
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enableWrite
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enter_HVP
     _MCLR_high
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_high
   _exit_HVP
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_low
   _flashReadBlock
     _flashRead16Bits
       _readFirstByte
         _readBits
           _readBit
             _PGC_high
             _PGC_low
             _readPGD
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
       _readICSP
         _readBits
           _readBit
             _PGC_high
             _PGC_low
             _readPGD
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _flashSetAddress
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
   _flashWriteBlock
     _flashSetAddress
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _flashWriteAndProgram
       _PGC_high
       _PGC_low
       _PGD_low
         _writePGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _writeToBuffer
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
   _flashWriteData
     _flashReadBlock
       _flashRead16Bits
         _readFirstByte
           _readBits
             _readBit
               _PGC_high
               _PGC_low
               _readPGD
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
         _readICSP
           _readBits
             _readBit
               _PGC_high
               _PGC_low
               _readPGD
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _flashSetAddress
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
     _flashSetAddress
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _flashWriteBlock
       _flashSetAddress
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _flashWriteAndProgram
         _PGC_high
         _PGC_low
         _PGD_low
           _writePGD
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _writeToBuffer
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
     _loadHalfBuffer
     _overwriteBufferData
       _loadHalfBuffer
     _rowErase
       _PGC_high
       _PGC_low
       _PGD_low
         _writePGD
       _flashSetAddress
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
   _trisInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     60      C0       9       75.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     80      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     59      79       1       95.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B9      15        0.0%
DATA                 0      0     2B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Dec 10 22:11:18 2014

            flashWriteBlock@blockSelect 0032              flashWriteBlock@blockNumber 002A  
                                   l229 7454                                     l238 738E  
                                   l185 7BA2                                     u630 6F80  
                                   u645 6F40                                     u805 7560  
                                   u646 6F42                                     u654 70AC  
                                   u638 6F82                                     u655 70A6  
                                   u674 7186                                     u690 74BA  
                                   u675 7180                                     u940 7C5E  
                                   u695 74B0                                     u785 7250  
                                   u945 7C54                                     u955 7C64  
                                   u980 7D54                                     u990 7DEE  
                                   u985 7D4A                                     u995 7DE4  
                  _flashWriteAndProgram 71B8                                     wreg 000FE8  
                  overwriteBufferData@i 001B                    overwriteBufferData@j 0011  
                           main@address 004A                __size_of_flashRead16Bits 002E  
                          __CFG_LVP$OFF 000000                            __CFG_WDT$OFF 000000  
                                  l1402 70C0                                    l1412 719A  
                                  l1500 7330                                    l1408 7174  
                                  l1602 7784                                    l1532 7294  
                                  l1620 745C                                    l1614 73E6  
                                  l1710 7D20                                    l1536 72B6  
                                  l1608 73AA                                    l1712 7D2E  
                                  l1704 7CF0                                    l1466 7206  
                                  l1572 765A                                    l1556 75EA  
                                  l1732 7F80                                    l1740 7FDC  
                                  l1398 7096                                    l1478 7228  
                                  l1590 7762                                    l1742 7FE2  
                                  l1680 7900                                    l1840 79A6  
                                  l1738 7FC8                                    l1692 7BEE  
                                  l1854 79F6                                    l1696 7C30  
                                  l1882 7A96                                    l1868 7A46  
                                  l1896 7AE6                                    u1010 7E3C  
                                  u1005 7DF4                                    u1015 7E32  
                                  u1025 7E42                                    u1050 7F1A  
                                  u1045 7EB2                                    u1055 7F10  
                                  u1065 7F20                           __CFG_DEBUG$ON 000000  
                           main@newData 0052                         __end_of_PGC_low 6F22  
                          __CFG_PWRT$ON 000000                         __end_of_PGD_low 6F52  
                       __end_of_PGM_low 6F2E                                    _main 7916  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  fsr1l 000FE1                                    fsr2l 000FD9  
                                  prodl 000FF3                                    start 0000  
                    __size_of_MCLR_high 0004                        __end_of_MCLR_low 6F64  
                                 ?_main 0001                   ?_flashWriteAndProgram 0012  
                          main@newData2 0054                            main@newData3 0056  
                          main@newData4 0058                            main@newData5 004E  
              __size_of_flashSetAddress 00E4                        __end_of_PGC_high 6F1E  
               __size_of_loadHalfBuffer 00C2                        __end_of_PGM_high 6F2A  
                       __end_of_readPGD 6F8A                         __end_of_readBit 6FEA  
                      ??_flashReadBlock 002E                                   main@i 01FE  
                   _overwriteBufferData 7390                                   status 000FD8  
                       __initialization 6FEA                            __end_of_main 7BA4  
                  ?_overwriteBufferData 0009                  __size_of_readFirstByte 004C  
                    flashWriteData@data 0038                           main@blockRead 0080  
                                ??_main 0048                      flashWriteData@size 003A  
                         __activetblptr 000000                               ??_PGC_low 0001  
                             ??_PGD_low 0003                       __end_of_MCLR_high 6F26  
                           readBit@data 0006                    __size_of_enableWrite 002A  
                             ??_PGM_low 0001                        ??_flashWriteData 0040  
                     ??_flashRead16Bits 0015                       readFirstByte@data 0011  
              __size_of_flashWriteBlock 0126                        __end_of_readICSP 7114  
             flashWriteData@memoryBlock 01D2                   flashWriteData@address 003C  
                 ??_overwriteBufferData 000F                        __end_of_readBits 71B8  
                      __end_of_exit_HVP 6F76                                  clear_0 6FF0  
                                clear_1 6FFC                  ??_flashWriteAndProgram 0014  
                 flashWriteData@newData 0100                               ??_readPGD 0003  
                             ??_readBit 0006                   flashWriteData@newSize 01D0  
                      __end_of_rowErase 779A               flashWriteData@nextDataSet 01CA  
                      __end_of_trisInit 6F38                       ??_flashSetAddress 0016  
                 flashWriteAndProgram@i 0014                        __end_of_writePGD 6F44  
                      __end_of_writeBit 6FA0                 overwriteBufferData@data 0009  
                         _readFirstByte 7114                              __accesstop 0080  
               __end_of__initialization 7002                            readICSP@data 0011  
            flashWriteData@timesToWrite 01CC                               ?_MCLR_low 0001  
                __size_of_writeToBuffer 0016                               ?_PGC_high 0001  
                       loadHalfBuffer@i 0007                         loadHalfBuffer@j 0005  
                        __pcstackCOMRAM 0001                         flashWriteData@i 01DC  
                       flashWriteData@j 01C8                         flashWriteData@k 01CE  
                             ?_PGM_high 0001          overwriteBufferData@sizeToWrite 000B  
             flashReadBlock@blockSelect 0032               flashReadBlock@blockNumber 002A  
                        _loadHalfBuffer 72CE                      __size_of_bulkErase 017C  
                        ?_readFirstByte 000F                          main@blockWrite 01DE  
             flashWriteBlock@secondHalf 0028                              __pbssBANK2 0200  
                    __size_of_enter_HVP 0016                              ??_MCLR_low 0003  
                            ??_PGC_high 0001                              ??_PGM_high 0001  
                     ??_flashWriteBlock 002E                            readBits@data 000D  
                __end_of_loadHalfBuffer 7390                           _writeToBuffer 6FB6  
                               _PGC_low 6F1E                                 _PGD_low 6F44  
                               _PGM_low 6F2A                               ?_readICSP 000F  
                             ?_readBits 0008                               ?_exit_HVP 0001  
                    __size_of_writeICSP 002A                      __size_of_writeBits 0044  
                               __Hparam 0000                                 __Lparam 0000  
       flashWriteData@currentStartPoint 01D4                               ?_rowErase 0026  
                     __end_of_bulkErase 7916                      writeBit@bitToWrite 0003  
                             ?_trisInit 0001                       __end_of_enter_HVP 6FB6  
                               __pcinit 6FEA                                 __ramtop 0600  
                             ?_writePGD 0001                               ?_writeBit 0003  
                               __ptext0 7916                                 __ptext1 6F2E  
                               __ptext2 7BA4                                 __ptext3 7674  
                               __ptext4 7390                                 __ptext5 72CE  
                               __ptext6 754E                                 __ptext7 6FB6  
                               __ptext8 71B8                                 __ptext9 723E  
                        ?_writeToBuffer 0012                         ?_loadHalfBuffer 0001  
                               _readPGD 6F76                                 _readBit 6FCC  
                          writePGD@data 0001                         _flashRead16Bits 705C  
                       ??_readFirstByte 0011                    end_of_initialization 7002  
                            ??_readICSP 0011                               _MCLR_high 6F22  
                            ??_readBits 000A                              ??_exit_HVP 0003  
                flashSetAddress@address 0012                              ??_rowErase 002A  
                               postdec1 000FE5                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                  flashSetAddress@lowAddr 0022  
                            ??_trisInit 0001                              ??_writePGD 0003  
                            ??_writeBit 0005                         _flashSetAddress 746A  
                             _PORTDbits 000F83                       __end_of_writeICSP 7032  
                     __end_of_writeBits 70CE                           ??_enableWrite 0012  
              overwriteBufferData@start 0017                               _TRISDbits 000F95  
                      writeBits@pattern 0005                              ?_MCLR_high 0001  
                            bulkErase@i 0012     overwriteBufferData@bufferStartPoint 000D  
           __end_of_overwriteBufferData 746A                 __size_of_flashReadBlock 0090  
                     __size_of_MCLR_low 0012                        flashWriteBlock@i 0036  
                     __size_of_PGC_high 0004                 __end_of_flashRead16Bits 708A  
                       ??_writeToBuffer 0014                       __size_of_PGM_high 0004  
         __size_of_flashWriteAndProgram 0086                    writeICSP@commandByte 000E  
                   start_initialization 6FEA                     __end_of_enableWrite 705C  
          overwriteBufferData@bytesLeft 0013                        __CFG_OSC$INTIO67 000000  
                       _flashWriteBlock 754E                 __size_of_flashWriteData 045C  
               __end_of_flashSetAddress 754E                      writeICSP@dataBytes 0010  
                       main@blockWrite2 0260                         main@blockWrite3 0280  
                       main@blockWrite4 02A0                         main@blockWrite5 00C0  
                           __pbssCOMRAM 005A                           __pcstackBANK0 0080  
                         __pcstackBANK1 0100                           __pcstackBANK2 0260  
                              ?_PGC_low 0001                                ?_PGD_low 0001  
                              ?_PGM_low 0001                             ??_MCLR_high 0001  
                           _halfBuffer1 005A                             _halfBuffer2 0240  
                     __size_of_readICSP 0046                       __size_of_readBits 0058  
                     __size_of_exit_HVP 0012  overwriteBufferData@availableWriteSpace 0019  
                           _blockBuffer 0200                        ??_loadHalfBuffer 0001  
                     __size_of_rowErase 0126                        ?_flashRead16Bits 0013  
                             _bulkErase 779A                       __size_of_trisInit 000A  
                              ?_readPGD 0001                                ?_readBit 0004  
              flashRead16Bits@firstData 0015                               _enter_HVP 6FA0  
                     __size_of_writePGD 000C                             _enableWrite 7032  
                     __size_of_writeBit 0016                 __end_of_flashWriteBlock 7674  
                              _MCLR_low 6F52                       writeToBuffer@data 0012  
                        _flashReadBlock 723E                                _PGC_high 6F1A  
                      ?_flashSetAddress 0012                                _PGM_high 6F26  
                            ?_bulkErase 0001                              ?_enter_HVP 0001  
                             _writeICSP 7008                               _writeBits 708A  
                      __size_of_PGC_low 0004                        __size_of_PGD_low 000E  
                    readBits@bitsToRead 0008                        __size_of_PGM_low 0004  
                 __end_of_readFirstByte 7160                flashWriteData@newAddress 01D8  
                __end_of_flashReadBlock 72CE                               readBits@i 000B  
                              __Hrparam 0000                          _flashWriteData 7BA4  
                              __Lrparam 0000                        __size_of_readPGD 0014  
                      __size_of_readBit 001E                flashWriteBlock@firstHalf 0026  
                            ?_writeICSP 000E                                __ptext10 746A  
                              __ptext11 705C                                __ptext20 6F26  
                              __ptext12 70CE                                __ptext21 6F44  
                              __ptext13 7114                                __ptext30 6F1E  
                              __ptext22 6F52                                __ptext14 7160  
                              __ptext31 6F1A                                __ptext23 6F22  
                              __ptext15 6FCC                                __ptext24 7032  
                              __ptext16 6F76                                __ptext25 779A  
                              __ptext17 6F64                                __ptext26 7008  
                              __ptext18 6F2A                                __ptext27 708A  
                              __ptext19 6FA0                                __ptext28 6F8A  
                              __ptext29 6F38                              ?_writeBits 0005  
       overwriteBufferData@bytesWritten 0015                        ?_flashWriteBlock 0026  
                              _readICSP 70CE                                _readBits 7160  
                       rowErase@address 0026                                _exit_HVP 6F64  
                         __size_of_main 028E                         ?_flashReadBlock 0026  
          __end_of_flashWriteAndProgram 723E                  __end_of_flashWriteData 8000  
                  writeBits@bitsToWrite 0007                              writeBits@i 000C  
                              _rowErase 7674                               rowErase@i 002A  
                              _trisInit 6F2E                                main@data 0050  
          __size_of_overwriteBufferData 00DA                             ??_bulkErase 0012  
                              _writePGD 6F38                                _writeBit 6F8A  
                 __end_of_writeToBuffer 6FCC                             ??_enter_HVP 0003  
                       ?_flashWriteData 0038                 flashSetAddress@highAddr 001E  
                    flashReadBlock@data 0026                      flashReadBlock@size 0028  
              flashWriteAndProgram@data 0012                flashSetAddress@upperAddr 001A  
                          ?_enableWrite 0001                             ??_writeICSP 0012  
                           ??_writeBits 0009              flashWriteData@bytesWritten 01D6  
                   flashRead16Bits@data 0017                         flashReadBlock@i 0036  
