

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Dec 05 01:24:26 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	text23,global,reloc=2,class=CODE,delta=1
    32                           	psect	text24,global,reloc=2,class=CODE,delta=1
    33                           	psect	text25,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	smallconst
    38  000600                     __psmallconst:
    39                           	opt stack 0
    40  000600  00                 	db	0
    41  000601                     _dpowers:
    42                           	opt stack 0
    43  000601  0001               	dw	1
    44  000603  000A               	dw	10
    45  000605  0064               	dw	100
    46  000607  03E8               	dw	1000
    47  000609  2710               	dw	10000
    48  00060B                     __end_of_dpowers:
    49                           	opt stack 0
    50  0000                     _PORTDbits	set	3971
    51  0000                     _TRISDbits	set	3989
    52  00060B                     __stringdata:
    53                           	opt stack 0
    54  00060B                     STR_1:
    55  00060B  25                 	db	37
    56  00060C  64                 	db	100	;'d'
    57  00060D  20                 	db	32
    58  00060E  0A                 	db	10
    59  00060F  00                 	db	0
    60  000610                     __end_of__stringdata:
    61                           	opt stack 0
    62                           
    63                           ; #config settings
    64  000610  00                 	db	0	; dummy byte at the end
    65  0000                     
    66                           	psect	cinit
    67  000E48                     __pcinit:
    68                           	opt stack 0
    69  000E48                     start_initialization:
    70                           	opt stack 0
    71  000E48                     __initialization:
    72                           	opt stack 0
    73  000E48                     end_of_initialization:
    74                           	opt stack 0
    75  000E48                     __end_of__initialization:
    76                           	opt stack 0
    77  000E48  0E00               	movlw	low (__Lsmallconst shr (0+16))
    78  000E4A  6EF8               	movwf	tblptru,c
    79  000E4C  0E06               	movlw	high __Lsmallconst
    80  000E4E  6EF7               	movwf	tblptrh,c
    81  000E50  0100               	movlb	0
    82  000E52  EF09  F003         	goto	_main	;jump to C main() function
    83                           tblptru	equ	0xFF8
    84                           tblptrh	equ	0xFF7
    85                           
    86                           	psect	cstackCOMRAM
    87  000001                     __pcstackCOMRAM:
    88                           	opt stack 0
    89  000001                     ?_readPGD:
    90                           	opt stack 0
    91  000001                     writePGD@data:
    92                           	opt stack 0
    93                           
    94                           ; 2 bytes @ 0x0
    95  000001                     	ds	2
    96  000003                     ??_readPGD:
    97  000003                     writeBit@bitToWrite:
    98                           	opt stack 0
    99                           
   100                           ; 2 bytes @ 0x2
   101  000003                     	ds	1
   102  000004                     ?_readBit:
   103                           	opt stack 0
   104                           
   105                           ; 2 bytes @ 0x3
   106  000004                     	ds	1
   107  000005                     writeBits@pattern:
   108                           	opt stack 0
   109                           
   110                           ; 2 bytes @ 0x4
   111  000005                     	ds	1
   112  000006                     readBit@data:
   113                           	opt stack 0
   114                           
   115                           ; 2 bytes @ 0x5
   116  000006                     	ds	1
   117  000007                     writeBits@bitsToWrite:
   118                           	opt stack 0
   119                           
   120                           ; 2 bytes @ 0x6
   121  000007                     	ds	1
   122  000008                     ?_readBits:
   123                           	opt stack 0
   124  000008                     readBits@bitsToRead:
   125                           	opt stack 0
   126                           
   127                           ; 2 bytes @ 0x7
   128  000008                     	ds	1
   129  000009                     ??_writeBits:
   130                           
   131                           ; 0 bytes @ 0x8
   132  000009                     	ds	1
   133  00000A                     ??_readBits:
   134                           
   135                           ; 0 bytes @ 0x9
   136  00000A                     	ds	1
   137  00000B                     readBits@i:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0xA
   141  00000B                     	ds	1
   142  00000C                     writeBits@i:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0xB
   146  00000C                     	ds	1
   147  00000D                     readBits@data:
   148                           	opt stack 0
   149                           
   150                           ; 2 bytes @ 0xC
   151  00000D                     	ds	1
   152  00000E                     writeICSP@commandByte:
   153                           	opt stack 0
   154                           
   155                           ; 2 bytes @ 0xD
   156  00000E                     	ds	1
   157  00000F                     ?_readICSP:
   158                           	opt stack 0
   159  00000F                     ?_readFirstByte:
   160                           	opt stack 0
   161                           
   162                           ; 2 bytes @ 0xE
   163  00000F                     	ds	1
   164  000010                     writeICSP@dataBytes:
   165                           	opt stack 0
   166                           
   167                           ; 2 bytes @ 0xF
   168  000010                     	ds	1
   169  000011                     readICSP@data:
   170                           	opt stack 0
   171  000011                     readFirstByte@data:
   172                           	opt stack 0
   173                           
   174                           ; 2 bytes @ 0x10
   175  000011                     	ds	1
   176  000012                     bulkErase@i:
   177                           	opt stack 0
   178  000012                     flashSetAddress@address:
   179                           	opt stack 0
   180  000012                     flashWriteData@data:
   181                           	opt stack 0
   182  000012                     flashWriteAndProgram@data:
   183                           	opt stack 0
   184                           
   185                           ; 4 bytes @ 0x11
   186  000012                     	ds	1
   187  000013                     ?_flashRead16Bits:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0x12
   191  000013                     	ds	2
   192  000015                     flashRead16Bits@firstData:
   193                           	opt stack 0
   194                           
   195                           ; 2 bytes @ 0x14
   196  000015                     	ds	1
   197  000016                     ??_flashSetAddress:
   198  000016                     flashWriteAndProgram@i:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x15
   202  000016                     	ds	1
   203  000017                     flashRead16Bits@data:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x16
   207  000017                     	ds	3
   208  00001A                     flashSetAddress@upperAddr:
   209                           	opt stack 0
   210                           
   211                           ; 4 bytes @ 0x19
   212  00001A                     	ds	4
   213  00001E                     flashSetAddress@highAddr:
   214                           	opt stack 0
   215                           
   216                           ; 4 bytes @ 0x1D
   217  00001E                     	ds	4
   218  000022                     flashSetAddress@lowAddr:
   219                           	opt stack 0
   220                           
   221                           ; 4 bytes @ 0x21
   222  000022                     	ds	4
   223  000026                     main@b:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0x25
   227  000026                     	ds	2
   228  000028                     main@c:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x27
   232  000028                     	ds	2
   233  00002A                     main@d:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x29
   237  00002A                     	ds	2
   238  00002C                     main@e:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x2B
   242  00002C                     	ds	2
   243  00002E                     main@a:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x2D
   247  00002E                     	ds	2
   248  000030                     main@address:
   249                           	opt stack 0
   250                           
   251                           ; 4 bytes @ 0x2F
   252  000030                     	ds	4
   253  000034                     main@data:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x33
   257  000034                     	ds	2
   258  000036                     main@i:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x35
   262  000036                     	ds	2
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           
   266 ;;
   267 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   268 ;;
   269 ;; *************** function _main *****************
   270 ;; Defined at:
   271 ;;		line 28 in file "../src/PIC18/Main.c"
   272 ;; Parameters:    Size  Location     Type
   273 ;;		None
   274 ;; Auto vars:     Size  Location     Type
   275 ;;  address         4   47[COMRAM] unsigned long 
   276 ;;  i               2   53[COMRAM] unsigned int 
   277 ;;  data            2   51[COMRAM] unsigned int 
   278 ;;  a               2   45[COMRAM] unsigned int 
   279 ;;  e               2   43[COMRAM] unsigned int 
   280 ;;  d               2   41[COMRAM] unsigned int 
   281 ;;  c               2   39[COMRAM] unsigned int 
   282 ;;  b               2   37[COMRAM] unsigned int 
   283 ;; Return value:  Size  Location     Type
   284 ;;		None               void
   285 ;; Registers used:
   286 ;;		wreg, status,2, status,0, cstack
   287 ;; Tracked objects:
   288 ;;		On entry : 0/0
   289 ;;		On exit  : 0/0
   290 ;;		Unchanged: 0/0
   291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   292 ;;      Params:         0       0       0       0       0       0       0
   293 ;;      Locals:        18       0       0       0       0       0       0
   294 ;;      Temps:          0       0       0       0       0       0       0
   295 ;;      Totals:        18       0       0       0       0       0       0
   296 ;;Total ram usage:       18 bytes
   297 ;; Hardware stack levels required when called:    5
   298 ;; This function calls:
   299 ;;		_PGC_high
   300 ;;		_PGC_low
   301 ;;		_PGD_low
   302 ;;		_bulkErase
   303 ;;		_enableWrite
   304 ;;		_enter_HVP
   305 ;;		_exit_HVP
   306 ;;		_flashRead16Bits
   307 ;;		_flashSetAddress
   308 ;;		_flashWriteAndProgram
   309 ;;		_flashWriteData
   310 ;;		_trisInit
   311 ;;		_writeBits
   312 ;;		_writeICSP
   313 ;; This function is called by:
   314 ;;		Startup code after reset
   315 ;; This function uses a non-reentrant model
   316 ;;
   317                           
   318                           	psect	text0
   319  000612                     __ptext0:
   320                           	opt stack 0
   321  000612                     _main:
   322                           	opt stack 26
   323                           
   324                           ;Main.c: 29: uint16 i = 0;
   325                           
   326                           ;incstack = 0
   327  000612  0E00               	movlw	0
   328  000614  6E37               	movwf	main@i+1,c
   329  000616  0E00               	movlw	0
   330  000618  6E36               	movwf	main@i,c
   331                           
   332                           ;Main.c: 30: uint16 a = 0;
   333  00061A  0E00               	movlw	0
   334  00061C  6E2F               	movwf	main@a+1,c
   335  00061E  0E00               	movlw	0
   336  000620  6E2E               	movwf	main@a,c
   337                           
   338                           ;Main.c: 31: uint16 b = 0;
   339  000622  0E00               	movlw	0
   340  000624  6E27               	movwf	main@b+1,c
   341  000626  0E00               	movlw	0
   342  000628  6E26               	movwf	main@b,c
   343                           
   344                           ;Main.c: 32: uint16 c = 0;
   345  00062A  0E00               	movlw	0
   346  00062C  6E29               	movwf	main@c+1,c
   347  00062E  0E00               	movlw	0
   348  000630  6E28               	movwf	main@c,c
   349                           
   350                           ;Main.c: 33: uint16 d = 0;
   351  000632  0E00               	movlw	0
   352  000634  6E2B               	movwf	main@d+1,c
   353  000636  0E00               	movlw	0
   354  000638  6E2A               	movwf	main@d,c
   355                           
   356                           ;Main.c: 34: uint16 e = 0;
   357  00063A  0E00               	movlw	0
   358  00063C  6E2D               	movwf	main@e+1,c
   359  00063E  0E00               	movlw	0
   360  000640  6E2C               	movwf	main@e,c
   361                           
   362                           ;Main.c: 35: uint16 data = 0x0000;
   363  000642  0E00               	movlw	0
   364  000644  6E35               	movwf	main@data+1,c
   365  000646  0E00               	movlw	0
   366  000648  6E34               	movwf	main@data,c
   367                           
   368                           ;Main.c: 36: uint32 address = 0x000000;
   369  00064A  0E00               	movlw	0
   370  00064C  6E30               	movwf	main@address,c
   371  00064E  0E00               	movlw	0
   372  000650  6E31               	movwf	main@address+1,c
   373  000652  0E00               	movlw	0
   374  000654  6E32               	movwf	main@address+2,c
   375  000656  0E00               	movlw	0
   376  000658  6E33               	movwf	main@address+3,c
   377                           
   378                           ;Main.c: 37: trisInit();
   379  00065A  EC38  F007         	call	_trisInit	;wreg free
   380                           
   381                           ;Main.c: 39: enter_HVP();
   382  00065E  ECF2  F006         	call	_enter_HVP	;wreg free
   383                           
   384                           ;Main.c: 41: bulkErase();
   385  000662  EC8D  F004         	call	_bulkErase	;wreg free
   386                           
   387                           ;Main.c: 42: enableWrite();
   388  000666  ECAE  F006         	call	_enableWrite	;wreg free
   389                           
   390                           ;Main.c: 44: flashSetAddress(0x000000);
   391  00066A  0E00               	movlw	0
   392  00066C  6E12               	movwf	flashSetAddress@address,c
   393  00066E  0E00               	movlw	0
   394  000670  6E13               	movwf	flashSetAddress@address+1,c
   395  000672  0E00               	movlw	0
   396  000674  6E14               	movwf	flashSetAddress@address+2,c
   397  000676  0E00               	movlw	0
   398  000678  6E15               	movwf	flashSetAddress@address+3,c
   399  00067A  EC4B  F005         	call	_flashSetAddress	;wreg free
   400                           
   401                           ;Main.c: 45: for(i = 0 ; i < 15 ; i++){
   402  00067E  0E00               	movlw	0
   403  000680  6E37               	movwf	main@i+1,c
   404  000682  0E00               	movlw	0
   405  000684  6E36               	movwf	main@i,c
   406  000686  0E0F               	movlw	15
   407  000688  5C36               	subwf	main@i,w,c
   408  00068A  0E00               	movlw	0
   409  00068C  5837               	subwfb	main@i+1,w,c
   410  00068E  B0D8               	btfsc	status,0,c
   411  000690  D00D               	goto	l1243
   412                           
   413                           ;Main.c: 46: flashWriteData(data);
   414  000692  C034  F012         	movff	main@data,flashWriteData@data
   415  000696  C035  F013         	movff	main@data+1,flashWriteData@data+1
   416  00069A  6A14               	clrf	flashWriteData@data+2,c
   417  00069C  6A15               	clrf	flashWriteData@data+3,c
   418  00069E  ECE7  F006         	call	_flashWriteData	;wreg free
   419                           
   420                           ;Main.c: 47: data++;
   421  0006A2  4A34               	infsnz	main@data,f,c
   422  0006A4  2A35               	incf	main@data+1,f,c
   423  0006A6  4A36               	infsnz	main@i,f,c
   424  0006A8  2A37               	incf	main@i+1,f,c
   425  0006AA  D7ED               	goto	L1
   426  0006AC                     l1243:
   427                           
   428                           ;Main.c: 48: }
   429                           ;Main.c: 49: flashWriteAndProgram(data);
   430  0006AC  C034  F012         	movff	main@data,flashWriteAndProgram@data
   431  0006B0  C035  F013         	movff	main@data+1,flashWriteAndProgram@data+1
   432  0006B4  6A14               	clrf	flashWriteAndProgram@data+2,c
   433  0006B6  6A15               	clrf	flashWriteAndProgram@data+3,c
   434  0006B8  ECBD  F005         	call	_flashWriteAndProgram	;wreg free
   435                           
   436                           ;Main.c: 51: for(i = 0 ; i < 15 ; i++){
   437  0006BC  0E00               	movlw	0
   438  0006BE  6E37               	movwf	main@i+1,c
   439  0006C0  0E00               	movlw	0
   440  0006C2  6E36               	movwf	main@i,c
   441  0006C4  0E0F               	movlw	15
   442  0006C6  5C36               	subwf	main@i,w,c
   443  0006C8  0E00               	movlw	0
   444  0006CA  5837               	subwfb	main@i+1,w,c
   445  0006CC  B0D8               	btfsc	status,0,c
   446  0006CE  D00D               	goto	l1259
   447                           
   448                           ;Main.c: 52: flashWriteData(data);
   449  0006D0  C034  F012         	movff	main@data,flashWriteData@data
   450  0006D4  C035  F013         	movff	main@data+1,flashWriteData@data+1
   451  0006D8  6A14               	clrf	flashWriteData@data+2,c
   452  0006DA  6A15               	clrf	flashWriteData@data+3,c
   453  0006DC  ECE7  F006         	call	_flashWriteData	;wreg free
   454                           
   455                           ;Main.c: 53: data++;
   456  0006E0  4A34               	infsnz	main@data,f,c
   457  0006E2  2A35               	incf	main@data+1,f,c
   458  0006E4  4A36               	infsnz	main@i,f,c
   459  0006E6  2A37               	incf	main@i+1,f,c
   460  0006E8  D7ED               	goto	L2
   461  0006EA                     l1259:
   462                           
   463                           ;Main.c: 54: }
   464                           ;Main.c: 55: flashWriteAndProgram(data);
   465  0006EA  C034  F012         	movff	main@data,flashWriteAndProgram@data
   466  0006EE  C035  F013         	movff	main@data+1,flashWriteAndProgram@data+1
   467  0006F2  6A14               	clrf	flashWriteAndProgram@data+2,c
   468  0006F4  6A15               	clrf	flashWriteAndProgram@data+3,c
   469  0006F6  ECBD  F005         	call	_flashWriteAndProgram	;wreg free
   470                           
   471                           ;Main.c: 58: flashSetAddress(0x000000);
   472  0006FA  0E00               	movlw	0
   473  0006FC  6E12               	movwf	flashSetAddress@address,c
   474  0006FE  0E00               	movlw	0
   475  000700  6E13               	movwf	flashSetAddress@address+1,c
   476  000702  0E00               	movlw	0
   477  000704  6E14               	movwf	flashSetAddress@address+2,c
   478  000706  0E00               	movlw	0
   479  000708  6E15               	movwf	flashSetAddress@address+3,c
   480  00070A  EC4B  F005         	call	_flashSetAddress	;wreg free
   481                           
   482                           ;Main.c: 59: for(i = 0 ; i < 16 ; i++){
   483  00070E  0E00               	movlw	0
   484  000710  6E37               	movwf	main@i+1,c
   485  000712  0E00               	movlw	0
   486  000714  6E36               	movwf	main@i,c
   487  000716  0E10               	movlw	16
   488  000718  5C36               	subwf	main@i,w,c
   489  00071A  0E00               	movlw	0
   490  00071C  5837               	subwfb	main@i+1,w,c
   491  00071E  B0D8               	btfsc	status,0,c
   492  000720  D021               	goto	l1273
   493                           
   494                           ;Main.c: 60: a = flashRead16Bits();
   495  000722  EC97  F006         	call	_flashRead16Bits	;wreg free
   496  000726  C013  F02E         	movff	?_flashRead16Bits,main@a
   497  00072A  C014  F02F         	movff	?_flashRead16Bits+1,main@a+1
   498                           
   499                           ;Main.c: 61: b = flashRead16Bits();
   500  00072E  EC97  F006         	call	_flashRead16Bits	;wreg free
   501  000732  C013  F026         	movff	?_flashRead16Bits,main@b
   502  000736  C014  F027         	movff	?_flashRead16Bits+1,main@b+1
   503                           
   504                           ;Main.c: 62: c = flashRead16Bits();
   505  00073A  EC97  F006         	call	_flashRead16Bits	;wreg free
   506  00073E  C013  F028         	movff	?_flashRead16Bits,main@c
   507  000742  C014  F029         	movff	?_flashRead16Bits+1,main@c+1
   508                           
   509                           ;Main.c: 63: d = flashRead16Bits();
   510  000746  EC97  F006         	call	_flashRead16Bits	;wreg free
   511  00074A  C013  F02A         	movff	?_flashRead16Bits,main@d
   512  00074E  C014  F02B         	movff	?_flashRead16Bits+1,main@d+1
   513                           
   514                           ;Main.c: 64: e = flashRead16Bits();
   515  000752  EC97  F006         	call	_flashRead16Bits	;wreg free
   516  000756  C013  F02C         	movff	?_flashRead16Bits,main@e
   517  00075A  C014  F02D         	movff	?_flashRead16Bits+1,main@e+1
   518  00075E  4A36               	infsnz	main@i,f,c
   519  000760  2A37               	incf	main@i+1,f,c
   520  000762  D7D9               	goto	L3
   521  000764                     l1273:
   522                           
   523                           ;Main.c: 66: }
   524                           ;Main.c: 67: flashSetAddress(address);
   525  000764  C030  F012         	movff	main@address,flashSetAddress@address
   526  000768  C031  F013         	movff	main@address+1,flashSetAddress@address+1
   527  00076C  C032  F014         	movff	main@address+2,flashSetAddress@address+2
   528  000770  C033  F015         	movff	main@address+3,flashSetAddress@address+3
   529  000774  EC4B  F005         	call	_flashSetAddress	;wreg free
   530                           
   531                           ;Main.c: 68: writeICSP(0x0, 0x84a6);
   532  000778  0E00               	movlw	0
   533  00077A  6E0F               	movwf	writeICSP@commandByte+1,c
   534  00077C  0E00               	movlw	0
   535  00077E  6E0E               	movwf	writeICSP@commandByte,c
   536  000780  0E84               	movlw	132
   537  000782  6E11               	movwf	writeICSP@dataBytes+1,c
   538  000784  0EA6               	movlw	166
   539  000786  6E10               	movwf	writeICSP@dataBytes,c
   540  000788  ECC3  F006         	call	_writeICSP	;wreg free
   541                           
   542                           ;Main.c: 69: writeICSP(0x0, 0x88a6);
   543  00078C  0E00               	movlw	0
   544  00078E  6E0F               	movwf	writeICSP@commandByte+1,c
   545  000790  0E00               	movlw	0
   546  000792  6E0E               	movwf	writeICSP@commandByte,c
   547  000794  0E88               	movlw	136
   548  000796  6E11               	movwf	writeICSP@dataBytes+1,c
   549  000798  0EA6               	movlw	166
   550  00079A  6E10               	movwf	writeICSP@dataBytes,c
   551  00079C  ECC3  F006         	call	_writeICSP	;wreg free
   552                           
   553                           ;Main.c: 70: writeICSP(0x0, 0x82a6);
   554  0007A0  0E00               	movlw	0
   555  0007A2  6E0F               	movwf	writeICSP@commandByte+1,c
   556  0007A4  0E00               	movlw	0
   557  0007A6  6E0E               	movwf	writeICSP@commandByte,c
   558  0007A8  0E82               	movlw	130
   559  0007AA  6E11               	movwf	writeICSP@dataBytes+1,c
   560  0007AC  0EA6               	movlw	166
   561  0007AE  6E10               	movwf	writeICSP@dataBytes,c
   562  0007B0  ECC3  F006         	call	_writeICSP	;wreg free
   563                           
   564                           ;Main.c: 71: writeBits(0x0, 3);
   565  0007B4  0E00               	movlw	0
   566  0007B6  6E06               	movwf	writeBits@pattern+1,c
   567  0007B8  0E00               	movlw	0
   568  0007BA  6E05               	movwf	writeBits@pattern,c
   569  0007BC  0E00               	movlw	0
   570  0007BE  6E08               	movwf	writeBits@bitsToWrite+1,c
   571  0007C0  0E03               	movlw	3
   572  0007C2  6E07               	movwf	writeBits@bitsToWrite,c
   573  0007C4  EC75  F006         	call	_writeBits	;wreg free
   574                           
   575                           ;Main.c: 72: PGC_high();
   576  0007C8  EC45  F007         	call	_PGC_high	;wreg free
   577                           
   578                           ;Main.c: 73: PGD_low();
   579  0007CC  EC2B  F007         	call	_PGD_low	;wreg free
   580                           
   581                           ;Main.c: 74: for(i = 0; i < 25 ; i++){}
   582  0007D0  0E00               	movlw	0
   583  0007D2  6E37               	movwf	main@i+1,c
   584  0007D4  0E00               	movlw	0
   585  0007D6  6E36               	movwf	main@i,c
   586  0007D8  0E19               	movlw	25
   587  0007DA  5C36               	subwf	main@i,w,c
   588  0007DC  0E00               	movlw	0
   589  0007DE  5837               	subwfb	main@i+1,w,c
   590  0007E0  B0D8               	btfsc	status,0,c
   591  0007E2  D003               	goto	l1289
   592  0007E4  4A36               	infsnz	main@i,f,c
   593  0007E6  2A37               	incf	main@i+1,f,c
   594  0007E8  D7F7               	goto	L4
   595  0007EA                     l1289:
   596                           
   597                           ;Main.c: 75: PGC_low();
   598  0007EA  EC43  F007         	call	_PGC_low	;wreg free
   599                           
   600                           ;Main.c: 76: for(i = 0; i < 25 ; i++){}
   601  0007EE  0E00               	movlw	0
   602  0007F0  6E37               	movwf	main@i+1,c
   603  0007F2  0E00               	movlw	0
   604  0007F4  6E36               	movwf	main@i,c
   605  0007F6  0E19               	movlw	25
   606  0007F8  5C36               	subwf	main@i,w,c
   607  0007FA  0E00               	movlw	0
   608  0007FC  5837               	subwfb	main@i+1,w,c
   609  0007FE  B0D8               	btfsc	status,0,c
   610  000800  D003               	goto	l1301
   611  000802  4A36               	infsnz	main@i,f,c
   612  000804  2A37               	incf	main@i+1,f,c
   613  000806  D7F7               	goto	L5
   614  000808                     l1301:
   615                           
   616                           ;Main.c: 77: writeBits(0x0, 16);
   617  000808  0E00               	movlw	0
   618  00080A  6E06               	movwf	writeBits@pattern+1,c
   619  00080C  0E00               	movlw	0
   620  00080E  6E05               	movwf	writeBits@pattern,c
   621  000810  0E00               	movlw	0
   622  000812  6E08               	movwf	writeBits@bitsToWrite+1,c
   623  000814  0E10               	movlw	16
   624  000816  6E07               	movwf	writeBits@bitsToWrite,c
   625  000818  EC75  F006         	call	_writeBits	;wreg free
   626                           
   627                           ;Main.c: 78: flashSetAddress(address);
   628  00081C  C030  F012         	movff	main@address,flashSetAddress@address
   629  000820  C031  F013         	movff	main@address+1,flashSetAddress@address+1
   630  000824  C032  F014         	movff	main@address+2,flashSetAddress@address+2
   631  000828  C033  F015         	movff	main@address+3,flashSetAddress@address+3
   632  00082C  EC4B  F005         	call	_flashSetAddress	;wreg free
   633                           
   634                           ;Main.c: 79: for(i = 0 ; i <15 ; i++){
   635  000830  0E00               	movlw	0
   636  000832  6E37               	movwf	main@i+1,c
   637  000834  0E00               	movlw	0
   638  000836  6E36               	movwf	main@i,c
   639  000838  0E0F               	movlw	15
   640  00083A  5C36               	subwf	main@i,w,c
   641  00083C  0E00               	movlw	0
   642  00083E  5837               	subwfb	main@i+1,w,c
   643  000840  B0D8               	btfsc	status,0,c
   644  000842  D00D               	goto	l1315
   645                           
   646                           ;Main.c: 80: flashWriteData(0x6666);
   647  000844  0E66               	movlw	102
   648  000846  6E12               	movwf	flashWriteData@data,c
   649  000848  0E66               	movlw	102
   650  00084A  6E13               	movwf	flashWriteData@data+1,c
   651  00084C  0E00               	movlw	0
   652  00084E  6E14               	movwf	flashWriteData@data+2,c
   653  000850  0E00               	movlw	0
   654  000852  6E15               	movwf	flashWriteData@data+3,c
   655  000854  ECE7  F006         	call	_flashWriteData	;wreg free
   656  000858  4A36               	infsnz	main@i,f,c
   657  00085A  2A37               	incf	main@i+1,f,c
   658  00085C  D7ED               	goto	L6
   659  00085E                     l1315:
   660                           
   661                           ;Main.c: 81: }
   662                           ;Main.c: 82: flashWriteAndProgram(0x8778);
   663  00085E  0E78               	movlw	120
   664  000860  6E12               	movwf	flashWriteAndProgram@data,c
   665  000862  0E87               	movlw	135
   666  000864  6E13               	movwf	flashWriteAndProgram@data+1,c
   667  000866  0E00               	movlw	0
   668  000868  6E14               	movwf	flashWriteAndProgram@data+2,c
   669  00086A  0E00               	movlw	0
   670  00086C  6E15               	movwf	flashWriteAndProgram@data+3,c
   671  00086E  ECBD  F005         	call	_flashWriteAndProgram	;wreg free
   672                           
   673                           ;Main.c: 83: writeBits(0x0, 3);
   674  000872  0E00               	movlw	0
   675  000874  6E06               	movwf	writeBits@pattern+1,c
   676  000876  0E00               	movlw	0
   677  000878  6E05               	movwf	writeBits@pattern,c
   678  00087A  0E00               	movlw	0
   679  00087C  6E08               	movwf	writeBits@bitsToWrite+1,c
   680  00087E  0E03               	movlw	3
   681  000880  6E07               	movwf	writeBits@bitsToWrite,c
   682  000882  EC75  F006         	call	_writeBits	;wreg free
   683                           
   684                           ;Main.c: 84: PGC_high();
   685  000886  EC45  F007         	call	_PGC_high	;wreg free
   686                           
   687                           ;Main.c: 85: PGD_low();
   688  00088A  EC2B  F007         	call	_PGD_low	;wreg free
   689                           
   690                           ;Main.c: 86: for(i = 0; i < 25 ; i++){}
   691  00088E  0E00               	movlw	0
   692  000890  6E37               	movwf	main@i+1,c
   693  000892  0E00               	movlw	0
   694  000894  6E36               	movwf	main@i,c
   695  000896  0E19               	movlw	25
   696  000898  5C36               	subwf	main@i,w,c
   697  00089A  0E00               	movlw	0
   698  00089C  5837               	subwfb	main@i+1,w,c
   699  00089E  B0D8               	btfsc	status,0,c
   700  0008A0  D003               	goto	l1331
   701  0008A2  4A36               	infsnz	main@i,f,c
   702  0008A4  2A37               	incf	main@i+1,f,c
   703  0008A6  D7F7               	goto	L7
   704  0008A8                     l1331:
   705                           
   706                           ;Main.c: 87: PGC_low();
   707  0008A8  EC43  F007         	call	_PGC_low	;wreg free
   708                           
   709                           ;Main.c: 88: for(i = 0; i < 25 ; i++){}
   710  0008AC  0E00               	movlw	0
   711  0008AE  6E37               	movwf	main@i+1,c
   712  0008B0  0E00               	movlw	0
   713  0008B2  6E36               	movwf	main@i,c
   714  0008B4  0E19               	movlw	25
   715  0008B6  5C36               	subwf	main@i,w,c
   716  0008B8  0E00               	movlw	0
   717  0008BA  5837               	subwfb	main@i+1,w,c
   718  0008BC  B0D8               	btfsc	status,0,c
   719  0008BE  D003               	goto	l1343
   720  0008C0  4A36               	infsnz	main@i,f,c
   721  0008C2  2A37               	incf	main@i+1,f,c
   722  0008C4  D7F7               	goto	L8
   723  0008C6                     l1343:
   724                           
   725                           ;Main.c: 89: writeICSP(0x0, 0x94a6);
   726  0008C6  0E00               	movlw	0
   727  0008C8  6E0F               	movwf	writeICSP@commandByte+1,c
   728  0008CA  0E00               	movlw	0
   729  0008CC  6E0E               	movwf	writeICSP@commandByte,c
   730  0008CE  0E94               	movlw	148
   731  0008D0  6E11               	movwf	writeICSP@dataBytes+1,c
   732  0008D2  0EA6               	movlw	166
   733  0008D4  6E10               	movwf	writeICSP@dataBytes,c
   734  0008D6  ECC3  F006         	call	_writeICSP	;wreg free
   735                           
   736                           ;Main.c: 91: flashSetAddress(0x000000);
   737  0008DA  0E00               	movlw	0
   738  0008DC  6E12               	movwf	flashSetAddress@address,c
   739  0008DE  0E00               	movlw	0
   740  0008E0  6E13               	movwf	flashSetAddress@address+1,c
   741  0008E2  0E00               	movlw	0
   742  0008E4  6E14               	movwf	flashSetAddress@address+2,c
   743  0008E6  0E00               	movlw	0
   744  0008E8  6E15               	movwf	flashSetAddress@address+3,c
   745  0008EA  EC4B  F005         	call	_flashSetAddress	;wreg free
   746                           
   747                           ;Main.c: 92: for(i = 0 ; i < 17 ; i++){
   748  0008EE  0E00               	movlw	0
   749  0008F0  6E37               	movwf	main@i+1,c
   750  0008F2  0E00               	movlw	0
   751  0008F4  6E36               	movwf	main@i,c
   752  0008F6  0E11               	movlw	17
   753  0008F8  5C36               	subwf	main@i,w,c
   754  0008FA  0E00               	movlw	0
   755  0008FC  5837               	subwfb	main@i+1,w,c
   756  0008FE  B0D8               	btfsc	status,0,c
   757  000900  D009               	goto	l1357
   758                           
   759                           ;Main.c: 93: a = flashRead16Bits();
   760  000902  EC97  F006         	call	_flashRead16Bits	;wreg free
   761  000906  C013  F02E         	movff	?_flashRead16Bits,main@a
   762  00090A  C014  F02F         	movff	?_flashRead16Bits+1,main@a+1
   763  00090E  4A36               	infsnz	main@i,f,c
   764  000910  2A37               	incf	main@i+1,f,c
   765  000912  D7F1               	goto	L9
   766  000914                     l1357:
   767                           
   768                           ;Main.c: 98: exit_HVP();
   769  000914  EC12  F007         	call	_exit_HVP	;wreg free
   770  000918                     l221:
   771  000918  D7FF               	goto	l221
   772  00091A                     __end_of_main:
   773                           	opt stack 0
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           status	equ	0xFD8
   777                           
   778 ;; *************** function _trisInit *****************
   779 ;; Defined at:
   780 ;;		line 21 in file "../src/PIC18/Main.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;		None
   783 ;; Auto vars:     Size  Location     Type
   784 ;;		None
   785 ;; Return value:  Size  Location     Type
   786 ;;		None               void
   787 ;; Registers used:
   788 ;;		None
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   794 ;;      Params:         0       0       0       0       0       0       0
   795 ;;      Locals:         0       0       0       0       0       0       0
   796 ;;      Temps:          0       0       0       0       0       0       0
   797 ;;      Totals:         0       0       0       0       0       0       0
   798 ;;Total ram usage:        0 bytes
   799 ;; Hardware stack levels used:    1
   800 ;; This function calls:
   801 ;;		Nothing
   802 ;; This function is called by:
   803 ;;		_main
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           	psect	text1
   808  000E70                     __ptext1:
   809                           	opt stack 0
   810  000E70                     _trisInit:
   811                           	opt stack 30
   812                           
   813                           ;Main.c: 22: TRISDbits.TRISD4 = 0;
   814                           
   815                           ;incstack = 0
   816  000E70  9895               	bcf	3989,4,c	;volatile
   817                           
   818                           ;Main.c: 23: TRISDbits.TRISD5 = 0;
   819  000E72  9A95               	bcf	3989,5,c	;volatile
   820                           
   821                           ;Main.c: 24: TRISDbits.TRISD6 = 0;
   822  000E74  9C95               	bcf	3989,6,c	;volatile
   823                           
   824                           ;Main.c: 25: TRISDbits.TRISD7 = 0;
   825  000E76  9E95               	bcf	3989,7,c	;volatile
   826  000E78  0012               	return	
   827  000E7A                     __end_of_trisInit:
   828                           	opt stack 0
   829                           tblptru	equ	0xFF8
   830                           tblptrh	equ	0xFF7
   831                           status	equ	0xFD8
   832                           
   833 ;; *************** function _flashWriteData *****************
   834 ;; Defined at:
   835 ;;		line 135 in file "../src/PIC18/FlashProg.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;  data            4   17[COMRAM] unsigned long 
   838 ;; Auto vars:     Size  Location     Type
   839 ;;		None
   840 ;; Return value:  Size  Location     Type
   841 ;;		None               void
   842 ;; Registers used:
   843 ;;		wreg, status,2, status,0, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   849 ;;      Params:         4       0       0       0       0       0       0
   850 ;;      Locals:         0       0       0       0       0       0       0
   851 ;;      Temps:          0       0       0       0       0       0       0
   852 ;;      Totals:         4       0       0       0       0       0       0
   853 ;;Total ram usage:        4 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    4
   856 ;; This function calls:
   857 ;;		_writeICSP
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           	psect	text2
   864  000DCE                     __ptext2:
   865                           	opt stack 0
   866  000DCE                     _flashWriteData:
   867                           	opt stack 26
   868                           
   869                           ;FlashProg.c: 136: writeICSP(0xd, data);
   870                           
   871                           ;incstack = 0
   872  000DCE  0E00               	movlw	0
   873  000DD0  6E0F               	movwf	writeICSP@commandByte+1,c
   874  000DD2  0E0D               	movlw	13
   875  000DD4  6E0E               	movwf	writeICSP@commandByte,c
   876  000DD6  C012  F010         	movff	flashWriteData@data,writeICSP@dataBytes
   877  000DDA  C013  F011         	movff	flashWriteData@data+1,writeICSP@dataBytes+1
   878  000DDE  ECC3  F006         	call	_writeICSP	;wreg free
   879  000DE2  0012               	return	
   880  000DE4                     __end_of_flashWriteData:
   881                           	opt stack 0
   882                           tblptru	equ	0xFF8
   883                           tblptrh	equ	0xFF7
   884                           status	equ	0xFD8
   885                           
   886 ;; *************** function _flashWriteAndProgram *****************
   887 ;; Defined at:
   888 ;;		line 140 in file "../src/PIC18/FlashProg.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  data            4   17[COMRAM] unsigned long 
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  i               2   21[COMRAM] int 
   893 ;; Return value:  Size  Location     Type
   894 ;;		None               void
   895 ;; Registers used:
   896 ;;		wreg, status,2, status,0, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   902 ;;      Params:         4       0       0       0       0       0       0
   903 ;;      Locals:         2       0       0       0       0       0       0
   904 ;;      Temps:          0       0       0       0       0       0       0
   905 ;;      Totals:         6       0       0       0       0       0       0
   906 ;;Total ram usage:        6 bytes
   907 ;; Hardware stack levels used:    1
   908 ;; Hardware stack levels required when called:    4
   909 ;; This function calls:
   910 ;;		_PGC_high
   911 ;;		_PGC_low
   912 ;;		_PGD_low
   913 ;;		_writeBits
   914 ;;		_writeICSP
   915 ;; This function is called by:
   916 ;;		_main
   917 ;;		_flashWriteBlock
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	text3
   922  000B7A                     __ptext3:
   923                           	opt stack 0
   924  000B7A                     _flashWriteAndProgram:
   925                           	opt stack 26
   926                           
   927                           ;FlashProg.c: 141: int i;
   928                           ;FlashProg.c: 144: writeICSP(0xf, data);
   929                           
   930                           ;incstack = 0
   931  000B7A  0E00               	movlw	0
   932  000B7C  6E0F               	movwf	writeICSP@commandByte+1,c
   933  000B7E  0E0F               	movlw	15
   934  000B80  6E0E               	movwf	writeICSP@commandByte,c
   935  000B82  C012  F010         	movff	flashWriteAndProgram@data,writeICSP@dataBytes
   936  000B86  C013  F011         	movff	flashWriteAndProgram@data+1,writeICSP@dataBytes+1
   937  000B8A  ECC3  F006         	call	_writeICSP	;wreg free
   938                           
   939                           ;FlashProg.c: 146: writeBits(0x0, 3);
   940  000B8E  0E00               	movlw	0
   941  000B90  6E06               	movwf	writeBits@pattern+1,c
   942  000B92  0E00               	movlw	0
   943  000B94  6E05               	movwf	writeBits@pattern,c
   944  000B96  0E00               	movlw	0
   945  000B98  6E08               	movwf	writeBits@bitsToWrite+1,c
   946  000B9A  0E03               	movlw	3
   947  000B9C  6E07               	movwf	writeBits@bitsToWrite,c
   948  000B9E  EC75  F006         	call	_writeBits	;wreg free
   949                           
   950                           ;FlashProg.c: 147: PGC_high();
   951  000BA2  EC45  F007         	call	_PGC_high	;wreg free
   952                           
   953                           ;FlashProg.c: 148: PGD_low();
   954  000BA6  EC2B  F007         	call	_PGD_low	;wreg free
   955                           
   956                           ;FlashProg.c: 149: for(i = 0; i < 25 ; i++){}
   957  000BAA  0E00               	movlw	0
   958  000BAC  6E17               	movwf	flashWriteAndProgram@i+1,c
   959  000BAE  0E00               	movlw	0
   960  000BB0  6E16               	movwf	flashWriteAndProgram@i,c
   961  000BB2  5017               	movf	flashWriteAndProgram@i+1,w,c
   962  000BB4  0A80               	xorlw	128
   963  000BB6  0F80               	addlw	-128
   964  000BB8  0E19               	movlw	25
   965  000BBA  B4D8               	btfsc	status,2,c
   966  000BBC  5C16               	subwf	flashWriteAndProgram@i,w,c
   967  000BBE  B0D8               	btfsc	status,0,c
   968  000BC0  D003               	goto	l1019
   969  000BC2  4A16               	infsnz	flashWriteAndProgram@i,f,c
   970  000BC4  2A17               	incf	flashWriteAndProgram@i+1,f,c
   971  000BC6  D7F5               	goto	L10
   972  000BC8                     l1019:
   973                           
   974                           ;FlashProg.c: 150: PGC_low();
   975  000BC8  EC43  F007         	call	_PGC_low	;wreg free
   976                           
   977                           ;FlashProg.c: 151: for(i = 0; i < 25 ; i++){}
   978  000BCC  0E00               	movlw	0
   979  000BCE  6E17               	movwf	flashWriteAndProgram@i+1,c
   980  000BD0  0E00               	movlw	0
   981  000BD2  6E16               	movwf	flashWriteAndProgram@i,c
   982  000BD4  5017               	movf	flashWriteAndProgram@i+1,w,c
   983  000BD6  0A80               	xorlw	128
   984  000BD8  0F80               	addlw	-128
   985  000BDA  0E19               	movlw	25
   986  000BDC  B4D8               	btfsc	status,2,c
   987  000BDE  5C16               	subwf	flashWriteAndProgram@i,w,c
   988  000BE0  B0D8               	btfsc	status,0,c
   989  000BE2  D003               	goto	l1031
   990  000BE4  4A16               	infsnz	flashWriteAndProgram@i,f,c
   991  000BE6  2A17               	incf	flashWriteAndProgram@i+1,f,c
   992  000BE8  D7F5               	goto	L11
   993  000BEA                     l1031:
   994                           
   995                           ;FlashProg.c: 152: writeBits(0x0, 16);
   996  000BEA  0E00               	movlw	0
   997  000BEC  6E06               	movwf	writeBits@pattern+1,c
   998  000BEE  0E00               	movlw	0
   999  000BF0  6E05               	movwf	writeBits@pattern,c
  1000  000BF2  0E00               	movlw	0
  1001  000BF4  6E08               	movwf	writeBits@bitsToWrite+1,c
  1002  000BF6  0E10               	movlw	16
  1003  000BF8  6E07               	movwf	writeBits@bitsToWrite,c
  1004  000BFA  EC75  F006         	call	_writeBits	;wreg free
  1005  000BFE  0012               	return	
  1006  000C00                     __end_of_flashWriteAndProgram:
  1007                           	opt stack 0
  1008                           tblptru	equ	0xFF8
  1009                           tblptrh	equ	0xFF7
  1010                           status	equ	0xFD8
  1011                           
  1012 ;; *************** function _flashSetAddress *****************
  1013 ;; Defined at:
  1014 ;;		line 118 in file "../src/PIC18/FlashProg.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;  address         4   17[COMRAM] unsigned long 
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;  lowAddr         4   33[COMRAM] unsigned long 
  1019 ;;  highAddr        4   29[COMRAM] unsigned long 
  1020 ;;  upperAddr       4   25[COMRAM] unsigned long 
  1021 ;; Return value:  Size  Location     Type
  1022 ;;		None               void
  1023 ;; Registers used:
  1024 ;;		wreg, status,2, status,0, cstack
  1025 ;; Tracked objects:
  1026 ;;		On entry : 0/0
  1027 ;;		On exit  : 0/0
  1028 ;;		Unchanged: 0/0
  1029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1030 ;;      Params:         4       0       0       0       0       0       0
  1031 ;;      Locals:        12       0       0       0       0       0       0
  1032 ;;      Temps:          4       0       0       0       0       0       0
  1033 ;;      Totals:        20       0       0       0       0       0       0
  1034 ;;Total ram usage:       20 bytes
  1035 ;; Hardware stack levels used:    1
  1036 ;; Hardware stack levels required when called:    4
  1037 ;; This function calls:
  1038 ;;		_writeICSP
  1039 ;; This function is called by:
  1040 ;;		_main
  1041 ;;		_flashReadData
  1042 ;;		_flashWriteBlock
  1043 ;;		_rowErase
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text4
  1048  000A96                     __ptext4:
  1049                           	opt stack 0
  1050  000A96                     _flashSetAddress:
  1051                           	opt stack 26
  1052                           
  1053                           ;FlashProg.c: 119: uint32 upperAddr;
  1054                           ;FlashProg.c: 120: uint32 highAddr;
  1055                           ;FlashProg.c: 121: uint32 lowAddr;
  1056                           ;FlashProg.c: 123: lowAddr = (address&0x0000ff);
  1057                           
  1058                           ;incstack = 0
  1059  000A96  5012               	movf	flashSetAddress@address,w,c
  1060  000A98  6E22               	movwf	flashSetAddress@lowAddr,c
  1061  000A9A  6A23               	clrf	flashSetAddress@lowAddr+1,c
  1062  000A9C  6A24               	clrf	flashSetAddress@lowAddr+2,c
  1063  000A9E  6A25               	clrf	flashSetAddress@lowAddr+3,c
  1064                           
  1065                           ;FlashProg.c: 124: highAddr = ((address>>8)&0x0000ff);
  1066  000AA0  C012  F016         	movff	flashSetAddress@address,??_flashSetAddress
  1067  000AA4  C013  F017         	movff	flashSetAddress@address+1,??_flashSetAddress+1
  1068  000AA8  C014  F018         	movff	flashSetAddress@address+2,??_flashSetAddress+2
  1069  000AAC  C015  F019         	movff	flashSetAddress@address+3,??_flashSetAddress+3
  1070  000AB0  C017  F016         	movff	??_flashSetAddress+1,??_flashSetAddress
  1071  000AB4  C018  F017         	movff	??_flashSetAddress+2,??_flashSetAddress+1
  1072  000AB8  C019  F018         	movff	??_flashSetAddress+3,??_flashSetAddress+2
  1073  000ABC  6A19               	clrf	??_flashSetAddress+3,c
  1074  000ABE  5016               	movf	??_flashSetAddress,w,c
  1075  000AC0  6E1E               	movwf	flashSetAddress@highAddr,c
  1076  000AC2  6A1F               	clrf	flashSetAddress@highAddr+1,c
  1077  000AC4  6A20               	clrf	flashSetAddress@highAddr+2,c
  1078  000AC6  6A21               	clrf	flashSetAddress@highAddr+3,c
  1079                           
  1080                           ;FlashProg.c: 125: upperAddr = ((address>>16)&0x0000ff);
  1081  000AC8  C012  F016         	movff	flashSetAddress@address,??_flashSetAddress
  1082  000ACC  C013  F017         	movff	flashSetAddress@address+1,??_flashSetAddress+1
  1083  000AD0  C014  F018         	movff	flashSetAddress@address+2,??_flashSetAddress+2
  1084  000AD4  C015  F019         	movff	flashSetAddress@address+3,??_flashSetAddress+3
  1085  000AD8  0E11               	movlw	17
  1086  000ADA  D005               	goto	u90
  1087  000ADC                     u95:
  1088  000ADC  90D8               	bcf	status,0,c
  1089  000ADE  3219               	rrcf	??_flashSetAddress+3,f,c
  1090  000AE0  3218               	rrcf	??_flashSetAddress+2,f,c
  1091  000AE2  3217               	rrcf	??_flashSetAddress+1,f,c
  1092  000AE4  3216               	rrcf	??_flashSetAddress,f,c
  1093  000AE6                     u90:
  1094  000AE6  2EE8               	decfsz	wreg,f,c
  1095  000AE8  D7F9               	goto	u95
  1096  000AEA  5016               	movf	??_flashSetAddress,w,c
  1097  000AEC  6E1A               	movwf	flashSetAddress@upperAddr,c
  1098  000AEE  6A1B               	clrf	flashSetAddress@upperAddr+1,c
  1099  000AF0  6A1C               	clrf	flashSetAddress@upperAddr+2,c
  1100  000AF2  6A1D               	clrf	flashSetAddress@upperAddr+3,c
  1101                           
  1102                           ;FlashProg.c: 127: writeICSP(0x0, 0x0e00|upperAddr);
  1103  000AF4  0E00               	movlw	0
  1104  000AF6  6E0F               	movwf	writeICSP@commandByte+1,c
  1105  000AF8  0E00               	movlw	0
  1106  000AFA  6E0E               	movwf	writeICSP@commandByte,c
  1107  000AFC  0E00               	movlw	0
  1108  000AFE  101A               	iorwf	flashSetAddress@upperAddr,w,c
  1109  000B00  6E10               	movwf	writeICSP@dataBytes,c
  1110  000B02  0E0E               	movlw	14
  1111  000B04  101B               	iorwf	flashSetAddress@upperAddr+1,w,c
  1112  000B06  6E11               	movwf	writeICSP@dataBytes+1,c
  1113  000B08  ECC3  F006         	call	_writeICSP	;wreg free
  1114                           
  1115                           ;FlashProg.c: 128: writeICSP(0x0, 0x6ef8);
  1116  000B0C  0E00               	movlw	0
  1117  000B0E  6E0F               	movwf	writeICSP@commandByte+1,c
  1118  000B10  0E00               	movlw	0
  1119  000B12  6E0E               	movwf	writeICSP@commandByte,c
  1120  000B14  0E6E               	movlw	110
  1121  000B16  6E11               	movwf	writeICSP@dataBytes+1,c
  1122  000B18  0EF8               	movlw	248
  1123  000B1A  6E10               	movwf	writeICSP@dataBytes,c
  1124  000B1C  ECC3  F006         	call	_writeICSP	;wreg free
  1125                           
  1126                           ;FlashProg.c: 129: writeICSP(0x0, 0x0e00|highAddr);
  1127  000B20  0E00               	movlw	0
  1128  000B22  6E0F               	movwf	writeICSP@commandByte+1,c
  1129  000B24  0E00               	movlw	0
  1130  000B26  6E0E               	movwf	writeICSP@commandByte,c
  1131  000B28  0E00               	movlw	0
  1132  000B2A  101E               	iorwf	flashSetAddress@highAddr,w,c
  1133  000B2C  6E10               	movwf	writeICSP@dataBytes,c
  1134  000B2E  0E0E               	movlw	14
  1135  000B30  101F               	iorwf	flashSetAddress@highAddr+1,w,c
  1136  000B32  6E11               	movwf	writeICSP@dataBytes+1,c
  1137  000B34  ECC3  F006         	call	_writeICSP	;wreg free
  1138                           
  1139                           ;FlashProg.c: 130: writeICSP(0x0, 0x6ef7);
  1140  000B38  0E00               	movlw	0
  1141  000B3A  6E0F               	movwf	writeICSP@commandByte+1,c
  1142  000B3C  0E00               	movlw	0
  1143  000B3E  6E0E               	movwf	writeICSP@commandByte,c
  1144  000B40  0E6E               	movlw	110
  1145  000B42  6E11               	movwf	writeICSP@dataBytes+1,c
  1146  000B44  0EF7               	movlw	247
  1147  000B46  6E10               	movwf	writeICSP@dataBytes,c
  1148  000B48  ECC3  F006         	call	_writeICSP	;wreg free
  1149                           
  1150                           ;FlashProg.c: 131: writeICSP(0x0, 0x0e00|lowAddr);
  1151  000B4C  0E00               	movlw	0
  1152  000B4E  6E0F               	movwf	writeICSP@commandByte+1,c
  1153  000B50  0E00               	movlw	0
  1154  000B52  6E0E               	movwf	writeICSP@commandByte,c
  1155  000B54  0E00               	movlw	0
  1156  000B56  1022               	iorwf	flashSetAddress@lowAddr,w,c
  1157  000B58  6E10               	movwf	writeICSP@dataBytes,c
  1158  000B5A  0E0E               	movlw	14
  1159  000B5C  1023               	iorwf	flashSetAddress@lowAddr+1,w,c
  1160  000B5E  6E11               	movwf	writeICSP@dataBytes+1,c
  1161  000B60  ECC3  F006         	call	_writeICSP	;wreg free
  1162                           
  1163                           ;FlashProg.c: 132: writeICSP(0x0, 0x6ef6);
  1164  000B64  0E00               	movlw	0
  1165  000B66  6E0F               	movwf	writeICSP@commandByte+1,c
  1166  000B68  0E00               	movlw	0
  1167  000B6A  6E0E               	movwf	writeICSP@commandByte,c
  1168  000B6C  0E6E               	movlw	110
  1169  000B6E  6E11               	movwf	writeICSP@dataBytes+1,c
  1170  000B70  0EF6               	movlw	246
  1171  000B72  6E10               	movwf	writeICSP@dataBytes,c
  1172  000B74  ECC3  F006         	call	_writeICSP	;wreg free
  1173  000B78  0012               	return	
  1174  000B7A                     __end_of_flashSetAddress:
  1175                           	opt stack 0
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           wreg	equ	0xFE8
  1179                           status	equ	0xFD8
  1180                           
  1181 ;; *************** function _flashRead16Bits *****************
  1182 ;; Defined at:
  1183 ;;		line 171 in file "../src/PIC18/FlashProg.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;		None
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;  data            2   22[COMRAM] unsigned int 
  1188 ;;  firstData       2   20[COMRAM] unsigned int 
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  2   18[COMRAM] unsigned int 
  1191 ;; Registers used:
  1192 ;;		wreg, status,2, status,0, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1198 ;;      Params:         2       0       0       0       0       0       0
  1199 ;;      Locals:         4       0       0       0       0       0       0
  1200 ;;      Temps:          0       0       0       0       0       0       0
  1201 ;;      Totals:         6       0       0       0       0       0       0
  1202 ;;Total ram usage:        6 bytes
  1203 ;; Hardware stack levels used:    1
  1204 ;; Hardware stack levels required when called:    4
  1205 ;; This function calls:
  1206 ;;		_readFirstByte
  1207 ;;		_readICSP
  1208 ;; This function is called by:
  1209 ;;		_main
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text5
  1214  000D2E                     __ptext5:
  1215                           	opt stack 0
  1216  000D2E                     _flashRead16Bits:
  1217                           	opt stack 26
  1218                           
  1219                           ;FlashProg.c: 172: uint16 data;
  1220                           ;FlashProg.c: 173: uint16 firstData;
  1221                           ;FlashProg.c: 175: data = readICSP();
  1222                           
  1223                           ;incstack = 0
  1224  000D2E  EC52  F006         	call	_readICSP	;wreg free
  1225  000D32  C00F  F017         	movff	?_readICSP,flashRead16Bits@data
  1226  000D36  C010  F018         	movff	?_readICSP+1,flashRead16Bits@data+1
  1227                           
  1228                           ;FlashProg.c: 176: firstData = readFirstByte();
  1229  000D3A  EC2C  F006         	call	_readFirstByte	;wreg free
  1230  000D3E  C00F  F015         	movff	?_readFirstByte,flashRead16Bits@firstData
  1231  000D42  C010  F016         	movff	?_readFirstByte+1,flashRead16Bits@firstData+1
  1232                           
  1233                           ;FlashProg.c: 178: data = firstData|data;
  1234  000D46  5017               	movf	flashRead16Bits@data,w,c
  1235  000D48  1015               	iorwf	flashRead16Bits@firstData,w,c
  1236  000D4A  6E17               	movwf	flashRead16Bits@data,c
  1237  000D4C  5018               	movf	flashRead16Bits@data+1,w,c
  1238  000D4E  1016               	iorwf	flashRead16Bits@firstData+1,w,c
  1239  000D50  6E18               	movwf	flashRead16Bits@data+1,c
  1240                           
  1241                           ;FlashProg.c: 180: return data;
  1242  000D52  C017  F013         	movff	flashRead16Bits@data,?_flashRead16Bits
  1243  000D56  C018  F014         	movff	flashRead16Bits@data+1,?_flashRead16Bits+1
  1244  000D5A  0012               	return	
  1245  000D5C                     __end_of_flashRead16Bits:
  1246                           	opt stack 0
  1247                           tblptru	equ	0xFF8
  1248                           tblptrh	equ	0xFF7
  1249                           wreg	equ	0xFE8
  1250                           status	equ	0xFD8
  1251                           
  1252 ;; *************** function _readICSP *****************
  1253 ;; Defined at:
  1254 ;;		line 25 in file "../src/PIC18/ICSP.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;		None
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;  data            2   16[COMRAM] unsigned int 
  1259 ;; Return value:  Size  Location     Type
  1260 ;;                  2   14[COMRAM] unsigned int 
  1261 ;; Registers used:
  1262 ;;		wreg, status,2, status,0, cstack
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 0/0
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1268 ;;      Params:         2       0       0       0       0       0       0
  1269 ;;      Locals:         2       0       0       0       0       0       0
  1270 ;;      Temps:          0       0       0       0       0       0       0
  1271 ;;      Totals:         4       0       0       0       0       0       0
  1272 ;;Total ram usage:        4 bytes
  1273 ;; Hardware stack levels used:    1
  1274 ;; Hardware stack levels required when called:    3
  1275 ;; This function calls:
  1276 ;;		_readBits
  1277 ;;		_writeBits
  1278 ;; This function is called by:
  1279 ;;		_flashRead16Bits
  1280 ;;		_readDeviceID1
  1281 ;;		_readDeviceID2
  1282 ;;		_flashRead8Bits
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           	psect	text6
  1287  000CA4                     __ptext6:
  1288                           	opt stack 0
  1289  000CA4                     _readICSP:
  1290                           	opt stack 26
  1291                           
  1292                           ;ICSP.c: 26: uint16 data;
  1293                           ;ICSP.c: 27: writeBits(9, 4);
  1294                           
  1295                           ;incstack = 0
  1296  000CA4  0E00               	movlw	0
  1297  000CA6  6E06               	movwf	writeBits@pattern+1,c
  1298  000CA8  0E09               	movlw	9
  1299  000CAA  6E05               	movwf	writeBits@pattern,c
  1300  000CAC  0E00               	movlw	0
  1301  000CAE  6E08               	movwf	writeBits@bitsToWrite+1,c
  1302  000CB0  0E04               	movlw	4
  1303  000CB2  6E07               	movwf	writeBits@bitsToWrite,c
  1304  000CB4  EC75  F006         	call	_writeBits	;wreg free
  1305                           
  1306                           ;ICSP.c: 28: writeBits(0, 8);
  1307  000CB8  0E00               	movlw	0
  1308  000CBA  6E06               	movwf	writeBits@pattern+1,c
  1309  000CBC  0E00               	movlw	0
  1310  000CBE  6E05               	movwf	writeBits@pattern,c
  1311  000CC0  0E00               	movlw	0
  1312  000CC2  6E08               	movwf	writeBits@bitsToWrite+1,c
  1313  000CC4  0E08               	movlw	8
  1314  000CC6  6E07               	movwf	writeBits@bitsToWrite,c
  1315  000CC8  EC75  F006         	call	_writeBits	;wreg free
  1316                           
  1317                           ;ICSP.c: 29: data = readBits(8);
  1318  000CCC  0E00               	movlw	0
  1319  000CCE  6E09               	movwf	readBits@bitsToRead+1,c
  1320  000CD0  0E08               	movlw	8
  1321  000CD2  6E08               	movwf	readBits@bitsToRead,c
  1322  000CD4  EC00  F006         	call	_readBits	;wreg free
  1323  000CD8  C008  F011         	movff	?_readBits,readICSP@data
  1324  000CDC  C009  F012         	movff	?_readBits+1,readICSP@data+1
  1325                           
  1326                           ;ICSP.c: 31: return data;
  1327  000CE0  C011  F00F         	movff	readICSP@data,?_readICSP
  1328  000CE4  C012  F010         	movff	readICSP@data+1,?_readICSP+1
  1329  000CE8  0012               	return	
  1330  000CEA                     __end_of_readICSP:
  1331                           	opt stack 0
  1332                           tblptru	equ	0xFF8
  1333                           tblptrh	equ	0xFF7
  1334                           wreg	equ	0xFE8
  1335                           status	equ	0xFD8
  1336                           
  1337 ;; *************** function _readFirstByte *****************
  1338 ;; Defined at:
  1339 ;;		line 34 in file "../src/PIC18/ICSP.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;		None
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;  data            2   16[COMRAM] unsigned int 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  2   14[COMRAM] unsigned int 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1353 ;;      Params:         2       0       0       0       0       0       0
  1354 ;;      Locals:         2       0       0       0       0       0       0
  1355 ;;      Temps:          0       0       0       0       0       0       0
  1356 ;;      Totals:         4       0       0       0       0       0       0
  1357 ;;Total ram usage:        4 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    3
  1360 ;; This function calls:
  1361 ;;		_readBits
  1362 ;;		_writeBits
  1363 ;; This function is called by:
  1364 ;;		_flashRead16Bits
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text7
  1369  000C58                     __ptext7:
  1370                           	opt stack 0
  1371  000C58                     _readFirstByte:
  1372                           	opt stack 26
  1373                           
  1374                           ;ICSP.c: 35: uint16 data;
  1375                           ;ICSP.c: 36: writeBits(9, 4);
  1376                           
  1377                           ;incstack = 0
  1378  000C58  0E00               	movlw	0
  1379  000C5A  6E06               	movwf	writeBits@pattern+1,c
  1380  000C5C  0E09               	movlw	9
  1381  000C5E  6E05               	movwf	writeBits@pattern,c
  1382  000C60  0E00               	movlw	0
  1383  000C62  6E08               	movwf	writeBits@bitsToWrite+1,c
  1384  000C64  0E04               	movlw	4
  1385  000C66  6E07               	movwf	writeBits@bitsToWrite,c
  1386  000C68  EC75  F006         	call	_writeBits	;wreg free
  1387                           
  1388                           ;ICSP.c: 37: writeBits(0, 8);
  1389  000C6C  0E00               	movlw	0
  1390  000C6E  6E06               	movwf	writeBits@pattern+1,c
  1391  000C70  0E00               	movlw	0
  1392  000C72  6E05               	movwf	writeBits@pattern,c
  1393  000C74  0E00               	movlw	0
  1394  000C76  6E08               	movwf	writeBits@bitsToWrite+1,c
  1395  000C78  0E08               	movlw	8
  1396  000C7A  6E07               	movwf	writeBits@bitsToWrite,c
  1397  000C7C  EC75  F006         	call	_writeBits	;wreg free
  1398                           
  1399                           ;ICSP.c: 38: data = readBits(8);
  1400  000C80  0E00               	movlw	0
  1401  000C82  6E09               	movwf	readBits@bitsToRead+1,c
  1402  000C84  0E08               	movlw	8
  1403  000C86  6E08               	movwf	readBits@bitsToRead,c
  1404  000C88  EC00  F006         	call	_readBits	;wreg free
  1405  000C8C  C008  F011         	movff	?_readBits,readFirstByte@data
  1406  000C90  C009  F012         	movff	?_readBits+1,readFirstByte@data+1
  1407                           
  1408                           ;ICSP.c: 39: data = data<<8;
  1409  000C94  5011               	movf	readFirstByte@data,w,c
  1410  000C96  6E12               	movwf	readFirstByte@data+1,c
  1411  000C98  6A11               	clrf	readFirstByte@data,c
  1412                           
  1413                           ;ICSP.c: 40: return data;
  1414  000C9A  C011  F00F         	movff	readFirstByte@data,?_readFirstByte
  1415  000C9E  C012  F010         	movff	readFirstByte@data+1,?_readFirstByte+1
  1416  000CA2  0012               	return	
  1417  000CA4                     __end_of_readFirstByte:
  1418                           	opt stack 0
  1419                           tblptru	equ	0xFF8
  1420                           tblptrh	equ	0xFF7
  1421                           wreg	equ	0xFE8
  1422                           status	equ	0xFD8
  1423                           
  1424 ;; *************** function _readBits *****************
  1425 ;; Defined at:
  1426 ;;		line 52 in file "../src/PIC18/ICSP.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  bitsToRead      2    7[COMRAM] int 
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;  data            2   12[COMRAM] unsigned int 
  1431 ;;  i               2   10[COMRAM] int 
  1432 ;; Return value:  Size  Location     Type
  1433 ;;                  2    7[COMRAM] unsigned int 
  1434 ;; Registers used:
  1435 ;;		wreg, status,2, status,0, cstack
  1436 ;; Tracked objects:
  1437 ;;		On entry : 0/0
  1438 ;;		On exit  : 0/0
  1439 ;;		Unchanged: 0/0
  1440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1441 ;;      Params:         2       0       0       0       0       0       0
  1442 ;;      Locals:         4       0       0       0       0       0       0
  1443 ;;      Temps:          1       0       0       0       0       0       0
  1444 ;;      Totals:         7       0       0       0       0       0       0
  1445 ;;Total ram usage:        7 bytes
  1446 ;; Hardware stack levels used:    1
  1447 ;; Hardware stack levels required when called:    2
  1448 ;; This function calls:
  1449 ;;		_readBit
  1450 ;; This function is called by:
  1451 ;;		_readICSP
  1452 ;;		_readFirstByte
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           	psect	text8
  1457  000C00                     __ptext8:
  1458                           	opt stack 0
  1459  000C00                     _readBits:
  1460                           	opt stack 26
  1461                           
  1462                           ;ICSP.c: 53: int i=0;
  1463                           
  1464                           ;incstack = 0
  1465  000C00  0E00               	movlw	0
  1466  000C02  6E0C               	movwf	readBits@i+1,c
  1467  000C04  0E00               	movlw	0
  1468  000C06  6E0B               	movwf	readBits@i,c
  1469                           
  1470                           ;ICSP.c: 54: uint16 data = 0;
  1471  000C08  0E00               	movlw	0
  1472  000C0A  6E0E               	movwf	readBits@data+1,c
  1473  000C0C  0E00               	movlw	0
  1474  000C0E  6E0D               	movwf	readBits@data,c
  1475                           
  1476                           ;ICSP.c: 56: (TRISDbits.TRISD4 = 1);
  1477  000C10  8895               	bsf	3989,4,c	;volatile
  1478                           
  1479                           ;ICSP.c: 58: while(i < bitsToRead){
  1480  000C12  D013               	goto	l889
  1481  000C14                     l885:
  1482                           
  1483                           ;ICSP.c: 59: data = (readBit()<< i)|data;
  1484  000C14  C00B  F00A         	movff	readBits@i,??_readBits
  1485  000C18  ECD8  F006         	call	_readBit	;wreg free
  1486  000C1C  2A0A               	incf	??_readBits,f,c
  1487  000C1E  D003               	goto	u54
  1488  000C20                     u55:
  1489  000C20  90D8               	bcf	status,0,c
  1490  000C22  3604               	rlcf	?_readBit,f,c
  1491  000C24  3605               	rlcf	?_readBit+1,f,c
  1492  000C26                     u54:
  1493  000C26  2E0A               	decfsz	??_readBits,f,c
  1494  000C28  D7FB               	goto	u55
  1495  000C2A  500D               	movf	readBits@data,w,c
  1496  000C2C  1004               	iorwf	?_readBit,w,c
  1497  000C2E  6E0D               	movwf	readBits@data,c
  1498  000C30  500E               	movf	readBits@data+1,w,c
  1499  000C32  1005               	iorwf	?_readBit+1,w,c
  1500  000C34  6E0E               	movwf	readBits@data+1,c
  1501                           
  1502                           ;ICSP.c: 60: i++;
  1503  000C36  4A0B               	infsnz	readBits@i,f,c
  1504  000C38  2A0C               	incf	readBits@i+1,f,c
  1505  000C3A                     l889:
  1506  000C3A  500C               	movf	readBits@i+1,w,c
  1507  000C3C  0A80               	xorlw	128
  1508  000C3E  6E0A               	movwf	??_readBits& (0+255),c
  1509  000C40  5008               	movf	readBits@bitsToRead,w,c
  1510  000C42  5C0B               	subwf	readBits@i,w,c
  1511  000C44  5009               	movf	readBits@bitsToRead+1,w,c
  1512  000C46  0A80               	xorlw	128
  1513  000C48  580A               	subwfb	??_readBits& (0+255),w,c
  1514  000C4A  A0D8               	btfss	status,0,c
  1515  000C4C  D7E3               	goto	l885
  1516                           
  1517                           ;ICSP.c: 61: }
  1518                           ;ICSP.c: 62: return data;
  1519  000C4E  C00D  F008         	movff	readBits@data,?_readBits
  1520  000C52  C00E  F009         	movff	readBits@data+1,?_readBits+1
  1521  000C56  0012               	return	
  1522  000C58                     __end_of_readBits:
  1523                           	opt stack 0
  1524                           tblptru	equ	0xFF8
  1525                           tblptrh	equ	0xFF7
  1526                           wreg	equ	0xFE8
  1527                           status	equ	0xFD8
  1528                           
  1529 ;; *************** function _readBit *****************
  1530 ;; Defined at:
  1531 ;;		line 44 in file "../src/PIC18/ICSP.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;		None
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  data            2    5[COMRAM] unsigned int 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  2    3[COMRAM] unsigned int 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1545 ;;      Params:         2       0       0       0       0       0       0
  1546 ;;      Locals:         2       0       0       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0       0       0
  1548 ;;      Totals:         4       0       0       0       0       0       0
  1549 ;;Total ram usage:        4 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    1
  1552 ;; This function calls:
  1553 ;;		_PGC_high
  1554 ;;		_PGC_low
  1555 ;;		_readPGD
  1556 ;; This function is called by:
  1557 ;;		_readBits
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text9
  1562  000DB0                     __ptext9:
  1563                           	opt stack 0
  1564  000DB0                     _readBit:
  1565                           	opt stack 26
  1566                           
  1567                           ;ICSP.c: 45: uint16 data;
  1568                           ;ICSP.c: 46: PGC_high();
  1569                           
  1570                           ;incstack = 0
  1571  000DB0  EC45  F007         	call	_PGC_high	;wreg free
  1572                           
  1573                           ;ICSP.c: 47: data = readPGD();
  1574  000DB4  EC08  F007         	call	_readPGD	;wreg free
  1575  000DB8  C001  F006         	movff	?_readPGD,readBit@data
  1576  000DBC  C002  F007         	movff	?_readPGD+1,readBit@data+1
  1577                           
  1578                           ;ICSP.c: 48: PGC_low();
  1579  000DC0  EC43  F007         	call	_PGC_low	;wreg free
  1580                           
  1581                           ;ICSP.c: 49: return data;
  1582  000DC4  C006  F004         	movff	readBit@data,?_readBit
  1583  000DC8  C007  F005         	movff	readBit@data+1,?_readBit+1
  1584  000DCC  0012               	return	
  1585  000DCE                     __end_of_readBit:
  1586                           	opt stack 0
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           wreg	equ	0xFE8
  1590                           status	equ	0xFD8
  1591                           
  1592 ;; *************** function _readPGD *****************
  1593 ;; Defined at:
  1594 ;;		line 7 in file "../src/PIC18/FlashProg.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;		None
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;		None
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  2    0[COMRAM] unsigned int 
  1601 ;; Registers used:
  1602 ;;		wreg, status,2
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1608 ;;      Params:         2       0       0       0       0       0       0
  1609 ;;      Locals:         0       0       0       0       0       0       0
  1610 ;;      Temps:          1       0       0       0       0       0       0
  1611 ;;      Totals:         3       0       0       0       0       0       0
  1612 ;;Total ram usage:        3 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; This function calls:
  1615 ;;		Nothing
  1616 ;; This function is called by:
  1617 ;;		_readBit
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text10
  1622  000E10                     __ptext10:
  1623                           	opt stack 0
  1624  000E10                     _readPGD:
  1625                           	opt stack 26
  1626                           
  1627                           ;FlashProg.c: 8: return PORTDbits.RD4;
  1628                           
  1629                           ;incstack = 0
  1630  000E10  A883               	btfss	3971,4,c	;volatile
  1631  000E12  D003               	goto	u10
  1632  000E14  6A03               	clrf	??_readPGD& (0+255),c
  1633  000E16  2A03               	incf	??_readPGD& (0+255),f,c
  1634  000E18  D001               	goto	u18
  1635  000E1A                     u10:
  1636  000E1A  6A03               	clrf	??_readPGD& (0+255),c
  1637  000E1C                     u18:
  1638  000E1C  5003               	movf	??_readPGD,w,c
  1639  000E1E  6E01               	movwf	?_readPGD,c
  1640  000E20  6A02               	clrf	?_readPGD+1,c
  1641  000E22  0012               	return	
  1642  000E24                     __end_of_readPGD:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           wreg	equ	0xFE8
  1647                           status	equ	0xFD8
  1648                           
  1649 ;; *************** function _exit_HVP *****************
  1650 ;; Defined at:
  1651 ;;		line 58 in file "../src/PIC18/FlashProg.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;		None
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;		None
  1656 ;; Return value:  Size  Location     Type
  1657 ;;		None               void
  1658 ;; Registers used:
  1659 ;;		wreg, status,2, cstack
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1665 ;;      Params:         0       0       0       0       0       0       0
  1666 ;;      Locals:         0       0       0       0       0       0       0
  1667 ;;      Temps:          0       0       0       0       0       0       0
  1668 ;;      Totals:         0       0       0       0       0       0       0
  1669 ;;Total ram usage:        0 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    2
  1672 ;; This function calls:
  1673 ;;		_MCLR_low
  1674 ;;		_PGC_low
  1675 ;;		_PGD_low
  1676 ;;		_PGM_low
  1677 ;; This function is called by:
  1678 ;;		_main
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           	psect	text11
  1683  000E24                     __ptext11:
  1684                           	opt stack 0
  1685  000E24                     _exit_HVP:
  1686                           	opt stack 28
  1687                           
  1688                           ;FlashProg.c: 59: PGC_low();
  1689                           
  1690                           ;incstack = 0
  1691  000E24  EC43  F007         	call	_PGC_low	;wreg free
  1692                           
  1693                           ;FlashProg.c: 60: PGD_low();
  1694  000E28  EC2B  F007         	call	_PGD_low	;wreg free
  1695                           
  1696                           ;FlashProg.c: 61: PGM_low();
  1697  000E2C  EC3D  F007         	call	_PGM_low	;wreg free
  1698                           
  1699                           ;FlashProg.c: 62: MCLR_low();
  1700  000E30  EC1B  F007         	call	_MCLR_low	;wreg free
  1701  000E34  0012               	return	
  1702  000E36                     __end_of_exit_HVP:
  1703                           	opt stack 0
  1704                           tblptru	equ	0xFF8
  1705                           tblptrh	equ	0xFF7
  1706                           wreg	equ	0xFE8
  1707                           status	equ	0xFD8
  1708                           
  1709 ;; *************** function _PGM_low *****************
  1710 ;; Defined at:
  1711 ;;		line 31 in file "../src/PIC18/FlashProg.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;		None
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;		None
  1716 ;; Return value:  Size  Location     Type
  1717 ;;		None               void
  1718 ;; Registers used:
  1719 ;;		None
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1725 ;;      Params:         0       0       0       0       0       0       0
  1726 ;;      Locals:         0       0       0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0
  1728 ;;      Totals:         0       0       0       0       0       0       0
  1729 ;;Total ram usage:        0 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; This function calls:
  1732 ;;		Nothing
  1733 ;; This function is called by:
  1734 ;;		_exit_HVP
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text12
  1739  000E7A                     __ptext12:
  1740                           	opt stack 0
  1741  000E7A                     _PGM_low:
  1742                           	opt stack 29
  1743                           
  1744                           ;FlashProg.c: 32: PORTDbits.RD6 = 0;
  1745                           
  1746                           ;incstack = 0
  1747  000E7A  9C83               	bcf	3971,6,c	;volatile
  1748  000E7C  0012               	return	
  1749  000E7E                     __end_of_PGM_low:
  1750                           	opt stack 0
  1751                           tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           wreg	equ	0xFE8
  1754                           status	equ	0xFD8
  1755                           
  1756 ;; *************** function _enter_HVP *****************
  1757 ;; Defined at:
  1758 ;;		line 50 in file "../src/PIC18/FlashProg.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;		None
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;		None
  1763 ;; Return value:  Size  Location     Type
  1764 ;;		None               void
  1765 ;; Registers used:
  1766 ;;		wreg, status,2, cstack
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1772 ;;      Params:         0       0       0       0       0       0       0
  1773 ;;      Locals:         0       0       0       0       0       0       0
  1774 ;;      Temps:          0       0       0       0       0       0       0
  1775 ;;      Totals:         0       0       0       0       0       0       0
  1776 ;;Total ram usage:        0 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    2
  1779 ;; This function calls:
  1780 ;;		_MCLR_high
  1781 ;;		_MCLR_low
  1782 ;;		_PGC_low
  1783 ;;		_PGD_low
  1784 ;;		_PGM_high
  1785 ;; This function is called by:
  1786 ;;		_main
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           	psect	text13
  1791  000DE4                     __ptext13:
  1792                           	opt stack 0
  1793  000DE4                     _enter_HVP:
  1794                           	opt stack 28
  1795                           
  1796                           ;FlashProg.c: 51: MCLR_low();
  1797                           
  1798                           ;incstack = 0
  1799  000DE4  EC1B  F007         	call	_MCLR_low	;wreg free
  1800                           
  1801                           ;FlashProg.c: 52: PGC_low();
  1802  000DE8  EC43  F007         	call	_PGC_low	;wreg free
  1803                           
  1804                           ;FlashProg.c: 53: PGD_low();
  1805  000DEC  EC2B  F007         	call	_PGD_low	;wreg free
  1806                           
  1807                           ;FlashProg.c: 54: PGM_high();
  1808  000DF0  EC3F  F007         	call	_PGM_high	;wreg free
  1809                           
  1810                           ;FlashProg.c: 55: MCLR_high();
  1811  000DF4  EC41  F007         	call	_MCLR_high	;wreg free
  1812  000DF8  0012               	return	
  1813  000DFA                     __end_of_enter_HVP:
  1814                           	opt stack 0
  1815                           tblptru	equ	0xFF8
  1816                           tblptrh	equ	0xFF7
  1817                           wreg	equ	0xFE8
  1818                           status	equ	0xFD8
  1819                           
  1820 ;; *************** function _PGM_high *****************
  1821 ;; Defined at:
  1822 ;;		line 35 in file "../src/PIC18/FlashProg.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;		None               void
  1829 ;; Registers used:
  1830 ;;		None
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1836 ;;      Params:         0       0       0       0       0       0       0
  1837 ;;      Locals:         0       0       0       0       0       0       0
  1838 ;;      Temps:          0       0       0       0       0       0       0
  1839 ;;      Totals:         0       0       0       0       0       0       0
  1840 ;;Total ram usage:        0 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_enter_HVP
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text14
  1850  000E7E                     __ptext14:
  1851                           	opt stack 0
  1852  000E7E                     _PGM_high:
  1853                           	opt stack 29
  1854                           
  1855                           ;FlashProg.c: 36: PORTDbits.RD6 = 1;
  1856                           
  1857                           ;incstack = 0
  1858  000E7E  8C83               	bsf	3971,6,c	;volatile
  1859  000E80  0012               	return	
  1860  000E82                     __end_of_PGM_high:
  1861                           	opt stack 0
  1862                           tblptru	equ	0xFF8
  1863                           tblptrh	equ	0xFF7
  1864                           wreg	equ	0xFE8
  1865                           status	equ	0xFD8
  1866                           
  1867 ;; *************** function _PGD_low *****************
  1868 ;; Defined at:
  1869 ;;		line 19 in file "../src/PIC18/FlashProg.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;		None
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;		None
  1874 ;; Return value:  Size  Location     Type
  1875 ;;		None               void
  1876 ;; Registers used:
  1877 ;;		wreg, status,2, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1883 ;;      Params:         0       0       0       0       0       0       0
  1884 ;;      Locals:         0       0       0       0       0       0       0
  1885 ;;      Temps:          0       0       0       0       0       0       0
  1886 ;;      Totals:         0       0       0       0       0       0       0
  1887 ;;Total ram usage:        0 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    1
  1890 ;; This function calls:
  1891 ;;		_writePGD
  1892 ;; This function is called by:
  1893 ;;		_enter_HVP
  1894 ;;		_exit_HVP
  1895 ;;		_flashWriteAndProgram
  1896 ;;		_main
  1897 ;;		_flashWrite8Bits
  1898 ;;		_rowErase
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           	psect	text15
  1903  000E56                     __ptext15:
  1904                           	opt stack 0
  1905  000E56                     _PGD_low:
  1906                           	opt stack 28
  1907                           
  1908                           ;FlashProg.c: 20: writePGD(0);
  1909                           
  1910                           ;incstack = 0
  1911  000E56  0E00               	movlw	0
  1912  000E58  6E02               	movwf	writePGD@data+1,c
  1913  000E5A  0E00               	movlw	0
  1914  000E5C  6E01               	movwf	writePGD@data,c
  1915  000E5E  EC32  F007         	call	_writePGD	;wreg free
  1916  000E62  0012               	return	
  1917  000E64                     __end_of_PGD_low:
  1918                           	opt stack 0
  1919                           tblptru	equ	0xFF8
  1920                           tblptrh	equ	0xFF7
  1921                           wreg	equ	0xFE8
  1922                           status	equ	0xFD8
  1923                           
  1924 ;; *************** function _MCLR_low *****************
  1925 ;; Defined at:
  1926 ;;		line 39 in file "../src/PIC18/FlashProg.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;		None
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;		None
  1931 ;; Return value:  Size  Location     Type
  1932 ;;		None               void
  1933 ;; Registers used:
  1934 ;;		wreg, status,2, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1940 ;;      Params:         0       0       0       0       0       0       0
  1941 ;;      Locals:         0       0       0       0       0       0       0
  1942 ;;      Temps:          0       0       0       0       0       0       0
  1943 ;;      Totals:         0       0       0       0       0       0       0
  1944 ;;Total ram usage:        0 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; Hardware stack levels required when called:    1
  1947 ;; This function calls:
  1948 ;;		_writePGD
  1949 ;; This function is called by:
  1950 ;;		_enter_HVP
  1951 ;;		_exit_HVP
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           	psect	text16
  1956  000E36                     __ptext16:
  1957                           	opt stack 0
  1958  000E36                     _MCLR_low:
  1959                           	opt stack 28
  1960                           
  1961                           ;FlashProg.c: 40: PORTDbits.RD7 = 0;
  1962                           
  1963                           ;incstack = 0
  1964  000E36  9E83               	bcf	3971,7,c	;volatile
  1965                           
  1966                           ;FlashProg.c: 42: writePGD(0);
  1967  000E38  0E00               	movlw	0
  1968  000E3A  6E02               	movwf	writePGD@data+1,c
  1969  000E3C  0E00               	movlw	0
  1970  000E3E  6E01               	movwf	writePGD@data,c
  1971  000E40  EC32  F007         	call	_writePGD	;wreg free
  1972                           
  1973                           ;FlashProg.c: 43: PORTDbits.RD5 = 0;
  1974  000E44  9A83               	bcf	3971,5,c	;volatile
  1975  000E46  0012               	return	
  1976  000E48                     __end_of_MCLR_low:
  1977                           	opt stack 0
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           wreg	equ	0xFE8
  1981                           status	equ	0xFD8
  1982                           
  1983 ;; *************** function _MCLR_high *****************
  1984 ;; Defined at:
  1985 ;;		line 46 in file "../src/PIC18/FlashProg.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;		None
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;		None
  1990 ;; Return value:  Size  Location     Type
  1991 ;;		None               void
  1992 ;; Registers used:
  1993 ;;		None
  1994 ;; Tracked objects:
  1995 ;;		On entry : 0/0
  1996 ;;		On exit  : 0/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1999 ;;      Params:         0       0       0       0       0       0       0
  2000 ;;      Locals:         0       0       0       0       0       0       0
  2001 ;;      Temps:          0       0       0       0       0       0       0
  2002 ;;      Totals:         0       0       0       0       0       0       0
  2003 ;;Total ram usage:        0 bytes
  2004 ;; Hardware stack levels used:    1
  2005 ;; This function calls:
  2006 ;;		Nothing
  2007 ;; This function is called by:
  2008 ;;		_enter_HVP
  2009 ;; This function uses a non-reentrant model
  2010 ;;
  2011                           
  2012                           	psect	text17
  2013  000E82                     __ptext17:
  2014                           	opt stack 0
  2015  000E82                     _MCLR_high:
  2016                           	opt stack 29
  2017                           
  2018                           ;FlashProg.c: 47: PORTDbits.RD7 = 1;
  2019                           
  2020                           ;incstack = 0
  2021  000E82  8E83               	bsf	3971,7,c	;volatile
  2022  000E84  0012               	return	
  2023  000E86                     __end_of_MCLR_high:
  2024                           	opt stack 0
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           wreg	equ	0xFE8
  2028                           status	equ	0xFD8
  2029                           
  2030 ;; *************** function _enableWrite *****************
  2031 ;; Defined at:
  2032 ;;		line 113 in file "../src/PIC18/FlashProg.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;		None
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;		None
  2037 ;; Return value:  Size  Location     Type
  2038 ;;		None               void
  2039 ;; Registers used:
  2040 ;;		wreg, status,2, status,0, cstack
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2046 ;;      Params:         0       0       0       0       0       0       0
  2047 ;;      Locals:         0       0       0       0       0       0       0
  2048 ;;      Temps:          0       0       0       0       0       0       0
  2049 ;;      Totals:         0       0       0       0       0       0       0
  2050 ;;Total ram usage:        0 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    4
  2053 ;; This function calls:
  2054 ;;		_writeICSP
  2055 ;; This function is called by:
  2056 ;;		_main
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           	psect	text18
  2061  000D5C                     __ptext18:
  2062                           	opt stack 0
  2063  000D5C                     _enableWrite:
  2064                           	opt stack 26
  2065                           
  2066                           ;FlashProg.c: 114: writeICSP(0x0, 0x8ea6);
  2067                           
  2068                           ;incstack = 0
  2069  000D5C  0E00               	movlw	0
  2070  000D5E  6E0F               	movwf	writeICSP@commandByte+1,c
  2071  000D60  0E00               	movlw	0
  2072  000D62  6E0E               	movwf	writeICSP@commandByte,c
  2073  000D64  0E8E               	movlw	142
  2074  000D66  6E11               	movwf	writeICSP@dataBytes+1,c
  2075  000D68  0EA6               	movlw	166
  2076  000D6A  6E10               	movwf	writeICSP@dataBytes,c
  2077  000D6C  ECC3  F006         	call	_writeICSP	;wreg free
  2078                           
  2079                           ;FlashProg.c: 115: writeICSP(0x0, 0x9ca6);
  2080  000D70  0E00               	movlw	0
  2081  000D72  6E0F               	movwf	writeICSP@commandByte+1,c
  2082  000D74  0E00               	movlw	0
  2083  000D76  6E0E               	movwf	writeICSP@commandByte,c
  2084  000D78  0E9C               	movlw	156
  2085  000D7A  6E11               	movwf	writeICSP@dataBytes+1,c
  2086  000D7C  0EA6               	movlw	166
  2087  000D7E  6E10               	movwf	writeICSP@dataBytes,c
  2088  000D80  ECC3  F006         	call	_writeICSP	;wreg free
  2089  000D84  0012               	return	
  2090  000D86                     __end_of_enableWrite:
  2091                           	opt stack 0
  2092                           tblptru	equ	0xFF8
  2093                           tblptrh	equ	0xFF7
  2094                           wreg	equ	0xFE8
  2095                           status	equ	0xFD8
  2096                           
  2097 ;; *************** function _bulkErase *****************
  2098 ;; Defined at:
  2099 ;;		line 66 in file "../src/PIC18/FlashProg.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;		None
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;  i               2   17[COMRAM] int 
  2104 ;; Return value:  Size  Location     Type
  2105 ;;		None               void
  2106 ;; Registers used:
  2107 ;;		wreg, status,2, status,0, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2113 ;;      Params:         0       0       0       0       0       0       0
  2114 ;;      Locals:         2       0       0       0       0       0       0
  2115 ;;      Temps:          0       0       0       0       0       0       0
  2116 ;;      Totals:         2       0       0       0       0       0       0
  2117 ;;Total ram usage:        2 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    4
  2120 ;; This function calls:
  2121 ;;		_writeBits
  2122 ;;		_writeICSP
  2123 ;; This function is called by:
  2124 ;;		_main
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text19
  2129  00091A                     __ptext19:
  2130                           	opt stack 0
  2131  00091A                     _bulkErase:
  2132                           	opt stack 26
  2133                           
  2134                           ;FlashProg.c: 67: int i = 0;
  2135                           
  2136                           ;incstack = 0
  2137  00091A  0E00               	movlw	0
  2138  00091C  6E13               	movwf	bulkErase@i+1,c
  2139  00091E  0E00               	movlw	0
  2140  000920  6E12               	movwf	bulkErase@i,c
  2141                           
  2142                           ;FlashProg.c: 68: writeICSP(0x0, 0x0e3c);
  2143  000922  0E00               	movlw	0
  2144  000924  6E0F               	movwf	writeICSP@commandByte+1,c
  2145  000926  0E00               	movlw	0
  2146  000928  6E0E               	movwf	writeICSP@commandByte,c
  2147  00092A  0E0E               	movlw	14
  2148  00092C  6E11               	movwf	writeICSP@dataBytes+1,c
  2149  00092E  0E3C               	movlw	60
  2150  000930  6E10               	movwf	writeICSP@dataBytes,c
  2151  000932  ECC3  F006         	call	_writeICSP	;wreg free
  2152                           
  2153                           ;FlashProg.c: 69: writeICSP(0x0, 0x6ef8);
  2154  000936  0E00               	movlw	0
  2155  000938  6E0F               	movwf	writeICSP@commandByte+1,c
  2156  00093A  0E00               	movlw	0
  2157  00093C  6E0E               	movwf	writeICSP@commandByte,c
  2158  00093E  0E6E               	movlw	110
  2159  000940  6E11               	movwf	writeICSP@dataBytes+1,c
  2160  000942  0EF8               	movlw	248
  2161  000944  6E10               	movwf	writeICSP@dataBytes,c
  2162  000946  ECC3  F006         	call	_writeICSP	;wreg free
  2163                           
  2164                           ;FlashProg.c: 70: writeICSP(0x0, 0x0e00);
  2165  00094A  0E00               	movlw	0
  2166  00094C  6E0F               	movwf	writeICSP@commandByte+1,c
  2167  00094E  0E00               	movlw	0
  2168  000950  6E0E               	movwf	writeICSP@commandByte,c
  2169  000952  0E0E               	movlw	14
  2170  000954  6E11               	movwf	writeICSP@dataBytes+1,c
  2171  000956  0E00               	movlw	0
  2172  000958  6E10               	movwf	writeICSP@dataBytes,c
  2173  00095A  ECC3  F006         	call	_writeICSP	;wreg free
  2174                           
  2175                           ;FlashProg.c: 71: writeICSP(0x0, 0x6ef7);
  2176  00095E  0E00               	movlw	0
  2177  000960  6E0F               	movwf	writeICSP@commandByte+1,c
  2178  000962  0E00               	movlw	0
  2179  000964  6E0E               	movwf	writeICSP@commandByte,c
  2180  000966  0E6E               	movlw	110
  2181  000968  6E11               	movwf	writeICSP@dataBytes+1,c
  2182  00096A  0EF7               	movlw	247
  2183  00096C  6E10               	movwf	writeICSP@dataBytes,c
  2184  00096E  ECC3  F006         	call	_writeICSP	;wreg free
  2185                           
  2186                           ;FlashProg.c: 72: writeICSP(0x0, 0x0e05);
  2187  000972  0E00               	movlw	0
  2188  000974  6E0F               	movwf	writeICSP@commandByte+1,c
  2189  000976  0E00               	movlw	0
  2190  000978  6E0E               	movwf	writeICSP@commandByte,c
  2191  00097A  0E0E               	movlw	14
  2192  00097C  6E11               	movwf	writeICSP@dataBytes+1,c
  2193  00097E  0E05               	movlw	5
  2194  000980  6E10               	movwf	writeICSP@dataBytes,c
  2195  000982  ECC3  F006         	call	_writeICSP	;wreg free
  2196                           
  2197                           ;FlashProg.c: 73: writeICSP(0x0, 0x6ef6);
  2198  000986  0E00               	movlw	0
  2199  000988  6E0F               	movwf	writeICSP@commandByte+1,c
  2200  00098A  0E00               	movlw	0
  2201  00098C  6E0E               	movwf	writeICSP@commandByte,c
  2202  00098E  0E6E               	movlw	110
  2203  000990  6E11               	movwf	writeICSP@dataBytes+1,c
  2204  000992  0EF6               	movlw	246
  2205  000994  6E10               	movwf	writeICSP@dataBytes,c
  2206  000996  ECC3  F006         	call	_writeICSP	;wreg free
  2207                           
  2208                           ;FlashProg.c: 74: writeICSP(0xc, 0x3f3f);
  2209  00099A  0E00               	movlw	0
  2210  00099C  6E0F               	movwf	writeICSP@commandByte+1,c
  2211  00099E  0E0C               	movlw	12
  2212  0009A0  6E0E               	movwf	writeICSP@commandByte,c
  2213  0009A2  0E3F               	movlw	63
  2214  0009A4  6E11               	movwf	writeICSP@dataBytes+1,c
  2215  0009A6  0E3F               	movlw	63
  2216  0009A8  6E10               	movwf	writeICSP@dataBytes,c
  2217  0009AA  ECC3  F006         	call	_writeICSP	;wreg free
  2218                           
  2219                           ;FlashProg.c: 75: writeICSP(0x0, 0x0e3c);
  2220  0009AE  0E00               	movlw	0
  2221  0009B0  6E0F               	movwf	writeICSP@commandByte+1,c
  2222  0009B2  0E00               	movlw	0
  2223  0009B4  6E0E               	movwf	writeICSP@commandByte,c
  2224  0009B6  0E0E               	movlw	14
  2225  0009B8  6E11               	movwf	writeICSP@dataBytes+1,c
  2226  0009BA  0E3C               	movlw	60
  2227  0009BC  6E10               	movwf	writeICSP@dataBytes,c
  2228  0009BE  ECC3  F006         	call	_writeICSP	;wreg free
  2229                           
  2230                           ;FlashProg.c: 76: writeICSP(0x0, 0x6ef8);
  2231  0009C2  0E00               	movlw	0
  2232  0009C4  6E0F               	movwf	writeICSP@commandByte+1,c
  2233  0009C6  0E00               	movlw	0
  2234  0009C8  6E0E               	movwf	writeICSP@commandByte,c
  2235  0009CA  0E6E               	movlw	110
  2236  0009CC  6E11               	movwf	writeICSP@dataBytes+1,c
  2237  0009CE  0EF8               	movlw	248
  2238  0009D0  6E10               	movwf	writeICSP@dataBytes,c
  2239  0009D2  ECC3  F006         	call	_writeICSP	;wreg free
  2240                           
  2241                           ;FlashProg.c: 77: writeICSP(0x0, 0x0e00);
  2242  0009D6  0E00               	movlw	0
  2243  0009D8  6E0F               	movwf	writeICSP@commandByte+1,c
  2244  0009DA  0E00               	movlw	0
  2245  0009DC  6E0E               	movwf	writeICSP@commandByte,c
  2246  0009DE  0E0E               	movlw	14
  2247  0009E0  6E11               	movwf	writeICSP@dataBytes+1,c
  2248  0009E2  0E00               	movlw	0
  2249  0009E4  6E10               	movwf	writeICSP@dataBytes,c
  2250  0009E6  ECC3  F006         	call	_writeICSP	;wreg free
  2251                           
  2252                           ;FlashProg.c: 78: writeICSP(0x0, 0x6ef7);
  2253  0009EA  0E00               	movlw	0
  2254  0009EC  6E0F               	movwf	writeICSP@commandByte+1,c
  2255  0009EE  0E00               	movlw	0
  2256  0009F0  6E0E               	movwf	writeICSP@commandByte,c
  2257  0009F2  0E6E               	movlw	110
  2258  0009F4  6E11               	movwf	writeICSP@dataBytes+1,c
  2259  0009F6  0EF7               	movlw	247
  2260  0009F8  6E10               	movwf	writeICSP@dataBytes,c
  2261  0009FA  ECC3  F006         	call	_writeICSP	;wreg free
  2262                           
  2263                           ;FlashProg.c: 79: writeICSP(0x0, 0x0e04);
  2264  0009FE  0E00               	movlw	0
  2265  000A00  6E0F               	movwf	writeICSP@commandByte+1,c
  2266  000A02  0E00               	movlw	0
  2267  000A04  6E0E               	movwf	writeICSP@commandByte,c
  2268  000A06  0E0E               	movlw	14
  2269  000A08  6E11               	movwf	writeICSP@dataBytes+1,c
  2270  000A0A  0E04               	movlw	4
  2271  000A0C  6E10               	movwf	writeICSP@dataBytes,c
  2272  000A0E  ECC3  F006         	call	_writeICSP	;wreg free
  2273                           
  2274                           ;FlashProg.c: 80: writeICSP(0x0, 0x6ef6);
  2275  000A12  0E00               	movlw	0
  2276  000A14  6E0F               	movwf	writeICSP@commandByte+1,c
  2277  000A16  0E00               	movlw	0
  2278  000A18  6E0E               	movwf	writeICSP@commandByte,c
  2279  000A1A  0E6E               	movlw	110
  2280  000A1C  6E11               	movwf	writeICSP@dataBytes+1,c
  2281  000A1E  0EF6               	movlw	246
  2282  000A20  6E10               	movwf	writeICSP@dataBytes,c
  2283  000A22  ECC3  F006         	call	_writeICSP	;wreg free
  2284                           
  2285                           ;FlashProg.c: 81: writeICSP(0xc, 0x8f8f);
  2286  000A26  0E00               	movlw	0
  2287  000A28  6E0F               	movwf	writeICSP@commandByte+1,c
  2288  000A2A  0E0C               	movlw	12
  2289  000A2C  6E0E               	movwf	writeICSP@commandByte,c
  2290  000A2E  0E8F               	movlw	143
  2291  000A30  6E11               	movwf	writeICSP@dataBytes+1,c
  2292  000A32  0E8F               	movlw	143
  2293  000A34  6E10               	movwf	writeICSP@dataBytes,c
  2294  000A36  ECC3  F006         	call	_writeICSP	;wreg free
  2295                           
  2296                           ;FlashProg.c: 82: writeICSP(0x0, 0);
  2297  000A3A  0E00               	movlw	0
  2298  000A3C  6E0F               	movwf	writeICSP@commandByte+1,c
  2299  000A3E  0E00               	movlw	0
  2300  000A40  6E0E               	movwf	writeICSP@commandByte,c
  2301  000A42  0E00               	movlw	0
  2302  000A44  6E11               	movwf	writeICSP@dataBytes+1,c
  2303  000A46  0E00               	movlw	0
  2304  000A48  6E10               	movwf	writeICSP@dataBytes,c
  2305  000A4A  ECC3  F006         	call	_writeICSP	;wreg free
  2306                           
  2307                           ;FlashProg.c: 83: writeBits(0, 4);
  2308  000A4E  0E00               	movlw	0
  2309  000A50  6E06               	movwf	writeBits@pattern+1,c
  2310  000A52  0E00               	movlw	0
  2311  000A54  6E05               	movwf	writeBits@pattern,c
  2312  000A56  0E00               	movlw	0
  2313  000A58  6E08               	movwf	writeBits@bitsToWrite+1,c
  2314  000A5A  0E04               	movlw	4
  2315  000A5C  6E07               	movwf	writeBits@bitsToWrite,c
  2316  000A5E  EC75  F006         	call	_writeBits	;wreg free
  2317                           
  2318                           ;FlashProg.c: 84: for(i = 0; i < 200 ; i++){}
  2319  000A62  0E00               	movlw	0
  2320  000A64  6E13               	movwf	bulkErase@i+1,c
  2321  000A66  0E00               	movlw	0
  2322  000A68  6E12               	movwf	bulkErase@i,c
  2323  000A6A  5013               	movf	bulkErase@i+1,w,c
  2324  000A6C  0A80               	xorlw	128
  2325  000A6E  0F80               	addlw	-128
  2326  000A70  0EC8               	movlw	200
  2327  000A72  B4D8               	btfsc	status,2,c
  2328  000A74  5C12               	subwf	bulkErase@i,w,c
  2329  000A76  B0D8               	btfsc	status,0,c
  2330  000A78  D003               	goto	l981
  2331  000A7A  4A12               	infsnz	bulkErase@i,f,c
  2332  000A7C  2A13               	incf	bulkErase@i+1,f,c
  2333  000A7E  D7F5               	goto	L12
  2334  000A80                     l981:
  2335                           
  2336                           ;FlashProg.c: 85: writeBits(0, 16);
  2337  000A80  0E00               	movlw	0
  2338  000A82  6E06               	movwf	writeBits@pattern+1,c
  2339  000A84  0E00               	movlw	0
  2340  000A86  6E05               	movwf	writeBits@pattern,c
  2341  000A88  0E00               	movlw	0
  2342  000A8A  6E08               	movwf	writeBits@bitsToWrite+1,c
  2343  000A8C  0E10               	movlw	16
  2344  000A8E  6E07               	movwf	writeBits@bitsToWrite,c
  2345  000A90  EC75  F006         	call	_writeBits	;wreg free
  2346  000A94  0012               	return	
  2347  000A96                     __end_of_bulkErase:
  2348                           	opt stack 0
  2349                           tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           wreg	equ	0xFE8
  2352                           status	equ	0xFD8
  2353                           
  2354 ;; *************** function _writeICSP *****************
  2355 ;; Defined at:
  2356 ;;		line 5 in file "../src/PIC18/ICSP.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  commandByte     2   13[COMRAM] unsigned int 
  2359 ;;  dataBytes       2   15[COMRAM] unsigned int 
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;		None
  2362 ;; Return value:  Size  Location     Type
  2363 ;;		None               void
  2364 ;; Registers used:
  2365 ;;		wreg, status,2, status,0, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2371 ;;      Params:         4       0       0       0       0       0       0
  2372 ;;      Locals:         0       0       0       0       0       0       0
  2373 ;;      Temps:          0       0       0       0       0       0       0
  2374 ;;      Totals:         4       0       0       0       0       0       0
  2375 ;;Total ram usage:        4 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    3
  2378 ;; This function calls:
  2379 ;;		_writeBits
  2380 ;; This function is called by:
  2381 ;;		_bulkErase
  2382 ;;		_enableWrite
  2383 ;;		_flashSetAddress
  2384 ;;		_flashWriteData
  2385 ;;		_flashWriteAndProgram
  2386 ;;		_main
  2387 ;;		_readDeviceID1
  2388 ;;		_readDeviceID2
  2389 ;;		_flashWrite8Bits
  2390 ;;		_rowErase
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text20
  2395  000D86                     __ptext20:
  2396                           	opt stack 0
  2397  000D86                     _writeICSP:
  2398                           	opt stack 27
  2399                           
  2400                           ;ICSP.c: 6: writeBits(commandByte, 4);
  2401                           
  2402                           ;incstack = 0
  2403  000D86  C00E  F005         	movff	writeICSP@commandByte,writeBits@pattern
  2404  000D8A  C00F  F006         	movff	writeICSP@commandByte+1,writeBits@pattern+1
  2405  000D8E  0E00               	movlw	0
  2406  000D90  6E08               	movwf	writeBits@bitsToWrite+1,c
  2407  000D92  0E04               	movlw	4
  2408  000D94  6E07               	movwf	writeBits@bitsToWrite,c
  2409  000D96  EC75  F006         	call	_writeBits	;wreg free
  2410                           
  2411                           ;ICSP.c: 7: writeBits(dataBytes, 16);
  2412  000D9A  C010  F005         	movff	writeICSP@dataBytes,writeBits@pattern
  2413  000D9E  C011  F006         	movff	writeICSP@dataBytes+1,writeBits@pattern+1
  2414  000DA2  0E00               	movlw	0
  2415  000DA4  6E08               	movwf	writeBits@bitsToWrite+1,c
  2416  000DA6  0E10               	movlw	16
  2417  000DA8  6E07               	movwf	writeBits@bitsToWrite,c
  2418  000DAA  EC75  F006         	call	_writeBits	;wreg free
  2419  000DAE  0012               	return	
  2420  000DB0                     __end_of_writeICSP:
  2421                           	opt stack 0
  2422                           tblptru	equ	0xFF8
  2423                           tblptrh	equ	0xFF7
  2424                           wreg	equ	0xFE8
  2425                           status	equ	0xFD8
  2426                           
  2427 ;; *************** function _writeBits *****************
  2428 ;; Defined at:
  2429 ;;		line 16 in file "../src/PIC18/ICSP.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;  pattern         2    4[COMRAM] unsigned int 
  2432 ;;  bitsToWrite     2    6[COMRAM] unsigned int 
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;  i               2   11[COMRAM] int 
  2435 ;; Return value:  Size  Location     Type
  2436 ;;		None               void
  2437 ;; Registers used:
  2438 ;;		wreg, status,2, status,0, cstack
  2439 ;; Tracked objects:
  2440 ;;		On entry : 0/0
  2441 ;;		On exit  : 0/0
  2442 ;;		Unchanged: 0/0
  2443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2444 ;;      Params:         4       0       0       0       0       0       0
  2445 ;;      Locals:         2       0       0       0       0       0       0
  2446 ;;      Temps:          3       0       0       0       0       0       0
  2447 ;;      Totals:         9       0       0       0       0       0       0
  2448 ;;Total ram usage:        9 bytes
  2449 ;; Hardware stack levels used:    1
  2450 ;; Hardware stack levels required when called:    2
  2451 ;; This function calls:
  2452 ;;		_writeBit
  2453 ;; This function is called by:
  2454 ;;		_bulkErase
  2455 ;;		_flashWriteAndProgram
  2456 ;;		_writeICSP
  2457 ;;		_readICSP
  2458 ;;		_readFirstByte
  2459 ;;		_main
  2460 ;;		_flashWrite8Bits
  2461 ;;		_rowErase
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           	psect	text21
  2466  000CEA                     __ptext21:
  2467                           	opt stack 0
  2468  000CEA                     _writeBits:
  2469                           	opt stack 27
  2470                           
  2471                           ;ICSP.c: 17: int i=0;
  2472                           
  2473                           ;incstack = 0
  2474  000CEA  0E00               	movlw	0
  2475  000CEC  6E0D               	movwf	writeBits@i+1,c
  2476  000CEE  0E00               	movlw	0
  2477  000CF0  6E0C               	movwf	writeBits@i,c
  2478                           
  2479                           ;ICSP.c: 18: (TRISDbits.TRISD4 = 0);
  2480  000CF2  9895               	bcf	3989,4,c	;volatile
  2481                           
  2482                           ;ICSP.c: 19: while(i < bitsToWrite){
  2483  000CF4  D015               	goto	l879
  2484  000CF6                     l875:
  2485                           
  2486                           ;ICSP.c: 20: writeBit(((pattern>>i)&0x1));
  2487  000CF6  C00C  F009         	movff	writeBits@i,??_writeBits
  2488  000CFA  C005  F00A         	movff	writeBits@pattern,??_writeBits+1
  2489  000CFE  C006  F00B         	movff	writeBits@pattern+1,??_writeBits+2
  2490  000D02  2A09               	incf	??_writeBits,f,c
  2491  000D04  D003               	goto	u34
  2492  000D06                     u35:
  2493  000D06  90D8               	bcf	status,0,c
  2494  000D08  320B               	rrcf	??_writeBits+2,f,c
  2495  000D0A  320A               	rrcf	??_writeBits+1,f,c
  2496  000D0C                     u34:
  2497  000D0C  2E09               	decfsz	??_writeBits,f,c
  2498  000D0E  D7FB               	goto	u35
  2499  000D10  0E01               	movlw	1
  2500  000D12  140A               	andwf	??_writeBits+1,w,c
  2501  000D14  6E03               	movwf	writeBit@bitToWrite,c
  2502  000D16  6A04               	clrf	writeBit@bitToWrite+1,c
  2503  000D18  ECFD  F006         	call	_writeBit	;wreg free
  2504                           
  2505                           ;ICSP.c: 21: i++;
  2506  000D1C  4A0C               	infsnz	writeBits@i,f,c
  2507  000D1E  2A0D               	incf	writeBits@i+1,f,c
  2508  000D20                     l879:
  2509  000D20  5007               	movf	writeBits@bitsToWrite,w,c
  2510  000D22  5C0C               	subwf	writeBits@i,w,c
  2511  000D24  5008               	movf	writeBits@bitsToWrite+1,w,c
  2512  000D26  580D               	subwfb	writeBits@i+1,w,c
  2513  000D28  B0D8               	btfsc	status,0,c
  2514  000D2A  0012               	return	
  2515  000D2C  D7E4               	goto	l875
  2516  000D2E                     __end_of_writeBits:
  2517                           	opt stack 0
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           wreg	equ	0xFE8
  2521                           status	equ	0xFD8
  2522                           
  2523 ;; *************** function _writeBit *****************
  2524 ;; Defined at:
  2525 ;;		line 10 in file "../src/PIC18/ICSP.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  bitToWrite      2    2[COMRAM] unsigned int 
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;		None
  2530 ;; Return value:  Size  Location     Type
  2531 ;;		None               void
  2532 ;; Registers used:
  2533 ;;		cstack
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2539 ;;      Params:         2       0       0       0       0       0       0
  2540 ;;      Locals:         0       0       0       0       0       0       0
  2541 ;;      Temps:          0       0       0       0       0       0       0
  2542 ;;      Totals:         2       0       0       0       0       0       0
  2543 ;;Total ram usage:        2 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; Hardware stack levels required when called:    1
  2546 ;; This function calls:
  2547 ;;		_PGC_high
  2548 ;;		_PGC_low
  2549 ;;		_writePGD
  2550 ;; This function is called by:
  2551 ;;		_writeBits
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text22
  2556  000DFA                     __ptext22:
  2557                           	opt stack 0
  2558  000DFA                     _writeBit:
  2559                           	opt stack 27
  2560                           
  2561                           ;ICSP.c: 11: PGC_high();
  2562                           
  2563                           ;incstack = 0
  2564  000DFA  EC45  F007         	call	_PGC_high	;wreg free
  2565                           
  2566                           ;ICSP.c: 12: writePGD(bitToWrite);
  2567  000DFE  C003  F001         	movff	writeBit@bitToWrite,writePGD@data
  2568  000E02  C004  F002         	movff	writeBit@bitToWrite+1,writePGD@data+1
  2569  000E06  EC32  F007         	call	_writePGD	;wreg free
  2570                           
  2571                           ;ICSP.c: 13: PGC_low();
  2572  000E0A  EC43  F007         	call	_PGC_low	;wreg free
  2573  000E0E  0012               	return	
  2574  000E10                     __end_of_writeBit:
  2575                           	opt stack 0
  2576                           tblptru	equ	0xFF8
  2577                           tblptrh	equ	0xFF7
  2578                           wreg	equ	0xFE8
  2579                           status	equ	0xFD8
  2580                           
  2581 ;; *************** function _writePGD *****************
  2582 ;; Defined at:
  2583 ;;		line 11 in file "../src/PIC18/FlashProg.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;  data            2    0[COMRAM] int 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;		None
  2588 ;; Return value:  Size  Location     Type
  2589 ;;		None               void
  2590 ;; Registers used:
  2591 ;;		None
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2597 ;;      Params:         2       0       0       0       0       0       0
  2598 ;;      Locals:         0       0       0       0       0       0       0
  2599 ;;      Temps:          0       0       0       0       0       0       0
  2600 ;;      Totals:         2       0       0       0       0       0       0
  2601 ;;Total ram usage:        2 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; This function calls:
  2604 ;;		Nothing
  2605 ;; This function is called by:
  2606 ;;		_PGD_low
  2607 ;;		_MCLR_low
  2608 ;;		_writeBit
  2609 ;;		_PGD_high
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           	psect	text23
  2614  000E64                     __ptext23:
  2615                           	opt stack 0
  2616  000E64                     _writePGD:
  2617                           	opt stack 27
  2618                           
  2619                           ;FlashProg.c: 12: PORTDbits.RD4 = data;
  2620                           
  2621                           ;incstack = 0
  2622  000E64  B001               	btfsc	writePGD@data,0,c
  2623  000E66  D002               	bra	u25
  2624  000E68  9883               	bcf	3971,4,c	;volatile
  2625  000E6A  D001               	bra	u26
  2626  000E6C                     u25:
  2627  000E6C  8883               	bsf	3971,4,c	;volatile
  2628  000E6E                     u26:
  2629  000E6E  0012               	return	
  2630  000E70                     __end_of_writePGD:
  2631                           	opt stack 0
  2632                           tblptru	equ	0xFF8
  2633                           tblptrh	equ	0xFF7
  2634                           wreg	equ	0xFE8
  2635                           status	equ	0xFD8
  2636                           
  2637 ;; *************** function _PGC_low *****************
  2638 ;; Defined at:
  2639 ;;		line 27 in file "../src/PIC18/FlashProg.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;		None
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;		None
  2644 ;; Return value:  Size  Location     Type
  2645 ;;		None               void
  2646 ;; Registers used:
  2647 ;;		None
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2653 ;;      Params:         0       0       0       0       0       0       0
  2654 ;;      Locals:         0       0       0       0       0       0       0
  2655 ;;      Temps:          0       0       0       0       0       0       0
  2656 ;;      Totals:         0       0       0       0       0       0       0
  2657 ;;Total ram usage:        0 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; This function calls:
  2660 ;;		Nothing
  2661 ;; This function is called by:
  2662 ;;		_enter_HVP
  2663 ;;		_exit_HVP
  2664 ;;		_flashWriteAndProgram
  2665 ;;		_writeBit
  2666 ;;		_readBit
  2667 ;;		_main
  2668 ;;		_flashWrite8Bits
  2669 ;;		_rowErase
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           	psect	text24
  2674  000E86                     __ptext24:
  2675                           	opt stack 0
  2676  000E86                     _PGC_low:
  2677                           	opt stack 27
  2678                           
  2679                           ;FlashProg.c: 28: PORTDbits.RD5 = 0;
  2680                           
  2681                           ;incstack = 0
  2682  000E86  9A83               	bcf	3971,5,c	;volatile
  2683  000E88  0012               	return	
  2684  000E8A                     __end_of_PGC_low:
  2685                           	opt stack 0
  2686                           tblptru	equ	0xFF8
  2687                           tblptrh	equ	0xFF7
  2688                           wreg	equ	0xFE8
  2689                           status	equ	0xFD8
  2690                           
  2691 ;; *************** function _PGC_high *****************
  2692 ;; Defined at:
  2693 ;;		line 23 in file "../src/PIC18/FlashProg.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;		None
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;		None
  2698 ;; Return value:  Size  Location     Type
  2699 ;;		None               void
  2700 ;; Registers used:
  2701 ;;		None
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2707 ;;      Params:         0       0       0       0       0       0       0
  2708 ;;      Locals:         0       0       0       0       0       0       0
  2709 ;;      Temps:          0       0       0       0       0       0       0
  2710 ;;      Totals:         0       0       0       0       0       0       0
  2711 ;;Total ram usage:        0 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; This function calls:
  2714 ;;		Nothing
  2715 ;; This function is called by:
  2716 ;;		_flashWriteAndProgram
  2717 ;;		_writeBit
  2718 ;;		_readBit
  2719 ;;		_main
  2720 ;;		_flashWrite8Bits
  2721 ;;		_rowErase
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text25
  2726  000E8A                     __ptext25:
  2727                           	opt stack 0
  2728  000E8A                     _PGC_high:
  2729                           	opt stack 27
  2730                           
  2731                           ;FlashProg.c: 24: PORTDbits.RD5 = 1;
  2732                           
  2733                           ;incstack = 0
  2734  000E8A  8A83               	bsf	3971,5,c	;volatile
  2735  000E8C  0012               	return	
  2736  000E8E                     __end_of_PGC_high:
  2737                           	opt stack 0
  2738                           tblptru	equ	0xFF8
  2739                           tblptrh	equ	0xFF7
  2740                           wreg	equ	0xFE8
  2741                           status	equ	0xFD8
  2742                           tblptru	equ	0xFF8
  2743                           tblptrh	equ	0xFF7
  2744                           wreg	equ	0xFE8
  2745                           status	equ	0xFD8
  2746                           
  2747                           	psect	rparam
  2748  0000                     tblptru	equ	0xFF8
  2749                           tblptrh	equ	0xFF7
  2750                           wreg	equ	0xFE8
  2751                           status	equ	0xFD8


Data Sizes:
    Strings     5
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     55      55
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    S347$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_flashSetAddress
    _flashWriteData->_writeICSP
    _flashWriteAndProgram->_writeICSP
    _flashSetAddress->_writeICSP
    _flashRead16Bits->_readFirstByte
    _flashRead16Bits->_readICSP
    _readICSP->_readBits
    _readFirstByte->_readBits
    _readBits->_readBit
    _readBit->_readPGD
    _PGD_low->_writePGD
    _MCLR_low->_writePGD
    _enableWrite->_writeICSP
    _bulkErase->_writeICSP
    _writeICSP->_writeBits
    _writeBits->_writeBit
    _writeBit->_writePGD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   59075
                                             37 COMRAM    18    18      0
                           _PGC_high
                            _PGC_low
                            _PGD_low
                          _bulkErase
                        _enableWrite
                          _enter_HVP
                           _exit_HVP
                    _flashRead16Bits
                    _flashSetAddress
               _flashWriteAndProgram
                     _flashWriteData
                           _trisInit
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _trisInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flashWriteData                                       4     0      4    7661
                                             17 COMRAM     4     0      4
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _flashWriteAndProgram                                 6     2      4   10211
                                             17 COMRAM     6     2      4
                           _PGC_high
                            _PGC_low
                            _PGD_low
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _flashSetAddress                                     20    16      4    8107
                                             17 COMRAM    20    16      4
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _flashRead16Bits                                      6     4      2    4796
                                             18 COMRAM     6     4      2
                      _readFirstByte
                           _readICSP
 ---------------------------------------------------------------------------------
 (2) _readICSP                                             4     2      2    2368
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (2) _readFirstByte                                        4     2      2    2383
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (3) _readBits                                             7     5      2     196
                                              7 COMRAM     7     5      2
                            _readBit
 ---------------------------------------------------------------------------------
 (4) _readBit                                              4     2      2      15
                                              3 COMRAM     4     2      2
                           _PGC_high
                            _PGC_low
                            _readPGD
 ---------------------------------------------------------------------------------
 (5) _readPGD                                              3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _exit_HVP                                             0     0      0     454
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                            _PGM_low
 ---------------------------------------------------------------------------------
 (2) _PGM_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enter_HVP                                            0     0      0     454
                          _MCLR_high
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                           _PGM_high
 ---------------------------------------------------------------------------------
 (2) _PGM_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGD_low                                              0     0      0     227
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_low                                             0     0      0     227
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_high                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableWrite                                          0     0      0    7487
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _bulkErase                                            2     2      0    9674
                                             17 COMRAM     2     2      0
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _writeICSP                                            4     0      4    7487
                                             13 COMRAM     4     0      4
                          _writeBits
 ---------------------------------------------------------------------------------
 (2) _writeBits                                            9     5      4    2157
                                              4 COMRAM     9     5      4
                           _writeBit
 ---------------------------------------------------------------------------------
 (3) _writeBit                                             2     0      2     295
                                              2 COMRAM     2     0      2
                           _PGC_high
                            _PGC_low
                           _writePGD
 ---------------------------------------------------------------------------------
 (4) _writePGD                                             2     0      2     227
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _PGC_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _PGC_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PGC_high
   _PGC_low
   _PGD_low
     _writePGD
   _bulkErase
     _writeBits
       _writeBit
         _PGC_high
         _PGC_low
         _writePGD
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enableWrite
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enter_HVP
     _MCLR_high
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_high
   _exit_HVP
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_low
   _flashRead16Bits
     _readFirstByte
       _readBits
         _readBit
           _PGC_high
           _PGC_low
           _readPGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
     _readICSP
       _readBits
         _readBit
           _PGC_high
           _PGC_low
           _readPGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _flashSetAddress
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _flashWriteAndProgram
     _PGC_high
     _PGC_low
     _PGD_low
       _writePGD
     _writeBits
       _writeBit
         _PGC_high
         _PGC_low
         _writePGD
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _flashWriteData
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _trisInit
   _writeBits
     _writeBit
       _PGC_high
       _PGC_low
       _writePGD
   _writeICSP
     _writeBits
       _writeBit
         _PGC_high
         _PGC_low
         _writePGD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     37      37       1       43.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Dec 05 01:24:26 2014

                           u10 0E1A                             u25 0E6C                             u26 0E6E  
                           u34 0D0C                             u18 0E1C                             u35 0D06  
                           u54 0C26                             u55 0C20                             u90 0AE6  
                           u95 0ADC                            l221 0918                            l875 0CF6  
                          l981 0A80                            l885 0C14                            l879 0D20  
                          l889 0C3A           _flashWriteAndProgram 0B7A                            wreg 000FE8  
                  main@address 0030       __size_of_flashRead16Bits 002E                   __CFG_LVP$OFF 000000  
                 __CFG_WDT$OFF 000000                           l1031 0BEA                           l1019 0BC8  
                         l1301 0808                           l1331 08A8                           l1315 085E  
                         l1243 06AC                           l1343 08C6                           l1273 0764  
                         l1259 06EA                           l1357 0914                           l1289 07EA  
                         STR_1 060B                  __CFG_DEBUG$ON 000000                __end_of_PGC_low 0E8A  
                 __CFG_PWRT$ON 000000                __end_of_PGD_low 0E64                __end_of_PGM_low 0E7E  
                         _main 0612                           start 0000             __size_of_MCLR_high 0004  
             __end_of_MCLR_low 0E48                          ?_main 0001          ?_flashWriteAndProgram 0012  
     __size_of_flashSetAddress 00E4               __end_of_PGC_high 0E8E               __end_of_PGM_high 0E82  
              __end_of_readPGD 0E24                __end_of_dpowers 060B                __end_of_readBit 0DCE  
                        main@a 002E                          main@b 0026                          main@c 0028  
                        main@d 002A                          main@e 002C                          main@i 0036  
                        status 000FD8                __initialization 0E48                   __end_of_main 091A  
       __size_of_readFirstByte 004C             flashWriteData@data 0012                         ??_main 0026  
                __activetblptr 000001                      ??_PGC_low 0001                      ??_PGD_low 0003  
            __end_of_MCLR_high 0E86                    readBit@data 0006           __size_of_enableWrite 002A  
                    ??_PGM_low 0001               ??_flashWriteData 0016              ??_flashRead16Bits 0015  
            readFirstByte@data 0011               __end_of_readICSP 0CEA               __end_of_readBits 0C58  
             __end_of_exit_HVP 0E36         ??_flashWriteAndProgram 0016                      ??_readPGD 0003  
                    ??_readBit 0006                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptru 000FF8               __end_of_trisInit 0E7A              ??_flashSetAddress 0016  
        flashWriteAndProgram@i 0016               __end_of_writePGD 0E70               __end_of_writeBit 0E10  
                _readFirstByte 0C58                     __accesstop 0080        __end_of__initialization 0E48  
                 readICSP@data 0011                      ?_MCLR_low 0001                      ?_PGC_high 0001  
               __pcstackCOMRAM 0001                      ?_PGM_high 0001             __size_of_bulkErase 017C  
               ?_readFirstByte 000F             __size_of_enter_HVP 0016                     ??_MCLR_low 0003  
                   ??_PGC_high 0001                     ??_PGM_high 0001                   readBits@data 000D  
                      _PGC_low 0E86                        _PGD_low 0E56                        _PGM_low 0E7A  
                    ?_readICSP 000F                      ?_readBits 0008                      ?_exit_HVP 0001  
           __size_of_writeICSP 002A             __size_of_writeBits 0044                        __Hparam 0000  
                      __Lparam 0000              __end_of_bulkErase 0A96             writeBit@bitToWrite 0003  
                    ?_trisInit 0001                   __psmallconst 0600              __end_of_enter_HVP 0DFA  
                      __pcinit 0E48                        __ramtop 0600                      ?_writePGD 0001  
                    ?_writeBit 0003                        __ptext0 0612                        __ptext1 0E70  
                      __ptext2 0DCE                        __ptext3 0B7A                        __ptext4 0A96  
                      __ptext5 0D2E                        __ptext6 0CA4                        __ptext7 0C58  
                      __ptext8 0C00                        __ptext9 0DB0                        _readPGD 0E10  
                      _dpowers 0601                        _readBit 0DB0                   writePGD@data 0001  
              _flashRead16Bits 0D2E                ??_readFirstByte 0011           end_of_initialization 0E48  
                   ??_readICSP 0011                      _MCLR_high 0E82                     ??_readBits 000A  
                   ??_exit_HVP 0003         flashSetAddress@address 0012         flashSetAddress@lowAddr 0022  
                   ??_trisInit 0001                     ??_writePGD 0003                     ??_writeBit 0005  
              _flashSetAddress 0A96                      _PORTDbits 000F83              __end_of_writeICSP 0DB0  
            __end_of_writeBits 0D2E                  ??_enableWrite 0012                      _TRISDbits 000F95  
             writeBits@pattern 0005                     ?_MCLR_high 0001                     bulkErase@i 0012  
            __size_of_MCLR_low 0012              __size_of_PGC_high 0004        __end_of_flashRead16Bits 0D5C  
            __size_of_PGM_high 0004  __size_of_flashWriteAndProgram 0086           writeICSP@commandByte 000E  
          start_initialization 0E48            __end_of_enableWrite 0D86               __CFG_OSC$INTIO67 000000  
      __size_of_flashWriteData 0016        __end_of_flashSetAddress 0B7A             writeICSP@dataBytes 0010  
                     ?_PGC_low 0001                       ?_PGD_low 0001            __end_of__stringdata 0610  
                     ?_PGM_low 0001                    ??_MCLR_high 0001              __size_of_readICSP 0046  
            __size_of_readBits 0058              __size_of_exit_HVP 0012               ?_flashRead16Bits 0013  
                    _bulkErase 091A              __size_of_trisInit 000A                       ?_readPGD 0001  
                  __smallconst 0600                       ?_readBit 0004       flashRead16Bits@firstData 0015  
                    _enter_HVP 0DE4              __size_of_writePGD 000C                    _enableWrite 0D5C  
            __size_of_writeBit 0016                       _MCLR_low 0E36                       _PGC_high 0E8A  
             ?_flashSetAddress 0012                       _PGM_high 0E7E                     ?_bulkErase 0001  
                  __stringdata 060B                     ?_enter_HVP 0001                      _writeICSP 0D86  
                    _writeBits 0CEA               __size_of_PGC_low 0004               __size_of_PGD_low 000E  
           readBits@bitsToRead 0008               __size_of_PGM_low 0004          __end_of_readFirstByte 0CA4  
                    readBits@i 000B                       __Hrparam 0000                 _flashWriteData 0DCE  
                     __Lrparam 0000                   __Lsmallconst 0600               __size_of_readPGD 0014  
             __size_of_readBit 001E                     ?_writeICSP 000E                       __ptext10 0E10  
                     __ptext11 0E24                       __ptext20 0D86                       __ptext12 0E7A  
                     __ptext21 0CEA                       __ptext13 0DE4                       __ptext22 0DFA  
                     __ptext14 0E7E                       __ptext23 0E64                       __ptext15 0E56  
                     __ptext24 0E86                       __ptext16 0E36                       __ptext25 0E8A  
                     __ptext17 0E82                       __ptext18 0D5C                       __ptext19 091A  
                   ?_writeBits 0005                       _readICSP 0CA4                       _readBits 0C00  
                     _exit_HVP 0E24                  __size_of_main 0308   __end_of_flashWriteAndProgram 0C00  
       __end_of_flashWriteData 0DE4           writeBits@bitsToWrite 0007                     writeBits@i 000C  
                     _trisInit 0E70                       main@data 0034                    ??_bulkErase 0012  
                     _writePGD 0E64                       _writeBit 0DFA                    ??_enter_HVP 0003  
              ?_flashWriteData 0012        flashSetAddress@highAddr 001E       flashWriteAndProgram@data 0012  
     flashSetAddress@upperAddr 001A                   ?_enableWrite 0001                    ??_writeICSP 0012  
                  ??_writeBits 0009            flashRead16Bits@data 0017  
