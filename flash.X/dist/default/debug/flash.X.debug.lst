

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Dec 05 03:08:32 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	text23,global,reloc=2,class=CODE,delta=1
    32                           	psect	text24,global,reloc=2,class=CODE,delta=1
    33                           	psect	text25,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	smallconst
    38  000600                     __psmallconst:
    39                           	opt stack 0
    40  000600  00                 	db	0
    41  000601                     _dpowers:
    42                           	opt stack 0
    43  000601  0001               	dw	1
    44  000603  000A               	dw	10
    45  000605  0064               	dw	100
    46  000607  03E8               	dw	1000
    47  000609  2710               	dw	10000
    48  00060B                     __end_of_dpowers:
    49                           	opt stack 0
    50  0000                     _PORTDbits	set	3971
    51  0000                     _TRISDbits	set	3989
    52  00060B                     __stringdata:
    53                           	opt stack 0
    54  00060B                     STR_1:
    55  00060B  25                 	db	37
    56  00060C  64                 	db	100	;'d'
    57  00060D  20                 	db	32
    58  00060E  0A                 	db	10
    59  00060F  00                 	db	0
    60  000610                     __end_of__stringdata:
    61                           	opt stack 0
    62                           
    63                           ; #config settings
    64  000610  00                 	db	0	; dummy byte at the end
    65  0000                     
    66                           	psect	cinit
    67  000E60                     __pcinit:
    68                           	opt stack 0
    69  000E60                     start_initialization:
    70                           	opt stack 0
    71  000E60                     __initialization:
    72                           	opt stack 0
    73  000E60                     end_of_initialization:
    74                           	opt stack 0
    75  000E60                     __end_of__initialization:
    76                           	opt stack 0
    77  000E60  0E00               	movlw	low (__Lsmallconst shr (0+16))
    78  000E62  6EF8               	movwf	tblptru,c
    79  000E64  0E06               	movlw	high __Lsmallconst
    80  000E66  6EF7               	movwf	tblptrh,c
    81  000E68  0100               	movlb	0
    82  000E6A  EF09  F003         	goto	_main	;jump to C main() function
    83                           tblptru	equ	0xFF8
    84                           tblptrh	equ	0xFF7
    85                           
    86                           	psect	cstackCOMRAM
    87  000001                     __pcstackCOMRAM:
    88                           	opt stack 0
    89  000001                     ?_readPGD:
    90                           	opt stack 0
    91  000001                     writePGD@data:
    92                           	opt stack 0
    93                           
    94                           ; 2 bytes @ 0x0
    95  000001                     	ds	2
    96  000003                     ??_readPGD:
    97  000003                     writeBit@bitToWrite:
    98                           	opt stack 0
    99                           
   100                           ; 2 bytes @ 0x2
   101  000003                     	ds	1
   102  000004                     ?_readBit:
   103                           	opt stack 0
   104                           
   105                           ; 2 bytes @ 0x3
   106  000004                     	ds	1
   107  000005                     writeBits@pattern:
   108                           	opt stack 0
   109                           
   110                           ; 2 bytes @ 0x4
   111  000005                     	ds	1
   112  000006                     readBit@data:
   113                           	opt stack 0
   114                           
   115                           ; 2 bytes @ 0x5
   116  000006                     	ds	1
   117  000007                     writeBits@bitsToWrite:
   118                           	opt stack 0
   119                           
   120                           ; 2 bytes @ 0x6
   121  000007                     	ds	1
   122  000008                     ?_readBits:
   123                           	opt stack 0
   124  000008                     readBits@bitsToRead:
   125                           	opt stack 0
   126                           
   127                           ; 2 bytes @ 0x7
   128  000008                     	ds	1
   129  000009                     ??_writeBits:
   130                           
   131                           ; 0 bytes @ 0x8
   132  000009                     	ds	1
   133  00000A                     ??_readBits:
   134                           
   135                           ; 0 bytes @ 0x9
   136  00000A                     	ds	1
   137  00000B                     readBits@i:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0xA
   141  00000B                     	ds	1
   142  00000C                     writeBits@i:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0xB
   146  00000C                     	ds	1
   147  00000D                     readBits@data:
   148                           	opt stack 0
   149                           
   150                           ; 2 bytes @ 0xC
   151  00000D                     	ds	1
   152  00000E                     writeICSP@commandByte:
   153                           	opt stack 0
   154                           
   155                           ; 2 bytes @ 0xD
   156  00000E                     	ds	1
   157  00000F                     ?_readICSP:
   158                           	opt stack 0
   159  00000F                     ?_readFirstByte:
   160                           	opt stack 0
   161                           
   162                           ; 2 bytes @ 0xE
   163  00000F                     	ds	1
   164  000010                     writeICSP@dataBytes:
   165                           	opt stack 0
   166                           
   167                           ; 2 bytes @ 0xF
   168  000010                     	ds	1
   169  000011                     readICSP@data:
   170                           	opt stack 0
   171  000011                     readFirstByte@data:
   172                           	opt stack 0
   173                           
   174                           ; 2 bytes @ 0x10
   175  000011                     	ds	1
   176  000012                     bulkErase@i:
   177                           	opt stack 0
   178  000012                     flashSetAddress@address:
   179                           	opt stack 0
   180  000012                     flashWriteData@data:
   181                           	opt stack 0
   182  000012                     flashWriteAndProgram@data:
   183                           	opt stack 0
   184                           
   185                           ; 4 bytes @ 0x11
   186  000012                     	ds	1
   187  000013                     ?_flashRead16Bits:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0x12
   191  000013                     	ds	2
   192  000015                     flashRead16Bits@firstData:
   193                           	opt stack 0
   194                           
   195                           ; 2 bytes @ 0x14
   196  000015                     	ds	1
   197  000016                     ??_flashSetAddress:
   198  000016                     flashWriteAndProgram@i:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x15
   202  000016                     	ds	1
   203  000017                     flashRead16Bits@data:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x16
   207  000017                     	ds	3
   208  00001A                     flashSetAddress@upperAddr:
   209                           	opt stack 0
   210                           
   211                           ; 4 bytes @ 0x19
   212  00001A                     	ds	4
   213  00001E                     flashSetAddress@highAddr:
   214                           	opt stack 0
   215                           
   216                           ; 4 bytes @ 0x1D
   217  00001E                     	ds	4
   218  000022                     flashSetAddress@lowAddr:
   219                           	opt stack 0
   220                           
   221                           ; 4 bytes @ 0x21
   222  000022                     	ds	4
   223  000026                     main@b:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0x25
   227  000026                     	ds	2
   228  000028                     main@c:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x27
   232  000028                     	ds	2
   233  00002A                     main@d:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x29
   237  00002A                     	ds	2
   238  00002C                     main@e:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x2B
   242  00002C                     	ds	2
   243  00002E                     main@a:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x2D
   247  00002E                     	ds	2
   248  000030                     main@address:
   249                           	opt stack 0
   250                           
   251                           ; 4 bytes @ 0x2F
   252  000030                     	ds	4
   253  000034                     main@data:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x33
   257  000034                     	ds	2
   258  000036                     main@i:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x35
   262  000036                     	ds	2
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           
   266 ;;
   267 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   268 ;;
   269 ;; *************** function _main *****************
   270 ;; Defined at:
   271 ;;		line 28 in file "../src/PIC18/Main.c"
   272 ;; Parameters:    Size  Location     Type
   273 ;;		None
   274 ;; Auto vars:     Size  Location     Type
   275 ;;  address         4   47[COMRAM] unsigned long 
   276 ;;  i               2   53[COMRAM] unsigned int 
   277 ;;  data            2   51[COMRAM] unsigned int 
   278 ;;  a               2   45[COMRAM] unsigned int 
   279 ;;  e               2   43[COMRAM] unsigned int 
   280 ;;  d               2   41[COMRAM] unsigned int 
   281 ;;  c               2   39[COMRAM] unsigned int 
   282 ;;  b               2   37[COMRAM] unsigned int 
   283 ;; Return value:  Size  Location     Type
   284 ;;		None               void
   285 ;; Registers used:
   286 ;;		wreg, status,2, status,0, cstack
   287 ;; Tracked objects:
   288 ;;		On entry : 0/0
   289 ;;		On exit  : 0/0
   290 ;;		Unchanged: 0/0
   291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   292 ;;      Params:         0       0       0       0       0       0       0
   293 ;;      Locals:        18       0       0       0       0       0       0
   294 ;;      Temps:          0       0       0       0       0       0       0
   295 ;;      Totals:        18       0       0       0       0       0       0
   296 ;;Total ram usage:       18 bytes
   297 ;; Hardware stack levels required when called:    5
   298 ;; This function calls:
   299 ;;		_PGC_high
   300 ;;		_PGC_low
   301 ;;		_PGD_low
   302 ;;		_bulkErase
   303 ;;		_enableWrite
   304 ;;		_enter_HVP
   305 ;;		_exit_HVP
   306 ;;		_flashRead16Bits
   307 ;;		_flashSetAddress
   308 ;;		_flashWriteAndProgram
   309 ;;		_flashWriteData
   310 ;;		_trisInit
   311 ;;		_writeBits
   312 ;;		_writeICSP
   313 ;; This function is called by:
   314 ;;		Startup code after reset
   315 ;; This function uses a non-reentrant model
   316 ;;
   317                           
   318                           	psect	text0
   319  000612                     __ptext0:
   320                           	opt stack 0
   321  000612                     _main:
   322                           	opt stack 25
   323                           
   324                           ;Main.c: 29: uint16 i = 0;
   325                           
   326                           ;incstack = 0
   327  000612  0E00               	movlw	0
   328  000614  6E37               	movwf	main@i+1,c
   329  000616  0E00               	movlw	0
   330  000618  6E36               	movwf	main@i,c
   331                           
   332                           ;Main.c: 30: uint16 a = 0;
   333  00061A  0E00               	movlw	0
   334  00061C  6E2F               	movwf	main@a+1,c
   335  00061E  0E00               	movlw	0
   336  000620  6E2E               	movwf	main@a,c
   337                           
   338                           ;Main.c: 31: uint16 b = 0;
   339  000622  0E00               	movlw	0
   340  000624  6E27               	movwf	main@b+1,c
   341  000626  0E00               	movlw	0
   342  000628  6E26               	movwf	main@b,c
   343                           
   344                           ;Main.c: 32: uint16 c = 0;
   345  00062A  0E00               	movlw	0
   346  00062C  6E29               	movwf	main@c+1,c
   347  00062E  0E00               	movlw	0
   348  000630  6E28               	movwf	main@c,c
   349                           
   350                           ;Main.c: 33: uint16 d = 0;
   351  000632  0E00               	movlw	0
   352  000634  6E2B               	movwf	main@d+1,c
   353  000636  0E00               	movlw	0
   354  000638  6E2A               	movwf	main@d,c
   355                           
   356                           ;Main.c: 34: uint16 e = 0;
   357  00063A  0E00               	movlw	0
   358  00063C  6E2D               	movwf	main@e+1,c
   359  00063E  0E00               	movlw	0
   360  000640  6E2C               	movwf	main@e,c
   361                           
   362                           ;Main.c: 35: uint16 data = 0x0000;
   363  000642  0E00               	movlw	0
   364  000644  6E35               	movwf	main@data+1,c
   365  000646  0E00               	movlw	0
   366  000648  6E34               	movwf	main@data,c
   367                           
   368                           ;Main.c: 36: uint32 address = 0x000000;
   369  00064A  0E00               	movlw	0
   370  00064C  6E30               	movwf	main@address,c
   371  00064E  0E00               	movlw	0
   372  000650  6E31               	movwf	main@address+1,c
   373  000652  0E00               	movlw	0
   374  000654  6E32               	movwf	main@address+2,c
   375  000656  0E00               	movlw	0
   376  000658  6E33               	movwf	main@address+3,c
   377                           
   378                           ;Main.c: 37: trisInit();
   379  00065A  EC44  F007         	call	_trisInit	;wreg free
   380                           
   381                           ;Main.c: 39: enter_HVP();
   382  00065E  ECFE  F006         	call	_enter_HVP	;wreg free
   383                           
   384                           ;Main.c: 41: bulkErase();
   385  000662  EC99  F004         	call	_bulkErase	;wreg free
   386                           
   387                           ;Main.c: 42: enableWrite();
   388  000666  ECBA  F006         	call	_enableWrite	;wreg free
   389                           
   390                           ;Main.c: 44: flashSetAddress(0x000000);
   391  00066A  0E00               	movlw	0
   392  00066C  6E12               	movwf	flashSetAddress@address,c
   393  00066E  0E00               	movlw	0
   394  000670  6E13               	movwf	flashSetAddress@address+1,c
   395  000672  0E00               	movlw	0
   396  000674  6E14               	movwf	flashSetAddress@address+2,c
   397  000676  0E00               	movlw	0
   398  000678  6E15               	movwf	flashSetAddress@address+3,c
   399  00067A  EC57  F005         	call	_flashSetAddress	;wreg free
   400                           
   401                           ;Main.c: 45: for(i = 0 ; i < 15 ; i++){
   402  00067E  0E00               	movlw	0
   403  000680  6E37               	movwf	main@i+1,c
   404  000682  0E00               	movlw	0
   405  000684  6E36               	movwf	main@i,c
   406  000686  0E0F               	movlw	15
   407  000688  5C36               	subwf	main@i,w,c
   408  00068A  0E00               	movlw	0
   409  00068C  5837               	subwfb	main@i+1,w,c
   410  00068E  B0D8               	btfsc	status,0,c
   411  000690  D00D               	goto	l1243
   412                           
   413                           ;Main.c: 46: flashWriteData(data);
   414  000692  C034  F012         	movff	main@data,flashWriteData@data
   415  000696  C035  F013         	movff	main@data+1,flashWriteData@data+1
   416  00069A  6A14               	clrf	flashWriteData@data+2,c
   417  00069C  6A15               	clrf	flashWriteData@data+3,c
   418  00069E  ECF3  F006         	call	_flashWriteData	;wreg free
   419                           
   420                           ;Main.c: 47: data++;
   421  0006A2  4A34               	infsnz	main@data,f,c
   422  0006A4  2A35               	incf	main@data+1,f,c
   423  0006A6  4A36               	infsnz	main@i,f,c
   424  0006A8  2A37               	incf	main@i+1,f,c
   425  0006AA  D7ED               	goto	L1
   426  0006AC                     l1243:
   427                           
   428                           ;Main.c: 48: }
   429                           ;Main.c: 49: flashWriteAndProgram(data);
   430  0006AC  C034  F012         	movff	main@data,flashWriteAndProgram@data
   431  0006B0  C035  F013         	movff	main@data+1,flashWriteAndProgram@data+1
   432  0006B4  6A14               	clrf	flashWriteAndProgram@data+2,c
   433  0006B6  6A15               	clrf	flashWriteAndProgram@data+3,c
   434  0006B8  ECC9  F005         	call	_flashWriteAndProgram	;wreg free
   435                           
   436                           ;Main.c: 50: data++;
   437  0006BC  4A34               	infsnz	main@data,f,c
   438  0006BE  2A35               	incf	main@data+1,f,c
   439                           
   440                           ;Main.c: 52: flashSetAddress(0x000032);
   441  0006C0  0E32               	movlw	50
   442  0006C2  6E12               	movwf	flashSetAddress@address,c
   443  0006C4  0E00               	movlw	0
   444  0006C6  6E13               	movwf	flashSetAddress@address+1,c
   445  0006C8  0E00               	movlw	0
   446  0006CA  6E14               	movwf	flashSetAddress@address+2,c
   447  0006CC  0E00               	movlw	0
   448  0006CE  6E15               	movwf	flashSetAddress@address+3,c
   449  0006D0  EC57  F005         	call	_flashSetAddress	;wreg free
   450                           
   451                           ;Main.c: 53: for(i = 0 ; i < 14 ; i++){
   452  0006D4  0E00               	movlw	0
   453  0006D6  6E37               	movwf	main@i+1,c
   454  0006D8  0E00               	movlw	0
   455  0006DA  6E36               	movwf	main@i,c
   456  0006DC  0E0E               	movlw	14
   457  0006DE  5C36               	subwf	main@i,w,c
   458  0006E0  0E00               	movlw	0
   459  0006E2  5837               	subwfb	main@i+1,w,c
   460  0006E4  B0D8               	btfsc	status,0,c
   461  0006E6  D00D               	goto	l1263
   462                           
   463                           ;Main.c: 54: flashWriteData(data);
   464  0006E8  C034  F012         	movff	main@data,flashWriteData@data
   465  0006EC  C035  F013         	movff	main@data+1,flashWriteData@data+1
   466  0006F0  6A14               	clrf	flashWriteData@data+2,c
   467  0006F2  6A15               	clrf	flashWriteData@data+3,c
   468  0006F4  ECF3  F006         	call	_flashWriteData	;wreg free
   469                           
   470                           ;Main.c: 55: data++;
   471  0006F8  4A34               	infsnz	main@data,f,c
   472  0006FA  2A35               	incf	main@data+1,f,c
   473  0006FC  4A36               	infsnz	main@i,f,c
   474  0006FE  2A37               	incf	main@i+1,f,c
   475  000700  D7ED               	goto	L2
   476  000702                     l1263:
   477                           
   478                           ;Main.c: 56: }
   479                           ;Main.c: 57: flashWriteAndProgram(data);
   480  000702  C034  F012         	movff	main@data,flashWriteAndProgram@data
   481  000706  C035  F013         	movff	main@data+1,flashWriteAndProgram@data+1
   482  00070A  6A14               	clrf	flashWriteAndProgram@data+2,c
   483  00070C  6A15               	clrf	flashWriteAndProgram@data+3,c
   484  00070E  ECC9  F005         	call	_flashWriteAndProgram	;wreg free
   485                           
   486                           ;Main.c: 60: flashSetAddress(0x000000);
   487  000712  0E00               	movlw	0
   488  000714  6E12               	movwf	flashSetAddress@address,c
   489  000716  0E00               	movlw	0
   490  000718  6E13               	movwf	flashSetAddress@address+1,c
   491  00071A  0E00               	movlw	0
   492  00071C  6E14               	movwf	flashSetAddress@address+2,c
   493  00071E  0E00               	movlw	0
   494  000720  6E15               	movwf	flashSetAddress@address+3,c
   495  000722  EC57  F005         	call	_flashSetAddress	;wreg free
   496                           
   497                           ;Main.c: 61: for(i = 0 ; i < 16 ; i++){
   498  000726  0E00               	movlw	0
   499  000728  6E37               	movwf	main@i+1,c
   500  00072A  0E00               	movlw	0
   501  00072C  6E36               	movwf	main@i,c
   502  00072E  0E10               	movlw	16
   503  000730  5C36               	subwf	main@i,w,c
   504  000732  0E00               	movlw	0
   505  000734  5837               	subwfb	main@i+1,w,c
   506  000736  B0D8               	btfsc	status,0,c
   507  000738  D021               	goto	l1277
   508                           
   509                           ;Main.c: 62: a = flashRead16Bits();
   510  00073A  ECA3  F006         	call	_flashRead16Bits	;wreg free
   511  00073E  C013  F02E         	movff	?_flashRead16Bits,main@a
   512  000742  C014  F02F         	movff	?_flashRead16Bits+1,main@a+1
   513                           
   514                           ;Main.c: 63: b = flashRead16Bits();
   515  000746  ECA3  F006         	call	_flashRead16Bits	;wreg free
   516  00074A  C013  F026         	movff	?_flashRead16Bits,main@b
   517  00074E  C014  F027         	movff	?_flashRead16Bits+1,main@b+1
   518                           
   519                           ;Main.c: 64: c = flashRead16Bits();
   520  000752  ECA3  F006         	call	_flashRead16Bits	;wreg free
   521  000756  C013  F028         	movff	?_flashRead16Bits,main@c
   522  00075A  C014  F029         	movff	?_flashRead16Bits+1,main@c+1
   523                           
   524                           ;Main.c: 65: d = flashRead16Bits();
   525  00075E  ECA3  F006         	call	_flashRead16Bits	;wreg free
   526  000762  C013  F02A         	movff	?_flashRead16Bits,main@d
   527  000766  C014  F02B         	movff	?_flashRead16Bits+1,main@d+1
   528                           
   529                           ;Main.c: 66: e = flashRead16Bits();
   530  00076A  ECA3  F006         	call	_flashRead16Bits	;wreg free
   531  00076E  C013  F02C         	movff	?_flashRead16Bits,main@e
   532  000772  C014  F02D         	movff	?_flashRead16Bits+1,main@e+1
   533  000776  4A36               	infsnz	main@i,f,c
   534  000778  2A37               	incf	main@i+1,f,c
   535  00077A  D7D9               	goto	L3
   536  00077C                     l1277:
   537                           
   538                           ;Main.c: 68: }
   539                           ;Main.c: 69: flashSetAddress(address);
   540  00077C  C030  F012         	movff	main@address,flashSetAddress@address
   541  000780  C031  F013         	movff	main@address+1,flashSetAddress@address+1
   542  000784  C032  F014         	movff	main@address+2,flashSetAddress@address+2
   543  000788  C033  F015         	movff	main@address+3,flashSetAddress@address+3
   544  00078C  EC57  F005         	call	_flashSetAddress	;wreg free
   545                           
   546                           ;Main.c: 70: writeICSP(0x0, 0x84a6);
   547  000790  0E00               	movlw	0
   548  000792  6E0F               	movwf	writeICSP@commandByte+1,c
   549  000794  0E00               	movlw	0
   550  000796  6E0E               	movwf	writeICSP@commandByte,c
   551  000798  0E84               	movlw	132
   552  00079A  6E11               	movwf	writeICSP@dataBytes+1,c
   553  00079C  0EA6               	movlw	166
   554  00079E  6E10               	movwf	writeICSP@dataBytes,c
   555  0007A0  ECCF  F006         	call	_writeICSP	;wreg free
   556                           
   557                           ;Main.c: 71: writeICSP(0x0, 0x88a6);
   558  0007A4  0E00               	movlw	0
   559  0007A6  6E0F               	movwf	writeICSP@commandByte+1,c
   560  0007A8  0E00               	movlw	0
   561  0007AA  6E0E               	movwf	writeICSP@commandByte,c
   562  0007AC  0E88               	movlw	136
   563  0007AE  6E11               	movwf	writeICSP@dataBytes+1,c
   564  0007B0  0EA6               	movlw	166
   565  0007B2  6E10               	movwf	writeICSP@dataBytes,c
   566  0007B4  ECCF  F006         	call	_writeICSP	;wreg free
   567                           
   568                           ;Main.c: 72: writeICSP(0x0, 0x82a6);
   569  0007B8  0E00               	movlw	0
   570  0007BA  6E0F               	movwf	writeICSP@commandByte+1,c
   571  0007BC  0E00               	movlw	0
   572  0007BE  6E0E               	movwf	writeICSP@commandByte,c
   573  0007C0  0E82               	movlw	130
   574  0007C2  6E11               	movwf	writeICSP@dataBytes+1,c
   575  0007C4  0EA6               	movlw	166
   576  0007C6  6E10               	movwf	writeICSP@dataBytes,c
   577  0007C8  ECCF  F006         	call	_writeICSP	;wreg free
   578                           
   579                           ;Main.c: 73: writeBits(0x0, 3);
   580  0007CC  0E00               	movlw	0
   581  0007CE  6E06               	movwf	writeBits@pattern+1,c
   582  0007D0  0E00               	movlw	0
   583  0007D2  6E05               	movwf	writeBits@pattern,c
   584  0007D4  0E00               	movlw	0
   585  0007D6  6E08               	movwf	writeBits@bitsToWrite+1,c
   586  0007D8  0E03               	movlw	3
   587  0007DA  6E07               	movwf	writeBits@bitsToWrite,c
   588  0007DC  EC81  F006         	call	_writeBits	;wreg free
   589                           
   590                           ;Main.c: 74: PGC_high();
   591  0007E0  EC51  F007         	call	_PGC_high	;wreg free
   592                           
   593                           ;Main.c: 75: PGD_low();
   594  0007E4  EC37  F007         	call	_PGD_low	;wreg free
   595                           
   596                           ;Main.c: 76: for(i = 0; i < 25 ; i++){}
   597  0007E8  0E00               	movlw	0
   598  0007EA  6E37               	movwf	main@i+1,c
   599  0007EC  0E00               	movlw	0
   600  0007EE  6E36               	movwf	main@i,c
   601  0007F0  0E19               	movlw	25
   602  0007F2  5C36               	subwf	main@i,w,c
   603  0007F4  0E00               	movlw	0
   604  0007F6  5837               	subwfb	main@i+1,w,c
   605  0007F8  B0D8               	btfsc	status,0,c
   606  0007FA  D003               	goto	l1293
   607  0007FC  4A36               	infsnz	main@i,f,c
   608  0007FE  2A37               	incf	main@i+1,f,c
   609  000800  D7F7               	goto	L4
   610  000802                     l1293:
   611                           
   612                           ;Main.c: 77: PGC_low();
   613  000802  EC4F  F007         	call	_PGC_low	;wreg free
   614                           
   615                           ;Main.c: 78: for(i = 0; i < 25 ; i++){}
   616  000806  0E00               	movlw	0
   617  000808  6E37               	movwf	main@i+1,c
   618  00080A  0E00               	movlw	0
   619  00080C  6E36               	movwf	main@i,c
   620  00080E  0E19               	movlw	25
   621  000810  5C36               	subwf	main@i,w,c
   622  000812  0E00               	movlw	0
   623  000814  5837               	subwfb	main@i+1,w,c
   624  000816  B0D8               	btfsc	status,0,c
   625  000818  D003               	goto	l1305
   626  00081A  4A36               	infsnz	main@i,f,c
   627  00081C  2A37               	incf	main@i+1,f,c
   628  00081E  D7F7               	goto	L5
   629  000820                     l1305:
   630                           
   631                           ;Main.c: 79: writeBits(0x0, 16);
   632  000820  0E00               	movlw	0
   633  000822  6E06               	movwf	writeBits@pattern+1,c
   634  000824  0E00               	movlw	0
   635  000826  6E05               	movwf	writeBits@pattern,c
   636  000828  0E00               	movlw	0
   637  00082A  6E08               	movwf	writeBits@bitsToWrite+1,c
   638  00082C  0E10               	movlw	16
   639  00082E  6E07               	movwf	writeBits@bitsToWrite,c
   640  000830  EC81  F006         	call	_writeBits	;wreg free
   641                           
   642                           ;Main.c: 80: flashSetAddress(address);
   643  000834  C030  F012         	movff	main@address,flashSetAddress@address
   644  000838  C031  F013         	movff	main@address+1,flashSetAddress@address+1
   645  00083C  C032  F014         	movff	main@address+2,flashSetAddress@address+2
   646  000840  C033  F015         	movff	main@address+3,flashSetAddress@address+3
   647  000844  EC57  F005         	call	_flashSetAddress	;wreg free
   648                           
   649                           ;Main.c: 81: for(i = 0 ; i <15 ; i++){
   650  000848  0E00               	movlw	0
   651  00084A  6E37               	movwf	main@i+1,c
   652  00084C  0E00               	movlw	0
   653  00084E  6E36               	movwf	main@i,c
   654  000850  0E0F               	movlw	15
   655  000852  5C36               	subwf	main@i,w,c
   656  000854  0E00               	movlw	0
   657  000856  5837               	subwfb	main@i+1,w,c
   658  000858  B0D8               	btfsc	status,0,c
   659  00085A  D00D               	goto	l1319
   660                           
   661                           ;Main.c: 82: flashWriteData(0x6666);
   662  00085C  0E66               	movlw	102
   663  00085E  6E12               	movwf	flashWriteData@data,c
   664  000860  0E66               	movlw	102
   665  000862  6E13               	movwf	flashWriteData@data+1,c
   666  000864  0E00               	movlw	0
   667  000866  6E14               	movwf	flashWriteData@data+2,c
   668  000868  0E00               	movlw	0
   669  00086A  6E15               	movwf	flashWriteData@data+3,c
   670  00086C  ECF3  F006         	call	_flashWriteData	;wreg free
   671  000870  4A36               	infsnz	main@i,f,c
   672  000872  2A37               	incf	main@i+1,f,c
   673  000874  D7ED               	goto	L6
   674  000876                     l1319:
   675                           
   676                           ;Main.c: 83: }
   677                           ;Main.c: 84: flashWriteAndProgram(0x8778);
   678  000876  0E78               	movlw	120
   679  000878  6E12               	movwf	flashWriteAndProgram@data,c
   680  00087A  0E87               	movlw	135
   681  00087C  6E13               	movwf	flashWriteAndProgram@data+1,c
   682  00087E  0E00               	movlw	0
   683  000880  6E14               	movwf	flashWriteAndProgram@data+2,c
   684  000882  0E00               	movlw	0
   685  000884  6E15               	movwf	flashWriteAndProgram@data+3,c
   686  000886  ECC9  F005         	call	_flashWriteAndProgram	;wreg free
   687                           
   688                           ;Main.c: 85: writeBits(0x0, 3);
   689  00088A  0E00               	movlw	0
   690  00088C  6E06               	movwf	writeBits@pattern+1,c
   691  00088E  0E00               	movlw	0
   692  000890  6E05               	movwf	writeBits@pattern,c
   693  000892  0E00               	movlw	0
   694  000894  6E08               	movwf	writeBits@bitsToWrite+1,c
   695  000896  0E03               	movlw	3
   696  000898  6E07               	movwf	writeBits@bitsToWrite,c
   697  00089A  EC81  F006         	call	_writeBits	;wreg free
   698                           
   699                           ;Main.c: 86: PGC_high();
   700  00089E  EC51  F007         	call	_PGC_high	;wreg free
   701                           
   702                           ;Main.c: 87: PGD_low();
   703  0008A2  EC37  F007         	call	_PGD_low	;wreg free
   704                           
   705                           ;Main.c: 88: for(i = 0; i < 25 ; i++){}
   706  0008A6  0E00               	movlw	0
   707  0008A8  6E37               	movwf	main@i+1,c
   708  0008AA  0E00               	movlw	0
   709  0008AC  6E36               	movwf	main@i,c
   710  0008AE  0E19               	movlw	25
   711  0008B0  5C36               	subwf	main@i,w,c
   712  0008B2  0E00               	movlw	0
   713  0008B4  5837               	subwfb	main@i+1,w,c
   714  0008B6  B0D8               	btfsc	status,0,c
   715  0008B8  D003               	goto	l1335
   716  0008BA  4A36               	infsnz	main@i,f,c
   717  0008BC  2A37               	incf	main@i+1,f,c
   718  0008BE  D7F7               	goto	L7
   719  0008C0                     l1335:
   720                           
   721                           ;Main.c: 89: PGC_low();
   722  0008C0  EC4F  F007         	call	_PGC_low	;wreg free
   723                           
   724                           ;Main.c: 90: for(i = 0; i < 25 ; i++){}
   725  0008C4  0E00               	movlw	0
   726  0008C6  6E37               	movwf	main@i+1,c
   727  0008C8  0E00               	movlw	0
   728  0008CA  6E36               	movwf	main@i,c
   729  0008CC  0E19               	movlw	25
   730  0008CE  5C36               	subwf	main@i,w,c
   731  0008D0  0E00               	movlw	0
   732  0008D2  5837               	subwfb	main@i+1,w,c
   733  0008D4  B0D8               	btfsc	status,0,c
   734  0008D6  D003               	goto	l1347
   735  0008D8  4A36               	infsnz	main@i,f,c
   736  0008DA  2A37               	incf	main@i+1,f,c
   737  0008DC  D7F7               	goto	L8
   738  0008DE                     l1347:
   739                           
   740                           ;Main.c: 91: writeICSP(0x0, 0x94a6);
   741  0008DE  0E00               	movlw	0
   742  0008E0  6E0F               	movwf	writeICSP@commandByte+1,c
   743  0008E2  0E00               	movlw	0
   744  0008E4  6E0E               	movwf	writeICSP@commandByte,c
   745  0008E6  0E94               	movlw	148
   746  0008E8  6E11               	movwf	writeICSP@dataBytes+1,c
   747  0008EA  0EA6               	movlw	166
   748  0008EC  6E10               	movwf	writeICSP@dataBytes,c
   749  0008EE  ECCF  F006         	call	_writeICSP	;wreg free
   750                           
   751                           ;Main.c: 93: flashSetAddress(0x000000);
   752  0008F2  0E00               	movlw	0
   753  0008F4  6E12               	movwf	flashSetAddress@address,c
   754  0008F6  0E00               	movlw	0
   755  0008F8  6E13               	movwf	flashSetAddress@address+1,c
   756  0008FA  0E00               	movlw	0
   757  0008FC  6E14               	movwf	flashSetAddress@address+2,c
   758  0008FE  0E00               	movlw	0
   759  000900  6E15               	movwf	flashSetAddress@address+3,c
   760  000902  EC57  F005         	call	_flashSetAddress	;wreg free
   761                           
   762                           ;Main.c: 94: for(i = 0 ; i < 17 ; i++){
   763  000906  0E00               	movlw	0
   764  000908  6E37               	movwf	main@i+1,c
   765  00090A  0E00               	movlw	0
   766  00090C  6E36               	movwf	main@i,c
   767  00090E  0E11               	movlw	17
   768  000910  5C36               	subwf	main@i,w,c
   769  000912  0E00               	movlw	0
   770  000914  5837               	subwfb	main@i+1,w,c
   771  000916  B0D8               	btfsc	status,0,c
   772  000918  D009               	goto	l1361
   773                           
   774                           ;Main.c: 95: a = flashRead16Bits();
   775  00091A  ECA3  F006         	call	_flashRead16Bits	;wreg free
   776  00091E  C013  F02E         	movff	?_flashRead16Bits,main@a
   777  000922  C014  F02F         	movff	?_flashRead16Bits+1,main@a+1
   778  000926  4A36               	infsnz	main@i,f,c
   779  000928  2A37               	incf	main@i+1,f,c
   780  00092A  D7F1               	goto	L9
   781  00092C                     l1361:
   782                           
   783                           ;Main.c: 100: exit_HVP();
   784  00092C  EC1E  F007         	call	_exit_HVP	;wreg free
   785  000930                     l221:
   786  000930  D7FF               	goto	l221
   787  000932                     __end_of_main:
   788                           	opt stack 0
   789                           tblptru	equ	0xFF8
   790                           tblptrh	equ	0xFF7
   791                           status	equ	0xFD8
   792                           
   793 ;; *************** function _trisInit *****************
   794 ;; Defined at:
   795 ;;		line 21 in file "../src/PIC18/Main.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;		None               void
   802 ;; Registers used:
   803 ;;		None
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   809 ;;      Params:         0       0       0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0
   812 ;;      Totals:         0       0       0       0       0       0       0
   813 ;;Total ram usage:        0 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text1
   823  000E88                     __ptext1:
   824                           	opt stack 0
   825  000E88                     _trisInit:
   826                           	opt stack 29
   827                           
   828                           ;Main.c: 22: TRISDbits.TRISD4 = 0;
   829                           
   830                           ;incstack = 0
   831  000E88  9895               	bcf	3989,4,c	;volatile
   832                           
   833                           ;Main.c: 23: TRISDbits.TRISD5 = 0;
   834  000E8A  9A95               	bcf	3989,5,c	;volatile
   835                           
   836                           ;Main.c: 24: TRISDbits.TRISD6 = 0;
   837  000E8C  9C95               	bcf	3989,6,c	;volatile
   838                           
   839                           ;Main.c: 25: TRISDbits.TRISD7 = 0;
   840  000E8E  9E95               	bcf	3989,7,c	;volatile
   841  000E90  0012               	return	
   842  000E92                     __end_of_trisInit:
   843                           	opt stack 0
   844                           tblptru	equ	0xFF8
   845                           tblptrh	equ	0xFF7
   846                           status	equ	0xFD8
   847                           
   848 ;; *************** function _flashWriteData *****************
   849 ;; Defined at:
   850 ;;		line 135 in file "../src/PIC18/FlashProg.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;  data            4   17[COMRAM] unsigned long 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;		None
   855 ;; Return value:  Size  Location     Type
   856 ;;		None               void
   857 ;; Registers used:
   858 ;;		wreg, status,2, status,0, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   864 ;;      Params:         4       0       0       0       0       0       0
   865 ;;      Locals:         0       0       0       0       0       0       0
   866 ;;      Temps:          0       0       0       0       0       0       0
   867 ;;      Totals:         4       0       0       0       0       0       0
   868 ;;Total ram usage:        4 bytes
   869 ;; Hardware stack levels used:    1
   870 ;; Hardware stack levels required when called:    4
   871 ;; This function calls:
   872 ;;		_writeICSP
   873 ;; This function is called by:
   874 ;;		_main
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text2
   879  000DE6                     __ptext2:
   880                           	opt stack 0
   881  000DE6                     _flashWriteData:
   882                           	opt stack 25
   883                           
   884                           ;FlashProg.c: 136: writeICSP(0xd, data);
   885                           
   886                           ;incstack = 0
   887  000DE6  0E00               	movlw	0
   888  000DE8  6E0F               	movwf	writeICSP@commandByte+1,c
   889  000DEA  0E0D               	movlw	13
   890  000DEC  6E0E               	movwf	writeICSP@commandByte,c
   891  000DEE  C012  F010         	movff	flashWriteData@data,writeICSP@dataBytes
   892  000DF2  C013  F011         	movff	flashWriteData@data+1,writeICSP@dataBytes+1
   893  000DF6  ECCF  F006         	call	_writeICSP	;wreg free
   894  000DFA  0012               	return	
   895  000DFC                     __end_of_flashWriteData:
   896                           	opt stack 0
   897                           tblptru	equ	0xFF8
   898                           tblptrh	equ	0xFF7
   899                           status	equ	0xFD8
   900                           
   901 ;; *************** function _flashWriteAndProgram *****************
   902 ;; Defined at:
   903 ;;		line 140 in file "../src/PIC18/FlashProg.c"
   904 ;; Parameters:    Size  Location     Type
   905 ;;  data            4   17[COMRAM] unsigned long 
   906 ;; Auto vars:     Size  Location     Type
   907 ;;  i               2   21[COMRAM] int 
   908 ;; Return value:  Size  Location     Type
   909 ;;		None               void
   910 ;; Registers used:
   911 ;;		wreg, status,2, status,0, cstack
   912 ;; Tracked objects:
   913 ;;		On entry : 0/0
   914 ;;		On exit  : 0/0
   915 ;;		Unchanged: 0/0
   916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   917 ;;      Params:         4       0       0       0       0       0       0
   918 ;;      Locals:         2       0       0       0       0       0       0
   919 ;;      Temps:          0       0       0       0       0       0       0
   920 ;;      Totals:         6       0       0       0       0       0       0
   921 ;;Total ram usage:        6 bytes
   922 ;; Hardware stack levels used:    1
   923 ;; Hardware stack levels required when called:    4
   924 ;; This function calls:
   925 ;;		_PGC_high
   926 ;;		_PGC_low
   927 ;;		_PGD_low
   928 ;;		_writeBits
   929 ;;		_writeICSP
   930 ;; This function is called by:
   931 ;;		_main
   932 ;;		_flashWriteBlock
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text3
   937  000B92                     __ptext3:
   938                           	opt stack 0
   939  000B92                     _flashWriteAndProgram:
   940                           	opt stack 25
   941                           
   942                           ;FlashProg.c: 141: int i;
   943                           ;FlashProg.c: 144: writeICSP(0xf, data);
   944                           
   945                           ;incstack = 0
   946  000B92  0E00               	movlw	0
   947  000B94  6E0F               	movwf	writeICSP@commandByte+1,c
   948  000B96  0E0F               	movlw	15
   949  000B98  6E0E               	movwf	writeICSP@commandByte,c
   950  000B9A  C012  F010         	movff	flashWriteAndProgram@data,writeICSP@dataBytes
   951  000B9E  C013  F011         	movff	flashWriteAndProgram@data+1,writeICSP@dataBytes+1
   952  000BA2  ECCF  F006         	call	_writeICSP	;wreg free
   953                           
   954                           ;FlashProg.c: 146: writeBits(0x0, 3);
   955  000BA6  0E00               	movlw	0
   956  000BA8  6E06               	movwf	writeBits@pattern+1,c
   957  000BAA  0E00               	movlw	0
   958  000BAC  6E05               	movwf	writeBits@pattern,c
   959  000BAE  0E00               	movlw	0
   960  000BB0  6E08               	movwf	writeBits@bitsToWrite+1,c
   961  000BB2  0E03               	movlw	3
   962  000BB4  6E07               	movwf	writeBits@bitsToWrite,c
   963  000BB6  EC81  F006         	call	_writeBits	;wreg free
   964                           
   965                           ;FlashProg.c: 147: PGC_high();
   966  000BBA  EC51  F007         	call	_PGC_high	;wreg free
   967                           
   968                           ;FlashProg.c: 148: PGD_low();
   969  000BBE  EC37  F007         	call	_PGD_low	;wreg free
   970                           
   971                           ;FlashProg.c: 149: for(i = 0; i < 25 ; i++){}
   972  000BC2  0E00               	movlw	0
   973  000BC4  6E17               	movwf	flashWriteAndProgram@i+1,c
   974  000BC6  0E00               	movlw	0
   975  000BC8  6E16               	movwf	flashWriteAndProgram@i,c
   976  000BCA  5017               	movf	flashWriteAndProgram@i+1,w,c
   977  000BCC  0A80               	xorlw	128
   978  000BCE  0F80               	addlw	-128
   979  000BD0  0E19               	movlw	25
   980  000BD2  B4D8               	btfsc	status,2,c
   981  000BD4  5C16               	subwf	flashWriteAndProgram@i,w,c
   982  000BD6  B0D8               	btfsc	status,0,c
   983  000BD8  D003               	goto	l1019
   984  000BDA  4A16               	infsnz	flashWriteAndProgram@i,f,c
   985  000BDC  2A17               	incf	flashWriteAndProgram@i+1,f,c
   986  000BDE  D7F5               	goto	L10
   987  000BE0                     l1019:
   988                           
   989                           ;FlashProg.c: 150: PGC_low();
   990  000BE0  EC4F  F007         	call	_PGC_low	;wreg free
   991                           
   992                           ;FlashProg.c: 151: for(i = 0; i < 25 ; i++){}
   993  000BE4  0E00               	movlw	0
   994  000BE6  6E17               	movwf	flashWriteAndProgram@i+1,c
   995  000BE8  0E00               	movlw	0
   996  000BEA  6E16               	movwf	flashWriteAndProgram@i,c
   997  000BEC  5017               	movf	flashWriteAndProgram@i+1,w,c
   998  000BEE  0A80               	xorlw	128
   999  000BF0  0F80               	addlw	-128
  1000  000BF2  0E19               	movlw	25
  1001  000BF4  B4D8               	btfsc	status,2,c
  1002  000BF6  5C16               	subwf	flashWriteAndProgram@i,w,c
  1003  000BF8  B0D8               	btfsc	status,0,c
  1004  000BFA  D003               	goto	l1031
  1005  000BFC  4A16               	infsnz	flashWriteAndProgram@i,f,c
  1006  000BFE  2A17               	incf	flashWriteAndProgram@i+1,f,c
  1007  000C00  D7F5               	goto	L11
  1008  000C02                     l1031:
  1009                           
  1010                           ;FlashProg.c: 152: writeBits(0x0, 16);
  1011  000C02  0E00               	movlw	0
  1012  000C04  6E06               	movwf	writeBits@pattern+1,c
  1013  000C06  0E00               	movlw	0
  1014  000C08  6E05               	movwf	writeBits@pattern,c
  1015  000C0A  0E00               	movlw	0
  1016  000C0C  6E08               	movwf	writeBits@bitsToWrite+1,c
  1017  000C0E  0E10               	movlw	16
  1018  000C10  6E07               	movwf	writeBits@bitsToWrite,c
  1019  000C12  EC81  F006         	call	_writeBits	;wreg free
  1020  000C16  0012               	return	
  1021  000C18                     __end_of_flashWriteAndProgram:
  1022                           	opt stack 0
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           status	equ	0xFD8
  1026                           
  1027 ;; *************** function _flashSetAddress *****************
  1028 ;; Defined at:
  1029 ;;		line 118 in file "../src/PIC18/FlashProg.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;  address         4   17[COMRAM] unsigned long 
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;  lowAddr         4   33[COMRAM] unsigned long 
  1034 ;;  highAddr        4   29[COMRAM] unsigned long 
  1035 ;;  upperAddr       4   25[COMRAM] unsigned long 
  1036 ;; Return value:  Size  Location     Type
  1037 ;;		None               void
  1038 ;; Registers used:
  1039 ;;		wreg, status,2, status,0, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1045 ;;      Params:         4       0       0       0       0       0       0
  1046 ;;      Locals:        12       0       0       0       0       0       0
  1047 ;;      Temps:          4       0       0       0       0       0       0
  1048 ;;      Totals:        20       0       0       0       0       0       0
  1049 ;;Total ram usage:       20 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; Hardware stack levels required when called:    4
  1052 ;; This function calls:
  1053 ;;		_writeICSP
  1054 ;; This function is called by:
  1055 ;;		_main
  1056 ;;		_flashReadData
  1057 ;;		_flashWriteBlock
  1058 ;;		_rowErase
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text4
  1063  000AAE                     __ptext4:
  1064                           	opt stack 0
  1065  000AAE                     _flashSetAddress:
  1066                           	opt stack 25
  1067                           
  1068                           ;FlashProg.c: 119: uint32 upperAddr;
  1069                           ;FlashProg.c: 120: uint32 highAddr;
  1070                           ;FlashProg.c: 121: uint32 lowAddr;
  1071                           ;FlashProg.c: 123: lowAddr = (address&0x0000ff);
  1072                           
  1073                           ;incstack = 0
  1074  000AAE  5012               	movf	flashSetAddress@address,w,c
  1075  000AB0  6E22               	movwf	flashSetAddress@lowAddr,c
  1076  000AB2  6A23               	clrf	flashSetAddress@lowAddr+1,c
  1077  000AB4  6A24               	clrf	flashSetAddress@lowAddr+2,c
  1078  000AB6  6A25               	clrf	flashSetAddress@lowAddr+3,c
  1079                           
  1080                           ;FlashProg.c: 124: highAddr = ((address>>8)&0x0000ff);
  1081  000AB8  C012  F016         	movff	flashSetAddress@address,??_flashSetAddress
  1082  000ABC  C013  F017         	movff	flashSetAddress@address+1,??_flashSetAddress+1
  1083  000AC0  C014  F018         	movff	flashSetAddress@address+2,??_flashSetAddress+2
  1084  000AC4  C015  F019         	movff	flashSetAddress@address+3,??_flashSetAddress+3
  1085  000AC8  C017  F016         	movff	??_flashSetAddress+1,??_flashSetAddress
  1086  000ACC  C018  F017         	movff	??_flashSetAddress+2,??_flashSetAddress+1
  1087  000AD0  C019  F018         	movff	??_flashSetAddress+3,??_flashSetAddress+2
  1088  000AD4  6A19               	clrf	??_flashSetAddress+3,c
  1089  000AD6  5016               	movf	??_flashSetAddress,w,c
  1090  000AD8  6E1E               	movwf	flashSetAddress@highAddr,c
  1091  000ADA  6A1F               	clrf	flashSetAddress@highAddr+1,c
  1092  000ADC  6A20               	clrf	flashSetAddress@highAddr+2,c
  1093  000ADE  6A21               	clrf	flashSetAddress@highAddr+3,c
  1094                           
  1095                           ;FlashProg.c: 125: upperAddr = ((address>>16)&0x0000ff);
  1096  000AE0  C012  F016         	movff	flashSetAddress@address,??_flashSetAddress
  1097  000AE4  C013  F017         	movff	flashSetAddress@address+1,??_flashSetAddress+1
  1098  000AE8  C014  F018         	movff	flashSetAddress@address+2,??_flashSetAddress+2
  1099  000AEC  C015  F019         	movff	flashSetAddress@address+3,??_flashSetAddress+3
  1100  000AF0  0E11               	movlw	17
  1101  000AF2  D005               	goto	u90
  1102  000AF4                     u95:
  1103  000AF4  90D8               	bcf	status,0,c
  1104  000AF6  3219               	rrcf	??_flashSetAddress+3,f,c
  1105  000AF8  3218               	rrcf	??_flashSetAddress+2,f,c
  1106  000AFA  3217               	rrcf	??_flashSetAddress+1,f,c
  1107  000AFC  3216               	rrcf	??_flashSetAddress,f,c
  1108  000AFE                     u90:
  1109  000AFE  2EE8               	decfsz	wreg,f,c
  1110  000B00  D7F9               	goto	u95
  1111  000B02  5016               	movf	??_flashSetAddress,w,c
  1112  000B04  6E1A               	movwf	flashSetAddress@upperAddr,c
  1113  000B06  6A1B               	clrf	flashSetAddress@upperAddr+1,c
  1114  000B08  6A1C               	clrf	flashSetAddress@upperAddr+2,c
  1115  000B0A  6A1D               	clrf	flashSetAddress@upperAddr+3,c
  1116                           
  1117                           ;FlashProg.c: 127: writeICSP(0x0, 0x0e00|upperAddr);
  1118  000B0C  0E00               	movlw	0
  1119  000B0E  6E0F               	movwf	writeICSP@commandByte+1,c
  1120  000B10  0E00               	movlw	0
  1121  000B12  6E0E               	movwf	writeICSP@commandByte,c
  1122  000B14  0E00               	movlw	0
  1123  000B16  101A               	iorwf	flashSetAddress@upperAddr,w,c
  1124  000B18  6E10               	movwf	writeICSP@dataBytes,c
  1125  000B1A  0E0E               	movlw	14
  1126  000B1C  101B               	iorwf	flashSetAddress@upperAddr+1,w,c
  1127  000B1E  6E11               	movwf	writeICSP@dataBytes+1,c
  1128  000B20  ECCF  F006         	call	_writeICSP	;wreg free
  1129                           
  1130                           ;FlashProg.c: 128: writeICSP(0x0, 0x6ef8);
  1131  000B24  0E00               	movlw	0
  1132  000B26  6E0F               	movwf	writeICSP@commandByte+1,c
  1133  000B28  0E00               	movlw	0
  1134  000B2A  6E0E               	movwf	writeICSP@commandByte,c
  1135  000B2C  0E6E               	movlw	110
  1136  000B2E  6E11               	movwf	writeICSP@dataBytes+1,c
  1137  000B30  0EF8               	movlw	248
  1138  000B32  6E10               	movwf	writeICSP@dataBytes,c
  1139  000B34  ECCF  F006         	call	_writeICSP	;wreg free
  1140                           
  1141                           ;FlashProg.c: 129: writeICSP(0x0, 0x0e00|highAddr);
  1142  000B38  0E00               	movlw	0
  1143  000B3A  6E0F               	movwf	writeICSP@commandByte+1,c
  1144  000B3C  0E00               	movlw	0
  1145  000B3E  6E0E               	movwf	writeICSP@commandByte,c
  1146  000B40  0E00               	movlw	0
  1147  000B42  101E               	iorwf	flashSetAddress@highAddr,w,c
  1148  000B44  6E10               	movwf	writeICSP@dataBytes,c
  1149  000B46  0E0E               	movlw	14
  1150  000B48  101F               	iorwf	flashSetAddress@highAddr+1,w,c
  1151  000B4A  6E11               	movwf	writeICSP@dataBytes+1,c
  1152  000B4C  ECCF  F006         	call	_writeICSP	;wreg free
  1153                           
  1154                           ;FlashProg.c: 130: writeICSP(0x0, 0x6ef7);
  1155  000B50  0E00               	movlw	0
  1156  000B52  6E0F               	movwf	writeICSP@commandByte+1,c
  1157  000B54  0E00               	movlw	0
  1158  000B56  6E0E               	movwf	writeICSP@commandByte,c
  1159  000B58  0E6E               	movlw	110
  1160  000B5A  6E11               	movwf	writeICSP@dataBytes+1,c
  1161  000B5C  0EF7               	movlw	247
  1162  000B5E  6E10               	movwf	writeICSP@dataBytes,c
  1163  000B60  ECCF  F006         	call	_writeICSP	;wreg free
  1164                           
  1165                           ;FlashProg.c: 131: writeICSP(0x0, 0x0e00|lowAddr);
  1166  000B64  0E00               	movlw	0
  1167  000B66  6E0F               	movwf	writeICSP@commandByte+1,c
  1168  000B68  0E00               	movlw	0
  1169  000B6A  6E0E               	movwf	writeICSP@commandByte,c
  1170  000B6C  0E00               	movlw	0
  1171  000B6E  1022               	iorwf	flashSetAddress@lowAddr,w,c
  1172  000B70  6E10               	movwf	writeICSP@dataBytes,c
  1173  000B72  0E0E               	movlw	14
  1174  000B74  1023               	iorwf	flashSetAddress@lowAddr+1,w,c
  1175  000B76  6E11               	movwf	writeICSP@dataBytes+1,c
  1176  000B78  ECCF  F006         	call	_writeICSP	;wreg free
  1177                           
  1178                           ;FlashProg.c: 132: writeICSP(0x0, 0x6ef6);
  1179  000B7C  0E00               	movlw	0
  1180  000B7E  6E0F               	movwf	writeICSP@commandByte+1,c
  1181  000B80  0E00               	movlw	0
  1182  000B82  6E0E               	movwf	writeICSP@commandByte,c
  1183  000B84  0E6E               	movlw	110
  1184  000B86  6E11               	movwf	writeICSP@dataBytes+1,c
  1185  000B88  0EF6               	movlw	246
  1186  000B8A  6E10               	movwf	writeICSP@dataBytes,c
  1187  000B8C  ECCF  F006         	call	_writeICSP	;wreg free
  1188  000B90  0012               	return	
  1189  000B92                     __end_of_flashSetAddress:
  1190                           	opt stack 0
  1191                           tblptru	equ	0xFF8
  1192                           tblptrh	equ	0xFF7
  1193                           wreg	equ	0xFE8
  1194                           status	equ	0xFD8
  1195                           
  1196 ;; *************** function _flashRead16Bits *****************
  1197 ;; Defined at:
  1198 ;;		line 171 in file "../src/PIC18/FlashProg.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;		None
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  data            2   22[COMRAM] unsigned int 
  1203 ;;  firstData       2   20[COMRAM] unsigned int 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  2   18[COMRAM] unsigned int 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, status,0, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1213 ;;      Params:         2       0       0       0       0       0       0
  1214 ;;      Locals:         4       0       0       0       0       0       0
  1215 ;;      Temps:          0       0       0       0       0       0       0
  1216 ;;      Totals:         6       0       0       0       0       0       0
  1217 ;;Total ram usage:        6 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    4
  1220 ;; This function calls:
  1221 ;;		_readFirstByte
  1222 ;;		_readICSP
  1223 ;; This function is called by:
  1224 ;;		_main
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           	psect	text5
  1229  000D46                     __ptext5:
  1230                           	opt stack 0
  1231  000D46                     _flashRead16Bits:
  1232                           	opt stack 25
  1233                           
  1234                           ;FlashProg.c: 172: uint16 data;
  1235                           ;FlashProg.c: 173: uint16 firstData;
  1236                           ;FlashProg.c: 175: data = readICSP();
  1237                           
  1238                           ;incstack = 0
  1239  000D46  EC5E  F006         	call	_readICSP	;wreg free
  1240  000D4A  C00F  F017         	movff	?_readICSP,flashRead16Bits@data
  1241  000D4E  C010  F018         	movff	?_readICSP+1,flashRead16Bits@data+1
  1242                           
  1243                           ;FlashProg.c: 176: firstData = readFirstByte();
  1244  000D52  EC38  F006         	call	_readFirstByte	;wreg free
  1245  000D56  C00F  F015         	movff	?_readFirstByte,flashRead16Bits@firstData
  1246  000D5A  C010  F016         	movff	?_readFirstByte+1,flashRead16Bits@firstData+1
  1247                           
  1248                           ;FlashProg.c: 178: data = firstData|data;
  1249  000D5E  5017               	movf	flashRead16Bits@data,w,c
  1250  000D60  1015               	iorwf	flashRead16Bits@firstData,w,c
  1251  000D62  6E17               	movwf	flashRead16Bits@data,c
  1252  000D64  5018               	movf	flashRead16Bits@data+1,w,c
  1253  000D66  1016               	iorwf	flashRead16Bits@firstData+1,w,c
  1254  000D68  6E18               	movwf	flashRead16Bits@data+1,c
  1255                           
  1256                           ;FlashProg.c: 180: return data;
  1257  000D6A  C017  F013         	movff	flashRead16Bits@data,?_flashRead16Bits
  1258  000D6E  C018  F014         	movff	flashRead16Bits@data+1,?_flashRead16Bits+1
  1259  000D72  0012               	return	
  1260  000D74                     __end_of_flashRead16Bits:
  1261                           	opt stack 0
  1262                           tblptru	equ	0xFF8
  1263                           tblptrh	equ	0xFF7
  1264                           wreg	equ	0xFE8
  1265                           status	equ	0xFD8
  1266                           
  1267 ;; *************** function _readICSP *****************
  1268 ;; Defined at:
  1269 ;;		line 25 in file "../src/PIC18/ICSP.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;		None
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;  data            2   16[COMRAM] unsigned int 
  1274 ;; Return value:  Size  Location     Type
  1275 ;;                  2   14[COMRAM] unsigned int 
  1276 ;; Registers used:
  1277 ;;		wreg, status,2, status,0, cstack
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1283 ;;      Params:         2       0       0       0       0       0       0
  1284 ;;      Locals:         2       0       0       0       0       0       0
  1285 ;;      Temps:          0       0       0       0       0       0       0
  1286 ;;      Totals:         4       0       0       0       0       0       0
  1287 ;;Total ram usage:        4 bytes
  1288 ;; Hardware stack levels used:    1
  1289 ;; Hardware stack levels required when called:    3
  1290 ;; This function calls:
  1291 ;;		_readBits
  1292 ;;		_writeBits
  1293 ;; This function is called by:
  1294 ;;		_flashRead16Bits
  1295 ;;		_readDeviceID1
  1296 ;;		_readDeviceID2
  1297 ;;		_flashRead8Bits
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text6
  1302  000CBC                     __ptext6:
  1303                           	opt stack 0
  1304  000CBC                     _readICSP:
  1305                           	opt stack 25
  1306                           
  1307                           ;ICSP.c: 26: uint16 data;
  1308                           ;ICSP.c: 27: writeBits(9, 4);
  1309                           
  1310                           ;incstack = 0
  1311  000CBC  0E00               	movlw	0
  1312  000CBE  6E06               	movwf	writeBits@pattern+1,c
  1313  000CC0  0E09               	movlw	9
  1314  000CC2  6E05               	movwf	writeBits@pattern,c
  1315  000CC4  0E00               	movlw	0
  1316  000CC6  6E08               	movwf	writeBits@bitsToWrite+1,c
  1317  000CC8  0E04               	movlw	4
  1318  000CCA  6E07               	movwf	writeBits@bitsToWrite,c
  1319  000CCC  EC81  F006         	call	_writeBits	;wreg free
  1320                           
  1321                           ;ICSP.c: 28: writeBits(0, 8);
  1322  000CD0  0E00               	movlw	0
  1323  000CD2  6E06               	movwf	writeBits@pattern+1,c
  1324  000CD4  0E00               	movlw	0
  1325  000CD6  6E05               	movwf	writeBits@pattern,c
  1326  000CD8  0E00               	movlw	0
  1327  000CDA  6E08               	movwf	writeBits@bitsToWrite+1,c
  1328  000CDC  0E08               	movlw	8
  1329  000CDE  6E07               	movwf	writeBits@bitsToWrite,c
  1330  000CE0  EC81  F006         	call	_writeBits	;wreg free
  1331                           
  1332                           ;ICSP.c: 29: data = readBits(8);
  1333  000CE4  0E00               	movlw	0
  1334  000CE6  6E09               	movwf	readBits@bitsToRead+1,c
  1335  000CE8  0E08               	movlw	8
  1336  000CEA  6E08               	movwf	readBits@bitsToRead,c
  1337  000CEC  EC0C  F006         	call	_readBits	;wreg free
  1338  000CF0  C008  F011         	movff	?_readBits,readICSP@data
  1339  000CF4  C009  F012         	movff	?_readBits+1,readICSP@data+1
  1340                           
  1341                           ;ICSP.c: 31: return data;
  1342  000CF8  C011  F00F         	movff	readICSP@data,?_readICSP
  1343  000CFC  C012  F010         	movff	readICSP@data+1,?_readICSP+1
  1344  000D00  0012               	return	
  1345  000D02                     __end_of_readICSP:
  1346                           	opt stack 0
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           wreg	equ	0xFE8
  1350                           status	equ	0xFD8
  1351                           
  1352 ;; *************** function _readFirstByte *****************
  1353 ;; Defined at:
  1354 ;;		line 34 in file "../src/PIC18/ICSP.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;		None
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  data            2   16[COMRAM] unsigned int 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  2   14[COMRAM] unsigned int 
  1361 ;; Registers used:
  1362 ;;		wreg, status,2, status,0, cstack
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1368 ;;      Params:         2       0       0       0       0       0       0
  1369 ;;      Locals:         2       0       0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0       0       0
  1371 ;;      Totals:         4       0       0       0       0       0       0
  1372 ;;Total ram usage:        4 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    3
  1375 ;; This function calls:
  1376 ;;		_readBits
  1377 ;;		_writeBits
  1378 ;; This function is called by:
  1379 ;;		_flashRead16Bits
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text7
  1384  000C70                     __ptext7:
  1385                           	opt stack 0
  1386  000C70                     _readFirstByte:
  1387                           	opt stack 25
  1388                           
  1389                           ;ICSP.c: 35: uint16 data;
  1390                           ;ICSP.c: 36: writeBits(9, 4);
  1391                           
  1392                           ;incstack = 0
  1393  000C70  0E00               	movlw	0
  1394  000C72  6E06               	movwf	writeBits@pattern+1,c
  1395  000C74  0E09               	movlw	9
  1396  000C76  6E05               	movwf	writeBits@pattern,c
  1397  000C78  0E00               	movlw	0
  1398  000C7A  6E08               	movwf	writeBits@bitsToWrite+1,c
  1399  000C7C  0E04               	movlw	4
  1400  000C7E  6E07               	movwf	writeBits@bitsToWrite,c
  1401  000C80  EC81  F006         	call	_writeBits	;wreg free
  1402                           
  1403                           ;ICSP.c: 37: writeBits(0, 8);
  1404  000C84  0E00               	movlw	0
  1405  000C86  6E06               	movwf	writeBits@pattern+1,c
  1406  000C88  0E00               	movlw	0
  1407  000C8A  6E05               	movwf	writeBits@pattern,c
  1408  000C8C  0E00               	movlw	0
  1409  000C8E  6E08               	movwf	writeBits@bitsToWrite+1,c
  1410  000C90  0E08               	movlw	8
  1411  000C92  6E07               	movwf	writeBits@bitsToWrite,c
  1412  000C94  EC81  F006         	call	_writeBits	;wreg free
  1413                           
  1414                           ;ICSP.c: 38: data = readBits(8);
  1415  000C98  0E00               	movlw	0
  1416  000C9A  6E09               	movwf	readBits@bitsToRead+1,c
  1417  000C9C  0E08               	movlw	8
  1418  000C9E  6E08               	movwf	readBits@bitsToRead,c
  1419  000CA0  EC0C  F006         	call	_readBits	;wreg free
  1420  000CA4  C008  F011         	movff	?_readBits,readFirstByte@data
  1421  000CA8  C009  F012         	movff	?_readBits+1,readFirstByte@data+1
  1422                           
  1423                           ;ICSP.c: 39: data = data<<8;
  1424  000CAC  5011               	movf	readFirstByte@data,w,c
  1425  000CAE  6E12               	movwf	readFirstByte@data+1,c
  1426  000CB0  6A11               	clrf	readFirstByte@data,c
  1427                           
  1428                           ;ICSP.c: 40: return data;
  1429  000CB2  C011  F00F         	movff	readFirstByte@data,?_readFirstByte
  1430  000CB6  C012  F010         	movff	readFirstByte@data+1,?_readFirstByte+1
  1431  000CBA  0012               	return	
  1432  000CBC                     __end_of_readFirstByte:
  1433                           	opt stack 0
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           wreg	equ	0xFE8
  1437                           status	equ	0xFD8
  1438                           
  1439 ;; *************** function _readBits *****************
  1440 ;; Defined at:
  1441 ;;		line 52 in file "../src/PIC18/ICSP.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;  bitsToRead      2    7[COMRAM] int 
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;  data            2   12[COMRAM] unsigned int 
  1446 ;;  i               2   10[COMRAM] int 
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  2    7[COMRAM] unsigned int 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2, status,0, cstack
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         2       0       0       0       0       0       0
  1457 ;;      Locals:         4       0       0       0       0       0       0
  1458 ;;      Temps:          1       0       0       0       0       0       0
  1459 ;;      Totals:         7       0       0       0       0       0       0
  1460 ;;Total ram usage:        7 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    2
  1463 ;; This function calls:
  1464 ;;		_readBit
  1465 ;; This function is called by:
  1466 ;;		_readICSP
  1467 ;;		_readFirstByte
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text8
  1472  000C18                     __ptext8:
  1473                           	opt stack 0
  1474  000C18                     _readBits:
  1475                           	opt stack 25
  1476                           
  1477                           ;ICSP.c: 53: int i=0;
  1478                           
  1479                           ;incstack = 0
  1480  000C18  0E00               	movlw	0
  1481  000C1A  6E0C               	movwf	readBits@i+1,c
  1482  000C1C  0E00               	movlw	0
  1483  000C1E  6E0B               	movwf	readBits@i,c
  1484                           
  1485                           ;ICSP.c: 54: uint16 data = 0;
  1486  000C20  0E00               	movlw	0
  1487  000C22  6E0E               	movwf	readBits@data+1,c
  1488  000C24  0E00               	movlw	0
  1489  000C26  6E0D               	movwf	readBits@data,c
  1490                           
  1491                           ;ICSP.c: 56: (TRISDbits.TRISD4 = 1);
  1492  000C28  8895               	bsf	3989,4,c	;volatile
  1493                           
  1494                           ;ICSP.c: 58: while(i < bitsToRead){
  1495  000C2A  D013               	goto	l889
  1496  000C2C                     l885:
  1497                           
  1498                           ;ICSP.c: 59: data = (readBit()<< i)|data;
  1499  000C2C  C00B  F00A         	movff	readBits@i,??_readBits
  1500  000C30  ECE4  F006         	call	_readBit	;wreg free
  1501  000C34  2A0A               	incf	??_readBits,f,c
  1502  000C36  D003               	goto	u54
  1503  000C38                     u55:
  1504  000C38  90D8               	bcf	status,0,c
  1505  000C3A  3604               	rlcf	?_readBit,f,c
  1506  000C3C  3605               	rlcf	?_readBit+1,f,c
  1507  000C3E                     u54:
  1508  000C3E  2E0A               	decfsz	??_readBits,f,c
  1509  000C40  D7FB               	goto	u55
  1510  000C42  500D               	movf	readBits@data,w,c
  1511  000C44  1004               	iorwf	?_readBit,w,c
  1512  000C46  6E0D               	movwf	readBits@data,c
  1513  000C48  500E               	movf	readBits@data+1,w,c
  1514  000C4A  1005               	iorwf	?_readBit+1,w,c
  1515  000C4C  6E0E               	movwf	readBits@data+1,c
  1516                           
  1517                           ;ICSP.c: 60: i++;
  1518  000C4E  4A0B               	infsnz	readBits@i,f,c
  1519  000C50  2A0C               	incf	readBits@i+1,f,c
  1520  000C52                     l889:
  1521  000C52  500C               	movf	readBits@i+1,w,c
  1522  000C54  0A80               	xorlw	128
  1523  000C56  6E0A               	movwf	??_readBits& (0+255),c
  1524  000C58  5008               	movf	readBits@bitsToRead,w,c
  1525  000C5A  5C0B               	subwf	readBits@i,w,c
  1526  000C5C  5009               	movf	readBits@bitsToRead+1,w,c
  1527  000C5E  0A80               	xorlw	128
  1528  000C60  580A               	subwfb	??_readBits& (0+255),w,c
  1529  000C62  A0D8               	btfss	status,0,c
  1530  000C64  D7E3               	goto	l885
  1531                           
  1532                           ;ICSP.c: 61: }
  1533                           ;ICSP.c: 62: return data;
  1534  000C66  C00D  F008         	movff	readBits@data,?_readBits
  1535  000C6A  C00E  F009         	movff	readBits@data+1,?_readBits+1
  1536  000C6E  0012               	return	
  1537  000C70                     __end_of_readBits:
  1538                           	opt stack 0
  1539                           tblptru	equ	0xFF8
  1540                           tblptrh	equ	0xFF7
  1541                           wreg	equ	0xFE8
  1542                           status	equ	0xFD8
  1543                           
  1544 ;; *************** function _readBit *****************
  1545 ;; Defined at:
  1546 ;;		line 44 in file "../src/PIC18/ICSP.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;		None
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;  data            2    5[COMRAM] unsigned int 
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  2    3[COMRAM] unsigned int 
  1553 ;; Registers used:
  1554 ;;		wreg, status,2, cstack
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1560 ;;      Params:         2       0       0       0       0       0       0
  1561 ;;      Locals:         2       0       0       0       0       0       0
  1562 ;;      Temps:          0       0       0       0       0       0       0
  1563 ;;      Totals:         4       0       0       0       0       0       0
  1564 ;;Total ram usage:        4 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    1
  1567 ;; This function calls:
  1568 ;;		_PGC_high
  1569 ;;		_PGC_low
  1570 ;;		_readPGD
  1571 ;; This function is called by:
  1572 ;;		_readBits
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text9
  1577  000DC8                     __ptext9:
  1578                           	opt stack 0
  1579  000DC8                     _readBit:
  1580                           	opt stack 25
  1581                           
  1582                           ;ICSP.c: 45: uint16 data;
  1583                           ;ICSP.c: 46: PGC_high();
  1584                           
  1585                           ;incstack = 0
  1586  000DC8  EC51  F007         	call	_PGC_high	;wreg free
  1587                           
  1588                           ;ICSP.c: 47: data = readPGD();
  1589  000DCC  EC14  F007         	call	_readPGD	;wreg free
  1590  000DD0  C001  F006         	movff	?_readPGD,readBit@data
  1591  000DD4  C002  F007         	movff	?_readPGD+1,readBit@data+1
  1592                           
  1593                           ;ICSP.c: 48: PGC_low();
  1594  000DD8  EC4F  F007         	call	_PGC_low	;wreg free
  1595                           
  1596                           ;ICSP.c: 49: return data;
  1597  000DDC  C006  F004         	movff	readBit@data,?_readBit
  1598  000DE0  C007  F005         	movff	readBit@data+1,?_readBit+1
  1599  000DE4  0012               	return	
  1600  000DE6                     __end_of_readBit:
  1601                           	opt stack 0
  1602                           tblptru	equ	0xFF8
  1603                           tblptrh	equ	0xFF7
  1604                           wreg	equ	0xFE8
  1605                           status	equ	0xFD8
  1606                           
  1607 ;; *************** function _readPGD *****************
  1608 ;; Defined at:
  1609 ;;		line 7 in file "../src/PIC18/FlashProg.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;		None
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  2    0[COMRAM] unsigned int 
  1616 ;; Registers used:
  1617 ;;		wreg, status,2
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1623 ;;      Params:         2       0       0       0       0       0       0
  1624 ;;      Locals:         0       0       0       0       0       0       0
  1625 ;;      Temps:          1       0       0       0       0       0       0
  1626 ;;      Totals:         3       0       0       0       0       0       0
  1627 ;;Total ram usage:        3 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; This function calls:
  1630 ;;		Nothing
  1631 ;; This function is called by:
  1632 ;;		_readBit
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text10
  1637  000E28                     __ptext10:
  1638                           	opt stack 0
  1639  000E28                     _readPGD:
  1640                           	opt stack 25
  1641                           
  1642                           ;FlashProg.c: 8: return PORTDbits.RD4;
  1643                           
  1644                           ;incstack = 0
  1645  000E28  A883               	btfss	3971,4,c	;volatile
  1646  000E2A  D003               	goto	u10
  1647  000E2C  6A03               	clrf	??_readPGD& (0+255),c
  1648  000E2E  2A03               	incf	??_readPGD& (0+255),f,c
  1649  000E30  D001               	goto	u18
  1650  000E32                     u10:
  1651  000E32  6A03               	clrf	??_readPGD& (0+255),c
  1652  000E34                     u18:
  1653  000E34  5003               	movf	??_readPGD,w,c
  1654  000E36  6E01               	movwf	?_readPGD,c
  1655  000E38  6A02               	clrf	?_readPGD+1,c
  1656  000E3A  0012               	return	
  1657  000E3C                     __end_of_readPGD:
  1658                           	opt stack 0
  1659                           tblptru	equ	0xFF8
  1660                           tblptrh	equ	0xFF7
  1661                           wreg	equ	0xFE8
  1662                           status	equ	0xFD8
  1663                           
  1664 ;; *************** function _exit_HVP *****************
  1665 ;; Defined at:
  1666 ;;		line 58 in file "../src/PIC18/FlashProg.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;		None               void
  1673 ;; Registers used:
  1674 ;;		wreg, status,2, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1680 ;;      Params:         0       0       0       0       0       0       0
  1681 ;;      Locals:         0       0       0       0       0       0       0
  1682 ;;      Temps:          0       0       0       0       0       0       0
  1683 ;;      Totals:         0       0       0       0       0       0       0
  1684 ;;Total ram usage:        0 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    2
  1687 ;; This function calls:
  1688 ;;		_MCLR_low
  1689 ;;		_PGC_low
  1690 ;;		_PGD_low
  1691 ;;		_PGM_low
  1692 ;; This function is called by:
  1693 ;;		_main
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text11
  1698  000E3C                     __ptext11:
  1699                           	opt stack 0
  1700  000E3C                     _exit_HVP:
  1701                           	opt stack 27
  1702                           
  1703                           ;FlashProg.c: 59: PGC_low();
  1704                           
  1705                           ;incstack = 0
  1706  000E3C  EC4F  F007         	call	_PGC_low	;wreg free
  1707                           
  1708                           ;FlashProg.c: 60: PGD_low();
  1709  000E40  EC37  F007         	call	_PGD_low	;wreg free
  1710                           
  1711                           ;FlashProg.c: 61: PGM_low();
  1712  000E44  EC49  F007         	call	_PGM_low	;wreg free
  1713                           
  1714                           ;FlashProg.c: 62: MCLR_low();
  1715  000E48  EC27  F007         	call	_MCLR_low	;wreg free
  1716  000E4C  0012               	return	
  1717  000E4E                     __end_of_exit_HVP:
  1718                           	opt stack 0
  1719                           tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           wreg	equ	0xFE8
  1722                           status	equ	0xFD8
  1723                           
  1724 ;; *************** function _PGM_low *****************
  1725 ;; Defined at:
  1726 ;;		line 31 in file "../src/PIC18/FlashProg.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;		None
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;		None               void
  1733 ;; Registers used:
  1734 ;;		None
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1740 ;;      Params:         0       0       0       0       0       0       0
  1741 ;;      Locals:         0       0       0       0       0       0       0
  1742 ;;      Temps:          0       0       0       0       0       0       0
  1743 ;;      Totals:         0       0       0       0       0       0       0
  1744 ;;Total ram usage:        0 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; This function calls:
  1747 ;;		Nothing
  1748 ;; This function is called by:
  1749 ;;		_exit_HVP
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           	psect	text12
  1754  000E92                     __ptext12:
  1755                           	opt stack 0
  1756  000E92                     _PGM_low:
  1757                           	opt stack 28
  1758                           
  1759                           ;FlashProg.c: 32: PORTDbits.RD6 = 0;
  1760                           
  1761                           ;incstack = 0
  1762  000E92  9C83               	bcf	3971,6,c	;volatile
  1763  000E94  0012               	return	
  1764  000E96                     __end_of_PGM_low:
  1765                           	opt stack 0
  1766                           tblptru	equ	0xFF8
  1767                           tblptrh	equ	0xFF7
  1768                           wreg	equ	0xFE8
  1769                           status	equ	0xFD8
  1770                           
  1771 ;; *************** function _enter_HVP *****************
  1772 ;; Defined at:
  1773 ;;		line 50 in file "../src/PIC18/FlashProg.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;		None
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;		None
  1778 ;; Return value:  Size  Location     Type
  1779 ;;		None               void
  1780 ;; Registers used:
  1781 ;;		wreg, status,2, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1787 ;;      Params:         0       0       0       0       0       0       0
  1788 ;;      Locals:         0       0       0       0       0       0       0
  1789 ;;      Temps:          0       0       0       0       0       0       0
  1790 ;;      Totals:         0       0       0       0       0       0       0
  1791 ;;Total ram usage:        0 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; Hardware stack levels required when called:    2
  1794 ;; This function calls:
  1795 ;;		_MCLR_high
  1796 ;;		_MCLR_low
  1797 ;;		_PGC_low
  1798 ;;		_PGD_low
  1799 ;;		_PGM_high
  1800 ;; This function is called by:
  1801 ;;		_main
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text13
  1806  000DFC                     __ptext13:
  1807                           	opt stack 0
  1808  000DFC                     _enter_HVP:
  1809                           	opt stack 27
  1810                           
  1811                           ;FlashProg.c: 51: MCLR_low();
  1812                           
  1813                           ;incstack = 0
  1814  000DFC  EC27  F007         	call	_MCLR_low	;wreg free
  1815                           
  1816                           ;FlashProg.c: 52: PGC_low();
  1817  000E00  EC4F  F007         	call	_PGC_low	;wreg free
  1818                           
  1819                           ;FlashProg.c: 53: PGD_low();
  1820  000E04  EC37  F007         	call	_PGD_low	;wreg free
  1821                           
  1822                           ;FlashProg.c: 54: PGM_high();
  1823  000E08  EC4B  F007         	call	_PGM_high	;wreg free
  1824                           
  1825                           ;FlashProg.c: 55: MCLR_high();
  1826  000E0C  EC4D  F007         	call	_MCLR_high	;wreg free
  1827  000E10  0012               	return	
  1828  000E12                     __end_of_enter_HVP:
  1829                           	opt stack 0
  1830                           tblptru	equ	0xFF8
  1831                           tblptrh	equ	0xFF7
  1832                           wreg	equ	0xFE8
  1833                           status	equ	0xFD8
  1834                           
  1835 ;; *************** function _PGM_high *****************
  1836 ;; Defined at:
  1837 ;;		line 35 in file "../src/PIC18/FlashProg.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;		None
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;		None
  1842 ;; Return value:  Size  Location     Type
  1843 ;;		None               void
  1844 ;; Registers used:
  1845 ;;		None
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1851 ;;      Params:         0       0       0       0       0       0       0
  1852 ;;      Locals:         0       0       0       0       0       0       0
  1853 ;;      Temps:          0       0       0       0       0       0       0
  1854 ;;      Totals:         0       0       0       0       0       0       0
  1855 ;;Total ram usage:        0 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; This function calls:
  1858 ;;		Nothing
  1859 ;; This function is called by:
  1860 ;;		_enter_HVP
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text14
  1865  000E96                     __ptext14:
  1866                           	opt stack 0
  1867  000E96                     _PGM_high:
  1868                           	opt stack 28
  1869                           
  1870                           ;FlashProg.c: 36: PORTDbits.RD6 = 1;
  1871                           
  1872                           ;incstack = 0
  1873  000E96  8C83               	bsf	3971,6,c	;volatile
  1874  000E98  0012               	return	
  1875  000E9A                     __end_of_PGM_high:
  1876                           	opt stack 0
  1877                           tblptru	equ	0xFF8
  1878                           tblptrh	equ	0xFF7
  1879                           wreg	equ	0xFE8
  1880                           status	equ	0xFD8
  1881                           
  1882 ;; *************** function _PGD_low *****************
  1883 ;; Defined at:
  1884 ;;		line 19 in file "../src/PIC18/FlashProg.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;		None
  1889 ;; Return value:  Size  Location     Type
  1890 ;;		None               void
  1891 ;; Registers used:
  1892 ;;		wreg, status,2, cstack
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1898 ;;      Params:         0       0       0       0       0       0       0
  1899 ;;      Locals:         0       0       0       0       0       0       0
  1900 ;;      Temps:          0       0       0       0       0       0       0
  1901 ;;      Totals:         0       0       0       0       0       0       0
  1902 ;;Total ram usage:        0 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; Hardware stack levels required when called:    1
  1905 ;; This function calls:
  1906 ;;		_writePGD
  1907 ;; This function is called by:
  1908 ;;		_enter_HVP
  1909 ;;		_exit_HVP
  1910 ;;		_flashWriteAndProgram
  1911 ;;		_main
  1912 ;;		_flashWrite8Bits
  1913 ;;		_rowErase
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text15
  1918  000E6E                     __ptext15:
  1919                           	opt stack 0
  1920  000E6E                     _PGD_low:
  1921                           	opt stack 27
  1922                           
  1923                           ;FlashProg.c: 20: writePGD(0);
  1924                           
  1925                           ;incstack = 0
  1926  000E6E  0E00               	movlw	0
  1927  000E70  6E02               	movwf	writePGD@data+1,c
  1928  000E72  0E00               	movlw	0
  1929  000E74  6E01               	movwf	writePGD@data,c
  1930  000E76  EC3E  F007         	call	_writePGD	;wreg free
  1931  000E7A  0012               	return	
  1932  000E7C                     __end_of_PGD_low:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           wreg	equ	0xFE8
  1937                           status	equ	0xFD8
  1938                           
  1939 ;; *************** function _MCLR_low *****************
  1940 ;; Defined at:
  1941 ;;		line 39 in file "../src/PIC18/FlashProg.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;		None
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;		None
  1946 ;; Return value:  Size  Location     Type
  1947 ;;		None               void
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, cstack
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1955 ;;      Params:         0       0       0       0       0       0       0
  1956 ;;      Locals:         0       0       0       0       0       0       0
  1957 ;;      Temps:          0       0       0       0       0       0       0
  1958 ;;      Totals:         0       0       0       0       0       0       0
  1959 ;;Total ram usage:        0 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    1
  1962 ;; This function calls:
  1963 ;;		_writePGD
  1964 ;; This function is called by:
  1965 ;;		_enter_HVP
  1966 ;;		_exit_HVP
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           	psect	text16
  1971  000E4E                     __ptext16:
  1972                           	opt stack 0
  1973  000E4E                     _MCLR_low:
  1974                           	opt stack 27
  1975                           
  1976                           ;FlashProg.c: 40: PORTDbits.RD7 = 0;
  1977                           
  1978                           ;incstack = 0
  1979  000E4E  9E83               	bcf	3971,7,c	;volatile
  1980                           
  1981                           ;FlashProg.c: 42: writePGD(0);
  1982  000E50  0E00               	movlw	0
  1983  000E52  6E02               	movwf	writePGD@data+1,c
  1984  000E54  0E00               	movlw	0
  1985  000E56  6E01               	movwf	writePGD@data,c
  1986  000E58  EC3E  F007         	call	_writePGD	;wreg free
  1987                           
  1988                           ;FlashProg.c: 43: PORTDbits.RD5 = 0;
  1989  000E5C  9A83               	bcf	3971,5,c	;volatile
  1990  000E5E  0012               	return	
  1991  000E60                     __end_of_MCLR_low:
  1992                           	opt stack 0
  1993                           tblptru	equ	0xFF8
  1994                           tblptrh	equ	0xFF7
  1995                           wreg	equ	0xFE8
  1996                           status	equ	0xFD8
  1997                           
  1998 ;; *************** function _MCLR_high *****************
  1999 ;; Defined at:
  2000 ;;		line 46 in file "../src/PIC18/FlashProg.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;		None
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;		None
  2005 ;; Return value:  Size  Location     Type
  2006 ;;		None               void
  2007 ;; Registers used:
  2008 ;;		None
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2014 ;;      Params:         0       0       0       0       0       0       0
  2015 ;;      Locals:         0       0       0       0       0       0       0
  2016 ;;      Temps:          0       0       0       0       0       0       0
  2017 ;;      Totals:         0       0       0       0       0       0       0
  2018 ;;Total ram usage:        0 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; This function calls:
  2021 ;;		Nothing
  2022 ;; This function is called by:
  2023 ;;		_enter_HVP
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text17
  2028  000E9A                     __ptext17:
  2029                           	opt stack 0
  2030  000E9A                     _MCLR_high:
  2031                           	opt stack 28
  2032                           
  2033                           ;FlashProg.c: 47: PORTDbits.RD7 = 1;
  2034                           
  2035                           ;incstack = 0
  2036  000E9A  8E83               	bsf	3971,7,c	;volatile
  2037  000E9C  0012               	return	
  2038  000E9E                     __end_of_MCLR_high:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           wreg	equ	0xFE8
  2043                           status	equ	0xFD8
  2044                           
  2045 ;; *************** function _enableWrite *****************
  2046 ;; Defined at:
  2047 ;;		line 113 in file "../src/PIC18/FlashProg.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;		None
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;		None               void
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0, cstack
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2061 ;;      Params:         0       0       0       0       0       0       0
  2062 ;;      Locals:         0       0       0       0       0       0       0
  2063 ;;      Temps:          0       0       0       0       0       0       0
  2064 ;;      Totals:         0       0       0       0       0       0       0
  2065 ;;Total ram usage:        0 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    4
  2068 ;; This function calls:
  2069 ;;		_writeICSP
  2070 ;; This function is called by:
  2071 ;;		_main
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text18
  2076  000D74                     __ptext18:
  2077                           	opt stack 0
  2078  000D74                     _enableWrite:
  2079                           	opt stack 25
  2080                           
  2081                           ;FlashProg.c: 114: writeICSP(0x0, 0x8ea6);
  2082                           
  2083                           ;incstack = 0
  2084  000D74  0E00               	movlw	0
  2085  000D76  6E0F               	movwf	writeICSP@commandByte+1,c
  2086  000D78  0E00               	movlw	0
  2087  000D7A  6E0E               	movwf	writeICSP@commandByte,c
  2088  000D7C  0E8E               	movlw	142
  2089  000D7E  6E11               	movwf	writeICSP@dataBytes+1,c
  2090  000D80  0EA6               	movlw	166
  2091  000D82  6E10               	movwf	writeICSP@dataBytes,c
  2092  000D84  ECCF  F006         	call	_writeICSP	;wreg free
  2093                           
  2094                           ;FlashProg.c: 115: writeICSP(0x0, 0x9ca6);
  2095  000D88  0E00               	movlw	0
  2096  000D8A  6E0F               	movwf	writeICSP@commandByte+1,c
  2097  000D8C  0E00               	movlw	0
  2098  000D8E  6E0E               	movwf	writeICSP@commandByte,c
  2099  000D90  0E9C               	movlw	156
  2100  000D92  6E11               	movwf	writeICSP@dataBytes+1,c
  2101  000D94  0EA6               	movlw	166
  2102  000D96  6E10               	movwf	writeICSP@dataBytes,c
  2103  000D98  ECCF  F006         	call	_writeICSP	;wreg free
  2104  000D9C  0012               	return	
  2105  000D9E                     __end_of_enableWrite:
  2106                           	opt stack 0
  2107                           tblptru	equ	0xFF8
  2108                           tblptrh	equ	0xFF7
  2109                           wreg	equ	0xFE8
  2110                           status	equ	0xFD8
  2111                           
  2112 ;; *************** function _bulkErase *****************
  2113 ;; Defined at:
  2114 ;;		line 66 in file "../src/PIC18/FlashProg.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;		None
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;  i               2   17[COMRAM] int 
  2119 ;; Return value:  Size  Location     Type
  2120 ;;		None               void
  2121 ;; Registers used:
  2122 ;;		wreg, status,2, status,0, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2128 ;;      Params:         0       0       0       0       0       0       0
  2129 ;;      Locals:         2       0       0       0       0       0       0
  2130 ;;      Temps:          0       0       0       0       0       0       0
  2131 ;;      Totals:         2       0       0       0       0       0       0
  2132 ;;Total ram usage:        2 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    4
  2135 ;; This function calls:
  2136 ;;		_writeBits
  2137 ;;		_writeICSP
  2138 ;; This function is called by:
  2139 ;;		_main
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text19
  2144  000932                     __ptext19:
  2145                           	opt stack 0
  2146  000932                     _bulkErase:
  2147                           	opt stack 25
  2148                           
  2149                           ;FlashProg.c: 67: int i = 0;
  2150                           
  2151                           ;incstack = 0
  2152  000932  0E00               	movlw	0
  2153  000934  6E13               	movwf	bulkErase@i+1,c
  2154  000936  0E00               	movlw	0
  2155  000938  6E12               	movwf	bulkErase@i,c
  2156                           
  2157                           ;FlashProg.c: 68: writeICSP(0x0, 0x0e3c);
  2158  00093A  0E00               	movlw	0
  2159  00093C  6E0F               	movwf	writeICSP@commandByte+1,c
  2160  00093E  0E00               	movlw	0
  2161  000940  6E0E               	movwf	writeICSP@commandByte,c
  2162  000942  0E0E               	movlw	14
  2163  000944  6E11               	movwf	writeICSP@dataBytes+1,c
  2164  000946  0E3C               	movlw	60
  2165  000948  6E10               	movwf	writeICSP@dataBytes,c
  2166  00094A  ECCF  F006         	call	_writeICSP	;wreg free
  2167                           
  2168                           ;FlashProg.c: 69: writeICSP(0x0, 0x6ef8);
  2169  00094E  0E00               	movlw	0
  2170  000950  6E0F               	movwf	writeICSP@commandByte+1,c
  2171  000952  0E00               	movlw	0
  2172  000954  6E0E               	movwf	writeICSP@commandByte,c
  2173  000956  0E6E               	movlw	110
  2174  000958  6E11               	movwf	writeICSP@dataBytes+1,c
  2175  00095A  0EF8               	movlw	248
  2176  00095C  6E10               	movwf	writeICSP@dataBytes,c
  2177  00095E  ECCF  F006         	call	_writeICSP	;wreg free
  2178                           
  2179                           ;FlashProg.c: 70: writeICSP(0x0, 0x0e00);
  2180  000962  0E00               	movlw	0
  2181  000964  6E0F               	movwf	writeICSP@commandByte+1,c
  2182  000966  0E00               	movlw	0
  2183  000968  6E0E               	movwf	writeICSP@commandByte,c
  2184  00096A  0E0E               	movlw	14
  2185  00096C  6E11               	movwf	writeICSP@dataBytes+1,c
  2186  00096E  0E00               	movlw	0
  2187  000970  6E10               	movwf	writeICSP@dataBytes,c
  2188  000972  ECCF  F006         	call	_writeICSP	;wreg free
  2189                           
  2190                           ;FlashProg.c: 71: writeICSP(0x0, 0x6ef7);
  2191  000976  0E00               	movlw	0
  2192  000978  6E0F               	movwf	writeICSP@commandByte+1,c
  2193  00097A  0E00               	movlw	0
  2194  00097C  6E0E               	movwf	writeICSP@commandByte,c
  2195  00097E  0E6E               	movlw	110
  2196  000980  6E11               	movwf	writeICSP@dataBytes+1,c
  2197  000982  0EF7               	movlw	247
  2198  000984  6E10               	movwf	writeICSP@dataBytes,c
  2199  000986  ECCF  F006         	call	_writeICSP	;wreg free
  2200                           
  2201                           ;FlashProg.c: 72: writeICSP(0x0, 0x0e05);
  2202  00098A  0E00               	movlw	0
  2203  00098C  6E0F               	movwf	writeICSP@commandByte+1,c
  2204  00098E  0E00               	movlw	0
  2205  000990  6E0E               	movwf	writeICSP@commandByte,c
  2206  000992  0E0E               	movlw	14
  2207  000994  6E11               	movwf	writeICSP@dataBytes+1,c
  2208  000996  0E05               	movlw	5
  2209  000998  6E10               	movwf	writeICSP@dataBytes,c
  2210  00099A  ECCF  F006         	call	_writeICSP	;wreg free
  2211                           
  2212                           ;FlashProg.c: 73: writeICSP(0x0, 0x6ef6);
  2213  00099E  0E00               	movlw	0
  2214  0009A0  6E0F               	movwf	writeICSP@commandByte+1,c
  2215  0009A2  0E00               	movlw	0
  2216  0009A4  6E0E               	movwf	writeICSP@commandByte,c
  2217  0009A6  0E6E               	movlw	110
  2218  0009A8  6E11               	movwf	writeICSP@dataBytes+1,c
  2219  0009AA  0EF6               	movlw	246
  2220  0009AC  6E10               	movwf	writeICSP@dataBytes,c
  2221  0009AE  ECCF  F006         	call	_writeICSP	;wreg free
  2222                           
  2223                           ;FlashProg.c: 74: writeICSP(0xc, 0x3f3f);
  2224  0009B2  0E00               	movlw	0
  2225  0009B4  6E0F               	movwf	writeICSP@commandByte+1,c
  2226  0009B6  0E0C               	movlw	12
  2227  0009B8  6E0E               	movwf	writeICSP@commandByte,c
  2228  0009BA  0E3F               	movlw	63
  2229  0009BC  6E11               	movwf	writeICSP@dataBytes+1,c
  2230  0009BE  0E3F               	movlw	63
  2231  0009C0  6E10               	movwf	writeICSP@dataBytes,c
  2232  0009C2  ECCF  F006         	call	_writeICSP	;wreg free
  2233                           
  2234                           ;FlashProg.c: 75: writeICSP(0x0, 0x0e3c);
  2235  0009C6  0E00               	movlw	0
  2236  0009C8  6E0F               	movwf	writeICSP@commandByte+1,c
  2237  0009CA  0E00               	movlw	0
  2238  0009CC  6E0E               	movwf	writeICSP@commandByte,c
  2239  0009CE  0E0E               	movlw	14
  2240  0009D0  6E11               	movwf	writeICSP@dataBytes+1,c
  2241  0009D2  0E3C               	movlw	60
  2242  0009D4  6E10               	movwf	writeICSP@dataBytes,c
  2243  0009D6  ECCF  F006         	call	_writeICSP	;wreg free
  2244                           
  2245                           ;FlashProg.c: 76: writeICSP(0x0, 0x6ef8);
  2246  0009DA  0E00               	movlw	0
  2247  0009DC  6E0F               	movwf	writeICSP@commandByte+1,c
  2248  0009DE  0E00               	movlw	0
  2249  0009E0  6E0E               	movwf	writeICSP@commandByte,c
  2250  0009E2  0E6E               	movlw	110
  2251  0009E4  6E11               	movwf	writeICSP@dataBytes+1,c
  2252  0009E6  0EF8               	movlw	248
  2253  0009E8  6E10               	movwf	writeICSP@dataBytes,c
  2254  0009EA  ECCF  F006         	call	_writeICSP	;wreg free
  2255                           
  2256                           ;FlashProg.c: 77: writeICSP(0x0, 0x0e00);
  2257  0009EE  0E00               	movlw	0
  2258  0009F0  6E0F               	movwf	writeICSP@commandByte+1,c
  2259  0009F2  0E00               	movlw	0
  2260  0009F4  6E0E               	movwf	writeICSP@commandByte,c
  2261  0009F6  0E0E               	movlw	14
  2262  0009F8  6E11               	movwf	writeICSP@dataBytes+1,c
  2263  0009FA  0E00               	movlw	0
  2264  0009FC  6E10               	movwf	writeICSP@dataBytes,c
  2265  0009FE  ECCF  F006         	call	_writeICSP	;wreg free
  2266                           
  2267                           ;FlashProg.c: 78: writeICSP(0x0, 0x6ef7);
  2268  000A02  0E00               	movlw	0
  2269  000A04  6E0F               	movwf	writeICSP@commandByte+1,c
  2270  000A06  0E00               	movlw	0
  2271  000A08  6E0E               	movwf	writeICSP@commandByte,c
  2272  000A0A  0E6E               	movlw	110
  2273  000A0C  6E11               	movwf	writeICSP@dataBytes+1,c
  2274  000A0E  0EF7               	movlw	247
  2275  000A10  6E10               	movwf	writeICSP@dataBytes,c
  2276  000A12  ECCF  F006         	call	_writeICSP	;wreg free
  2277                           
  2278                           ;FlashProg.c: 79: writeICSP(0x0, 0x0e04);
  2279  000A16  0E00               	movlw	0
  2280  000A18  6E0F               	movwf	writeICSP@commandByte+1,c
  2281  000A1A  0E00               	movlw	0
  2282  000A1C  6E0E               	movwf	writeICSP@commandByte,c
  2283  000A1E  0E0E               	movlw	14
  2284  000A20  6E11               	movwf	writeICSP@dataBytes+1,c
  2285  000A22  0E04               	movlw	4
  2286  000A24  6E10               	movwf	writeICSP@dataBytes,c
  2287  000A26  ECCF  F006         	call	_writeICSP	;wreg free
  2288                           
  2289                           ;FlashProg.c: 80: writeICSP(0x0, 0x6ef6);
  2290  000A2A  0E00               	movlw	0
  2291  000A2C  6E0F               	movwf	writeICSP@commandByte+1,c
  2292  000A2E  0E00               	movlw	0
  2293  000A30  6E0E               	movwf	writeICSP@commandByte,c
  2294  000A32  0E6E               	movlw	110
  2295  000A34  6E11               	movwf	writeICSP@dataBytes+1,c
  2296  000A36  0EF6               	movlw	246
  2297  000A38  6E10               	movwf	writeICSP@dataBytes,c
  2298  000A3A  ECCF  F006         	call	_writeICSP	;wreg free
  2299                           
  2300                           ;FlashProg.c: 81: writeICSP(0xc, 0x8f8f);
  2301  000A3E  0E00               	movlw	0
  2302  000A40  6E0F               	movwf	writeICSP@commandByte+1,c
  2303  000A42  0E0C               	movlw	12
  2304  000A44  6E0E               	movwf	writeICSP@commandByte,c
  2305  000A46  0E8F               	movlw	143
  2306  000A48  6E11               	movwf	writeICSP@dataBytes+1,c
  2307  000A4A  0E8F               	movlw	143
  2308  000A4C  6E10               	movwf	writeICSP@dataBytes,c
  2309  000A4E  ECCF  F006         	call	_writeICSP	;wreg free
  2310                           
  2311                           ;FlashProg.c: 82: writeICSP(0x0, 0);
  2312  000A52  0E00               	movlw	0
  2313  000A54  6E0F               	movwf	writeICSP@commandByte+1,c
  2314  000A56  0E00               	movlw	0
  2315  000A58  6E0E               	movwf	writeICSP@commandByte,c
  2316  000A5A  0E00               	movlw	0
  2317  000A5C  6E11               	movwf	writeICSP@dataBytes+1,c
  2318  000A5E  0E00               	movlw	0
  2319  000A60  6E10               	movwf	writeICSP@dataBytes,c
  2320  000A62  ECCF  F006         	call	_writeICSP	;wreg free
  2321                           
  2322                           ;FlashProg.c: 83: writeBits(0, 4);
  2323  000A66  0E00               	movlw	0
  2324  000A68  6E06               	movwf	writeBits@pattern+1,c
  2325  000A6A  0E00               	movlw	0
  2326  000A6C  6E05               	movwf	writeBits@pattern,c
  2327  000A6E  0E00               	movlw	0
  2328  000A70  6E08               	movwf	writeBits@bitsToWrite+1,c
  2329  000A72  0E04               	movlw	4
  2330  000A74  6E07               	movwf	writeBits@bitsToWrite,c
  2331  000A76  EC81  F006         	call	_writeBits	;wreg free
  2332                           
  2333                           ;FlashProg.c: 84: for(i = 0; i < 200 ; i++){}
  2334  000A7A  0E00               	movlw	0
  2335  000A7C  6E13               	movwf	bulkErase@i+1,c
  2336  000A7E  0E00               	movlw	0
  2337  000A80  6E12               	movwf	bulkErase@i,c
  2338  000A82  5013               	movf	bulkErase@i+1,w,c
  2339  000A84  0A80               	xorlw	128
  2340  000A86  0F80               	addlw	-128
  2341  000A88  0EC8               	movlw	200
  2342  000A8A  B4D8               	btfsc	status,2,c
  2343  000A8C  5C12               	subwf	bulkErase@i,w,c
  2344  000A8E  B0D8               	btfsc	status,0,c
  2345  000A90  D003               	goto	l981
  2346  000A92  4A12               	infsnz	bulkErase@i,f,c
  2347  000A94  2A13               	incf	bulkErase@i+1,f,c
  2348  000A96  D7F5               	goto	L12
  2349  000A98                     l981:
  2350                           
  2351                           ;FlashProg.c: 85: writeBits(0, 16);
  2352  000A98  0E00               	movlw	0
  2353  000A9A  6E06               	movwf	writeBits@pattern+1,c
  2354  000A9C  0E00               	movlw	0
  2355  000A9E  6E05               	movwf	writeBits@pattern,c
  2356  000AA0  0E00               	movlw	0
  2357  000AA2  6E08               	movwf	writeBits@bitsToWrite+1,c
  2358  000AA4  0E10               	movlw	16
  2359  000AA6  6E07               	movwf	writeBits@bitsToWrite,c
  2360  000AA8  EC81  F006         	call	_writeBits	;wreg free
  2361  000AAC  0012               	return	
  2362  000AAE                     __end_of_bulkErase:
  2363                           	opt stack 0
  2364                           tblptru	equ	0xFF8
  2365                           tblptrh	equ	0xFF7
  2366                           wreg	equ	0xFE8
  2367                           status	equ	0xFD8
  2368                           
  2369 ;; *************** function _writeICSP *****************
  2370 ;; Defined at:
  2371 ;;		line 5 in file "../src/PIC18/ICSP.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  commandByte     2   13[COMRAM] unsigned int 
  2374 ;;  dataBytes       2   15[COMRAM] unsigned int 
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;		None
  2377 ;; Return value:  Size  Location     Type
  2378 ;;		None               void
  2379 ;; Registers used:
  2380 ;;		wreg, status,2, status,0, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2386 ;;      Params:         4       0       0       0       0       0       0
  2387 ;;      Locals:         0       0       0       0       0       0       0
  2388 ;;      Temps:          0       0       0       0       0       0       0
  2389 ;;      Totals:         4       0       0       0       0       0       0
  2390 ;;Total ram usage:        4 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    3
  2393 ;; This function calls:
  2394 ;;		_writeBits
  2395 ;; This function is called by:
  2396 ;;		_bulkErase
  2397 ;;		_enableWrite
  2398 ;;		_flashSetAddress
  2399 ;;		_flashWriteData
  2400 ;;		_flashWriteAndProgram
  2401 ;;		_main
  2402 ;;		_readDeviceID1
  2403 ;;		_readDeviceID2
  2404 ;;		_flashWrite8Bits
  2405 ;;		_rowErase
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text20
  2410  000D9E                     __ptext20:
  2411                           	opt stack 0
  2412  000D9E                     _writeICSP:
  2413                           	opt stack 26
  2414                           
  2415                           ;ICSP.c: 6: writeBits(commandByte, 4);
  2416                           
  2417                           ;incstack = 0
  2418  000D9E  C00E  F005         	movff	writeICSP@commandByte,writeBits@pattern
  2419  000DA2  C00F  F006         	movff	writeICSP@commandByte+1,writeBits@pattern+1
  2420  000DA6  0E00               	movlw	0
  2421  000DA8  6E08               	movwf	writeBits@bitsToWrite+1,c
  2422  000DAA  0E04               	movlw	4
  2423  000DAC  6E07               	movwf	writeBits@bitsToWrite,c
  2424  000DAE  EC81  F006         	call	_writeBits	;wreg free
  2425                           
  2426                           ;ICSP.c: 7: writeBits(dataBytes, 16);
  2427  000DB2  C010  F005         	movff	writeICSP@dataBytes,writeBits@pattern
  2428  000DB6  C011  F006         	movff	writeICSP@dataBytes+1,writeBits@pattern+1
  2429  000DBA  0E00               	movlw	0
  2430  000DBC  6E08               	movwf	writeBits@bitsToWrite+1,c
  2431  000DBE  0E10               	movlw	16
  2432  000DC0  6E07               	movwf	writeBits@bitsToWrite,c
  2433  000DC2  EC81  F006         	call	_writeBits	;wreg free
  2434  000DC6  0012               	return	
  2435  000DC8                     __end_of_writeICSP:
  2436                           	opt stack 0
  2437                           tblptru	equ	0xFF8
  2438                           tblptrh	equ	0xFF7
  2439                           wreg	equ	0xFE8
  2440                           status	equ	0xFD8
  2441                           
  2442 ;; *************** function _writeBits *****************
  2443 ;; Defined at:
  2444 ;;		line 16 in file "../src/PIC18/ICSP.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  pattern         2    4[COMRAM] unsigned int 
  2447 ;;  bitsToWrite     2    6[COMRAM] unsigned int 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  i               2   11[COMRAM] int 
  2450 ;; Return value:  Size  Location     Type
  2451 ;;		None               void
  2452 ;; Registers used:
  2453 ;;		wreg, status,2, status,0, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2459 ;;      Params:         4       0       0       0       0       0       0
  2460 ;;      Locals:         2       0       0       0       0       0       0
  2461 ;;      Temps:          3       0       0       0       0       0       0
  2462 ;;      Totals:         9       0       0       0       0       0       0
  2463 ;;Total ram usage:        9 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    2
  2466 ;; This function calls:
  2467 ;;		_writeBit
  2468 ;; This function is called by:
  2469 ;;		_bulkErase
  2470 ;;		_flashWriteAndProgram
  2471 ;;		_writeICSP
  2472 ;;		_readICSP
  2473 ;;		_readFirstByte
  2474 ;;		_main
  2475 ;;		_flashWrite8Bits
  2476 ;;		_rowErase
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           	psect	text21
  2481  000D02                     __ptext21:
  2482                           	opt stack 0
  2483  000D02                     _writeBits:
  2484                           	opt stack 26
  2485                           
  2486                           ;ICSP.c: 17: int i=0;
  2487                           
  2488                           ;incstack = 0
  2489  000D02  0E00               	movlw	0
  2490  000D04  6E0D               	movwf	writeBits@i+1,c
  2491  000D06  0E00               	movlw	0
  2492  000D08  6E0C               	movwf	writeBits@i,c
  2493                           
  2494                           ;ICSP.c: 18: (TRISDbits.TRISD4 = 0);
  2495  000D0A  9895               	bcf	3989,4,c	;volatile
  2496                           
  2497                           ;ICSP.c: 19: while(i < bitsToWrite){
  2498  000D0C  D015               	goto	l879
  2499  000D0E                     l875:
  2500                           
  2501                           ;ICSP.c: 20: writeBit(((pattern>>i)&0x1));
  2502  000D0E  C00C  F009         	movff	writeBits@i,??_writeBits
  2503  000D12  C005  F00A         	movff	writeBits@pattern,??_writeBits+1
  2504  000D16  C006  F00B         	movff	writeBits@pattern+1,??_writeBits+2
  2505  000D1A  2A09               	incf	??_writeBits,f,c
  2506  000D1C  D003               	goto	u34
  2507  000D1E                     u35:
  2508  000D1E  90D8               	bcf	status,0,c
  2509  000D20  320B               	rrcf	??_writeBits+2,f,c
  2510  000D22  320A               	rrcf	??_writeBits+1,f,c
  2511  000D24                     u34:
  2512  000D24  2E09               	decfsz	??_writeBits,f,c
  2513  000D26  D7FB               	goto	u35
  2514  000D28  0E01               	movlw	1
  2515  000D2A  140A               	andwf	??_writeBits+1,w,c
  2516  000D2C  6E03               	movwf	writeBit@bitToWrite,c
  2517  000D2E  6A04               	clrf	writeBit@bitToWrite+1,c
  2518  000D30  EC09  F007         	call	_writeBit	;wreg free
  2519                           
  2520                           ;ICSP.c: 21: i++;
  2521  000D34  4A0C               	infsnz	writeBits@i,f,c
  2522  000D36  2A0D               	incf	writeBits@i+1,f,c
  2523  000D38                     l879:
  2524  000D38  5007               	movf	writeBits@bitsToWrite,w,c
  2525  000D3A  5C0C               	subwf	writeBits@i,w,c
  2526  000D3C  5008               	movf	writeBits@bitsToWrite+1,w,c
  2527  000D3E  580D               	subwfb	writeBits@i+1,w,c
  2528  000D40  B0D8               	btfsc	status,0,c
  2529  000D42  0012               	return	
  2530  000D44  D7E4               	goto	l875
  2531  000D46                     __end_of_writeBits:
  2532                           	opt stack 0
  2533                           tblptru	equ	0xFF8
  2534                           tblptrh	equ	0xFF7
  2535                           wreg	equ	0xFE8
  2536                           status	equ	0xFD8
  2537                           
  2538 ;; *************** function _writeBit *****************
  2539 ;; Defined at:
  2540 ;;		line 10 in file "../src/PIC18/ICSP.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  bitToWrite      2    2[COMRAM] unsigned int 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;		None
  2545 ;; Return value:  Size  Location     Type
  2546 ;;		None               void
  2547 ;; Registers used:
  2548 ;;		cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2554 ;;      Params:         2       0       0       0       0       0       0
  2555 ;;      Locals:         0       0       0       0       0       0       0
  2556 ;;      Temps:          0       0       0       0       0       0       0
  2557 ;;      Totals:         2       0       0       0       0       0       0
  2558 ;;Total ram usage:        2 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    1
  2561 ;; This function calls:
  2562 ;;		_PGC_high
  2563 ;;		_PGC_low
  2564 ;;		_writePGD
  2565 ;; This function is called by:
  2566 ;;		_writeBits
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text22
  2571  000E12                     __ptext22:
  2572                           	opt stack 0
  2573  000E12                     _writeBit:
  2574                           	opt stack 26
  2575                           
  2576                           ;ICSP.c: 11: PGC_high();
  2577                           
  2578                           ;incstack = 0
  2579  000E12  EC51  F007         	call	_PGC_high	;wreg free
  2580                           
  2581                           ;ICSP.c: 12: writePGD(bitToWrite);
  2582  000E16  C003  F001         	movff	writeBit@bitToWrite,writePGD@data
  2583  000E1A  C004  F002         	movff	writeBit@bitToWrite+1,writePGD@data+1
  2584  000E1E  EC3E  F007         	call	_writePGD	;wreg free
  2585                           
  2586                           ;ICSP.c: 13: PGC_low();
  2587  000E22  EC4F  F007         	call	_PGC_low	;wreg free
  2588  000E26  0012               	return	
  2589  000E28                     __end_of_writeBit:
  2590                           	opt stack 0
  2591                           tblptru	equ	0xFF8
  2592                           tblptrh	equ	0xFF7
  2593                           wreg	equ	0xFE8
  2594                           status	equ	0xFD8
  2595                           
  2596 ;; *************** function _writePGD *****************
  2597 ;; Defined at:
  2598 ;;		line 11 in file "../src/PIC18/FlashProg.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;  data            2    0[COMRAM] int 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;		None
  2603 ;; Return value:  Size  Location     Type
  2604 ;;		None               void
  2605 ;; Registers used:
  2606 ;;		None
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2612 ;;      Params:         2       0       0       0       0       0       0
  2613 ;;      Locals:         0       0       0       0       0       0       0
  2614 ;;      Temps:          0       0       0       0       0       0       0
  2615 ;;      Totals:         2       0       0       0       0       0       0
  2616 ;;Total ram usage:        2 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; This function calls:
  2619 ;;		Nothing
  2620 ;; This function is called by:
  2621 ;;		_PGD_low
  2622 ;;		_MCLR_low
  2623 ;;		_writeBit
  2624 ;;		_PGD_high
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text23
  2629  000E7C                     __ptext23:
  2630                           	opt stack 0
  2631  000E7C                     _writePGD:
  2632                           	opt stack 26
  2633                           
  2634                           ;FlashProg.c: 12: PORTDbits.RD4 = data;
  2635                           
  2636                           ;incstack = 0
  2637  000E7C  B001               	btfsc	writePGD@data,0,c
  2638  000E7E  D002               	bra	u25
  2639  000E80  9883               	bcf	3971,4,c	;volatile
  2640  000E82  D001               	bra	u26
  2641  000E84                     u25:
  2642  000E84  8883               	bsf	3971,4,c	;volatile
  2643  000E86                     u26:
  2644  000E86  0012               	return	
  2645  000E88                     __end_of_writePGD:
  2646                           	opt stack 0
  2647                           tblptru	equ	0xFF8
  2648                           tblptrh	equ	0xFF7
  2649                           wreg	equ	0xFE8
  2650                           status	equ	0xFD8
  2651                           
  2652 ;; *************** function _PGC_low *****************
  2653 ;; Defined at:
  2654 ;;		line 27 in file "../src/PIC18/FlashProg.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;		None               void
  2661 ;; Registers used:
  2662 ;;		None
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2668 ;;      Params:         0       0       0       0       0       0       0
  2669 ;;      Locals:         0       0       0       0       0       0       0
  2670 ;;      Temps:          0       0       0       0       0       0       0
  2671 ;;      Totals:         0       0       0       0       0       0       0
  2672 ;;Total ram usage:        0 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; This function calls:
  2675 ;;		Nothing
  2676 ;; This function is called by:
  2677 ;;		_enter_HVP
  2678 ;;		_exit_HVP
  2679 ;;		_flashWriteAndProgram
  2680 ;;		_writeBit
  2681 ;;		_readBit
  2682 ;;		_main
  2683 ;;		_flashWrite8Bits
  2684 ;;		_rowErase
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text24
  2689  000E9E                     __ptext24:
  2690                           	opt stack 0
  2691  000E9E                     _PGC_low:
  2692                           	opt stack 26
  2693                           
  2694                           ;FlashProg.c: 28: PORTDbits.RD5 = 0;
  2695                           
  2696                           ;incstack = 0
  2697  000E9E  9A83               	bcf	3971,5,c	;volatile
  2698  000EA0  0012               	return	
  2699  000EA2                     __end_of_PGC_low:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           tblptrh	equ	0xFF7
  2703                           wreg	equ	0xFE8
  2704                           status	equ	0xFD8
  2705                           
  2706 ;; *************** function _PGC_high *****************
  2707 ;; Defined at:
  2708 ;;		line 23 in file "../src/PIC18/FlashProg.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;		None
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;		None
  2713 ;; Return value:  Size  Location     Type
  2714 ;;		None               void
  2715 ;; Registers used:
  2716 ;;		None
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2722 ;;      Params:         0       0       0       0       0       0       0
  2723 ;;      Locals:         0       0       0       0       0       0       0
  2724 ;;      Temps:          0       0       0       0       0       0       0
  2725 ;;      Totals:         0       0       0       0       0       0       0
  2726 ;;Total ram usage:        0 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_flashWriteAndProgram
  2732 ;;		_writeBit
  2733 ;;		_readBit
  2734 ;;		_main
  2735 ;;		_flashWrite8Bits
  2736 ;;		_rowErase
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           	psect	text25
  2741  000EA2                     __ptext25:
  2742                           	opt stack 0
  2743  000EA2                     _PGC_high:
  2744                           	opt stack 26
  2745                           
  2746                           ;FlashProg.c: 24: PORTDbits.RD5 = 1;
  2747                           
  2748                           ;incstack = 0
  2749  000EA2  8A83               	bsf	3971,5,c	;volatile
  2750  000EA4  0012               	return	
  2751  000EA6                     __end_of_PGC_high:
  2752                           	opt stack 0
  2753                           tblptru	equ	0xFF8
  2754                           tblptrh	equ	0xFF7
  2755                           wreg	equ	0xFE8
  2756                           status	equ	0xFD8
  2757                           tblptru	equ	0xFF8
  2758                           tblptrh	equ	0xFF7
  2759                           wreg	equ	0xFE8
  2760                           status	equ	0xFD8
  2761                           
  2762                           	psect	rparam
  2763  0000                     tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           wreg	equ	0xFE8
  2766                           status	equ	0xFD8


Data Sizes:
    Strings     5
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     55      55
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    S347$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_flashSetAddress
    _flashWriteData->_writeICSP
    _flashWriteAndProgram->_writeICSP
    _flashSetAddress->_writeICSP
    _flashRead16Bits->_readFirstByte
    _flashRead16Bits->_readICSP
    _readICSP->_readBits
    _readFirstByte->_readBits
    _readBits->_readBit
    _readBit->_readPGD
    _PGD_low->_writePGD
    _MCLR_low->_writePGD
    _enableWrite->_writeICSP
    _bulkErase->_writeICSP
    _writeICSP->_writeBits
    _writeBits->_writeBit
    _writeBit->_writePGD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   59128
                                             37 COMRAM    18    18      0
                           _PGC_high
                            _PGC_low
                            _PGD_low
                          _bulkErase
                        _enableWrite
                          _enter_HVP
                           _exit_HVP
                    _flashRead16Bits
                    _flashSetAddress
               _flashWriteAndProgram
                     _flashWriteData
                           _trisInit
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _trisInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flashWriteData                                       4     0      4    7661
                                             17 COMRAM     4     0      4
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _flashWriteAndProgram                                 6     2      4   10211
                                             17 COMRAM     6     2      4
                           _PGC_high
                            _PGC_low
                            _PGD_low
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _flashSetAddress                                     20    16      4    8160
                                             17 COMRAM    20    16      4
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _flashRead16Bits                                      6     4      2    4796
                                             18 COMRAM     6     4      2
                      _readFirstByte
                           _readICSP
 ---------------------------------------------------------------------------------
 (2) _readICSP                                             4     2      2    2368
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (2) _readFirstByte                                        4     2      2    2383
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (3) _readBits                                             7     5      2     196
                                              7 COMRAM     7     5      2
                            _readBit
 ---------------------------------------------------------------------------------
 (4) _readBit                                              4     2      2      15
                                              3 COMRAM     4     2      2
                           _PGC_high
                            _PGC_low
                            _readPGD
 ---------------------------------------------------------------------------------
 (5) _readPGD                                              3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _exit_HVP                                             0     0      0     454
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                            _PGM_low
 ---------------------------------------------------------------------------------
 (2) _PGM_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enter_HVP                                            0     0      0     454
                          _MCLR_high
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                           _PGM_high
 ---------------------------------------------------------------------------------
 (2) _PGM_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGD_low                                              0     0      0     227
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_low                                             0     0      0     227
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_high                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableWrite                                          0     0      0    7487
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _bulkErase                                            2     2      0    9674
                                             17 COMRAM     2     2      0
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _writeICSP                                            4     0      4    7487
                                             13 COMRAM     4     0      4
                          _writeBits
 ---------------------------------------------------------------------------------
 (2) _writeBits                                            9     5      4    2157
                                              4 COMRAM     9     5      4
                           _writeBit
 ---------------------------------------------------------------------------------
 (3) _writeBit                                             2     0      2     295
                                              2 COMRAM     2     0      2
                           _PGC_high
                            _PGC_low
                           _writePGD
 ---------------------------------------------------------------------------------
 (4) _writePGD                                             2     0      2     227
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _PGC_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _PGC_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PGC_high
   _PGC_low
   _PGD_low
     _writePGD
   _bulkErase
     _writeBits
       _writeBit
         _PGC_high
         _PGC_low
         _writePGD
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enableWrite
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enter_HVP
     _MCLR_high
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_high
   _exit_HVP
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_low
   _flashRead16Bits
     _readFirstByte
       _readBits
         _readBit
           _PGC_high
           _PGC_low
           _readPGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
     _readICSP
       _readBits
         _readBit
           _PGC_high
           _PGC_low
           _readPGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _flashSetAddress
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _flashWriteAndProgram
     _PGC_high
     _PGC_low
     _PGD_low
       _writePGD
     _writeBits
       _writeBit
         _PGC_high
         _PGC_low
         _writePGD
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _flashWriteData
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _trisInit
   _writeBits
     _writeBit
       _PGC_high
       _PGC_low
       _writePGD
   _writeICSP
     _writeBits
       _writeBit
         _PGC_high
         _PGC_low
         _writePGD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     37      37       1       43.3%
STACK                0      0       0       2        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BANK5               EF      0       0      13        0.0%
ABS                  0      0       0      14        0.0%
BITBANK5            EF      0       0      15        0.0%
BIGRAM             5EE      0       0      16        0.0%
DATA                 0      0       0      17        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Dec 05 03:08:32 2014

                           u10 0E32                             u25 0E84                             u26 0E86  
                           u34 0D24                             u18 0E34                             u35 0D1E  
                           u54 0C3E                             u55 0C38                             u90 0AFE  
                           u95 0AF4                            l221 0930                            l875 0D0E  
                          l981 0A98                            l885 0C2C                            l879 0D38  
                          l889 0C52           _flashWriteAndProgram 0B92                            wreg 000FE8  
                  main@address 0030       __size_of_flashRead16Bits 002E                   __CFG_LVP$OFF 000000  
                 __CFG_WDT$OFF 000000                           l1031 0C02                           l1019 0BE0  
                         l1305 0820                           l1243 06AC                           l1335 08C0  
                         l1319 0876                           l1263 0702                           l1361 092C  
                         l1347 08DE                           l1293 0802                           l1277 077C  
                         STR_1 060B                  __CFG_DEBUG$ON 000000                __end_of_PGC_low 0EA2  
                 __CFG_PWRT$ON 000000                __end_of_PGD_low 0E7C                __end_of_PGM_low 0E96  
                         _main 0612                           start 0002             __size_of_MCLR_high 0004  
             __end_of_MCLR_low 0E60                          ?_main 0001          ?_flashWriteAndProgram 0012  
     __size_of_flashSetAddress 00E4               __end_of_PGC_high 0EA6               __end_of_PGM_high 0E9A  
              __end_of_readPGD 0E3C                __end_of_dpowers 060B                __end_of_readBit 0DE6  
                        main@a 002E                          main@b 0026                          main@c 0028  
                        main@d 002A                          main@e 002C                          main@i 0036  
                        status 000FD8                __initialization 0E60                   __end_of_main 0932  
       __size_of_readFirstByte 004C             flashWriteData@data 0012                         ??_main 0026  
                __activetblptr 000001                      ??_PGC_low 0001                      ??_PGD_low 0003  
            __end_of_MCLR_high 0E9E                    readBit@data 0006           __size_of_enableWrite 002A  
                    ??_PGM_low 0001               ??_flashWriteData 0016              ??_flashRead16Bits 0015  
            readFirstByte@data 0011               __end_of_readICSP 0D02               __end_of_readBits 0C70  
             __end_of_exit_HVP 0E4E         ??_flashWriteAndProgram 0016                      ??_readPGD 0003  
                    ??_readBit 0006                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptru 000FF8               __end_of_trisInit 0E92              ??_flashSetAddress 0016  
        flashWriteAndProgram@i 0016               __end_of_writePGD 0E88               __end_of_writeBit 0E28  
                _readFirstByte 0C70                     __accesstop 0080        __end_of__initialization 0E60  
                 readICSP@data 0011                      ?_MCLR_low 0001                      ?_PGC_high 0001  
               __pcstackCOMRAM 0001                      ?_PGM_high 0001             __size_of_bulkErase 017C  
               ?_readFirstByte 000F             __size_of_enter_HVP 0016                     ??_MCLR_low 0003  
                   ??_PGC_high 0001                     ??_PGM_high 0001                   readBits@data 000D  
                      _PGC_low 0E9E                        _PGD_low 0E6E                        _PGM_low 0E92  
                    ?_readICSP 000F                      ?_readBits 0008                      ?_exit_HVP 0001  
           __size_of_writeICSP 002A             __size_of_writeBits 0044                        __Hparam 0000  
                      __Lparam 0000              __end_of_bulkErase 0AAE             writeBit@bitToWrite 0003  
                    ?_trisInit 0001                   __psmallconst 0600              __end_of_enter_HVP 0E12  
                      __pcinit 0E60                        __ramtop 0600                      ?_writePGD 0001  
                    ?_writeBit 0003                        __ptext0 0612                        __ptext1 0E88  
                      __ptext2 0DE6                        __ptext3 0B92                        __ptext4 0AAE  
                      __ptext5 0D46                        __ptext6 0CBC                        __ptext7 0C70  
                      __ptext8 0C18                        __ptext9 0DC8                        _readPGD 0E28  
                      _dpowers 0601                        _readBit 0DC8                   writePGD@data 0001  
              _flashRead16Bits 0D46                ??_readFirstByte 0011           end_of_initialization 0E60  
                   ??_readICSP 0011                      _MCLR_high 0E9A                     ??_readBits 000A  
                   ??_exit_HVP 0003         flashSetAddress@address 0012         flashSetAddress@lowAddr 0022  
                   ??_trisInit 0001                     ??_writePGD 0003                     ??_writeBit 0005  
              _flashSetAddress 0AAE                      _PORTDbits 000F83              __end_of_writeICSP 0DC8  
            __end_of_writeBits 0D46                  ??_enableWrite 0012                      _TRISDbits 000F95  
             writeBits@pattern 0005                     ?_MCLR_high 0001                     bulkErase@i 0012  
            __size_of_MCLR_low 0012              __size_of_PGC_high 0004        __end_of_flashRead16Bits 0D74  
            __size_of_PGM_high 0004  __size_of_flashWriteAndProgram 0086           writeICSP@commandByte 000E  
          start_initialization 0E60            __end_of_enableWrite 0D9E               __CFG_OSC$INTIO67 000000  
      __size_of_flashWriteData 0016        __end_of_flashSetAddress 0B92             writeICSP@dataBytes 0010  
                     ?_PGC_low 0001                       ?_PGD_low 0001            __end_of__stringdata 0610  
                     ?_PGM_low 0001                    ??_MCLR_high 0001              __size_of_readICSP 0046  
            __size_of_readBits 0058              __size_of_exit_HVP 0012               ?_flashRead16Bits 0013  
                    _bulkErase 0932              __size_of_trisInit 000A                       ?_readPGD 0001  
                  __smallconst 0600                       ?_readBit 0004       flashRead16Bits@firstData 0015  
                    _enter_HVP 0DFC              __size_of_writePGD 000C                    _enableWrite 0D74  
            __size_of_writeBit 0016                       _MCLR_low 0E4E                       _PGC_high 0EA2  
             ?_flashSetAddress 0012                       _PGM_high 0E96                     ?_bulkErase 0001  
                  __stringdata 060B                     ?_enter_HVP 0001                      _writeICSP 0D9E  
                    _writeBits 0D02               __size_of_PGC_low 0004               __size_of_PGD_low 000E  
           readBits@bitsToRead 0008               __size_of_PGM_low 0004          __end_of_readFirstByte 0CBC  
                    readBits@i 000B                       __Hrparam 0000                 _flashWriteData 0DE6  
                     __Lrparam 0000                   __Lsmallconst 0600               __size_of_readPGD 0014  
             __size_of_readBit 001E                     ?_writeICSP 000E                       __ptext10 0E28  
                     __ptext11 0E3C                       __ptext20 0D9E                       __ptext12 0E92  
                     __ptext21 0D02                       __ptext13 0DFC                       __ptext22 0E12  
                     __ptext14 0E96                       __ptext23 0E7C                       __ptext15 0E6E  
                     __ptext24 0E9E                       __ptext16 0E4E                       __ptext25 0EA2  
                     __ptext17 0E9A                       __ptext18 0D74                       __ptext19 0932  
                   ?_writeBits 0005                       _readICSP 0CBC                       _readBits 0C18  
                     _exit_HVP 0E3C                  __size_of_main 0320   __end_of_flashWriteAndProgram 0C18  
       __end_of_flashWriteData 0DFC           writeBits@bitsToWrite 0007                     writeBits@i 000C  
                     _trisInit 0E88                       main@data 0034                    ??_bulkErase 0012  
                     _writePGD 0E7C                       _writeBit 0E12                    ??_enter_HVP 0003  
              ?_flashWriteData 0012        flashSetAddress@highAddr 001E       flashWriteAndProgram@data 0012  
     flashSetAddress@upperAddr 001A                   ?_enableWrite 0001                    ??_writeICSP 0012  
                  ??_writeBits 0009            flashRead16Bits@data 0017  
