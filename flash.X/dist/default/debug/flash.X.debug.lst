

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Dec 12 01:17:58 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46  0000                     _PORTDbits	set	3971
    47  0000                     _TRISDbits	set	3989
    48                           
    49 ;;
    50 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
    51 ;;
    52 ;; *************** function _main *****************
    53 ;; Defined at:
    54 ;;		line 29 in file "../src/PIC18/Main.c"
    55 ;; Parameters:    Size  Location     Type
    56 ;;		None
    57 ;; Auto vars:     Size  Location     Type
    58 ;;  blockWrite5   128    0[BANK1 ] unsigned int [64]
    59 ;;  blockRead      64  128[BANK1 ] unsigned int [32]
    60 ;;  blockWrite3    32    0[BANK2 ] unsigned int [16]
    61 ;;  blockWrite2    32  224[BANK1 ] unsigned int [16]
    62 ;;  blockWrite1    32  192[BANK1 ] unsigned int [16]
    63 ;;  blockWrite0    32   86[BANK0 ] unsigned int [16]
    64 ;;  incomingData    8    0        unsigned int [4]
    65 ;;  address         4   73[COMRAM] unsigned long 
    66 ;;  i               2  118[BANK0 ] int 
    67 ;;  data5           2   87[COMRAM] unsigned int 
    68 ;;  data3           2   85[COMRAM] unsigned int 
    69 ;;  data2           2   83[COMRAM] unsigned int 
    70 ;;  data1           2   81[COMRAM] unsigned int 
    71 ;;  data0           2   79[COMRAM] unsigned int 
    72 ;;  data4           2   77[COMRAM] unsigned int 
    73 ;; Return value:  Size  Location     Type
    74 ;;		None               void
    75 ;; Registers used:
    76 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
    77 ;; Tracked objects:
    78 ;;		On entry : 0/0
    79 ;;		On exit  : 0/0
    80 ;;		Unchanged: 0/0
    81 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
    82 ;;      Params:         0       0       0       0       0       0       0
    83 ;;      Locals:        16      34     256      32       0       0       0
    84 ;;      Temps:          2       0       0       0       0       0       0
    85 ;;      Totals:        18      34     256      32       0       0       0
    86 ;;Total ram usage:      340 bytes
    87 ;; Hardware stack levels required when called:    7
    88 ;; This function calls:
    89 ;;		_bulkErase
    90 ;;		_enableWrite
    91 ;;		_enter_HVP
    92 ;;		_exit_HVP
    93 ;;		_flashReadBlock
    94 ;;		_flashWriteBlock
    95 ;;		_flashWriteData
    96 ;;		_trisInit
    97 ;; This function is called by:
    98 ;;		Startup code after reset
    99 ;; This function uses a non-reentrant model
   100 ;;
   101                           
   102                           	psect	text0
   103  0075E8                     __ptext0:
   104                           	opt stack 0
   105  0075E8                     _main:
   106                           	opt stack 23
   107                           
   108                           ;Main.c: 30: int i;
   109                           ;Main.c: 31: uint16 data0 = 0x0000;
   110                           
   111                           ;incstack = 0
   112  0075E8  0E00               	movlw	0
   113  0075EA  6E51               	movwf	main@data0+1,c
   114  0075EC  0E00               	movlw	0
   115  0075EE  6E50               	movwf	main@data0,c
   116                           
   117                           ;Main.c: 32: uint16 data1 = 0x1000;
   118  0075F0  0E10               	movlw	16
   119  0075F2  6E53               	movwf	main@data1+1,c
   120  0075F4  0E00               	movlw	0
   121  0075F6  6E52               	movwf	main@data1,c
   122                           
   123                           ;Main.c: 33: uint16 data2 = 0x2000;
   124  0075F8  0E20               	movlw	32
   125  0075FA  6E55               	movwf	main@data2+1,c
   126  0075FC  0E00               	movlw	0
   127  0075FE  6E54               	movwf	main@data2,c
   128                           
   129                           ;Main.c: 34: uint16 data3 = 0x3000;
   130  007600  0E30               	movlw	48
   131  007602  6E57               	movwf	main@data3+1,c
   132  007604  0E00               	movlw	0
   133  007606  6E56               	movwf	main@data3,c
   134                           
   135                           ;Main.c: 35: uint16 data4 = 0x1000;
   136  007608  0E10               	movlw	16
   137  00760A  6E4F               	movwf	main@data4+1,c
   138  00760C  0E00               	movlw	0
   139  00760E  6E4E               	movwf	main@data4,c
   140                           
   141                           ;Main.c: 36: uint16 data5 = 0x5000;
   142  007610  0E50               	movlw	80
   143  007612  6E59               	movwf	main@data5+1,c
   144  007614  0E00               	movlw	0
   145  007616  6E58               	movwf	main@data5,c
   146                           
   147                           ;Main.c: 37: uint32 address = 0x000000;
   148  007618  0E00               	movlw	0
   149  00761A  6E4A               	movwf	main@address,c
   150  00761C  0E00               	movlw	0
   151  00761E  6E4B               	movwf	main@address+1,c
   152  007620  0E00               	movlw	0
   153  007622  6E4C               	movwf	main@address+2,c
   154  007624  0E00               	movlw	0
   155  007626  6E4D               	movwf	main@address+3,c
   156                           
   157                           ;Main.c: 38: uint16 blockRead[32];
   158                           ;Main.c: 39: uint16 blockWrite0[16];
   159                           ;Main.c: 40: uint16 blockWrite1[16];
   160                           ;Main.c: 41: uint16 blockWrite2[16];
   161                           ;Main.c: 42: uint16 blockWrite3[16];
   162                           ;Main.c: 43: uint16 blockWrite5[64];
   163                           ;Main.c: 44: uint16 incomingData[4];
   164                           ;Main.c: 46: for(i = 0 ; i < 16 ; i++){
   165  007628  0E00               	movlw	0
   166  00762A  0100               	movlb	0	; () banked
   167  00762C  6FF7               	movwf	(main@i+1)& (0+255),b
   168  00762E  0E00               	movlw	0
   169  007630  0100               	movlb	0	; () banked
   170  007632  6FF6               	movwf	main@i& (0+255),b
   171  007634                     
   172                           ; BSR set to: 0
   173  007634  0100               	movlb	0	; () banked
   174  007636  51F7               	movf	(main@i+1)& (0+255),w,b
   175  007638  0A80               	xorlw	128
   176  00763A  0F80               	addlw	-128
   177  00763C  0E10               	movlw	16
   178  00763E  B4D8               	btfsc	status,2,c
   179  007640  5DF6               	subwf	main@i& (0+255),w,b
   180  007642  B0D8               	btfsc	status,0,c
   181  007644  D019               	goto	l1838
   182                           
   183                           ; BSR set to: 0
   184                           ;Main.c: 47: blockWrite0[i] = data0;
   185                           
   186                           ; BSR set to: 0
   187                           
   188                           ; BSR set to: 0
   189  007646  0ED6               	movlw	low main@blockWrite0
   190  007648  6E48               	movwf	??_main& (0+255),c
   191  00764A  0E00               	movlw	high main@blockWrite0
   192  00764C  6E49               	movwf	(??_main+1)& (0+255),c
   193  00764E  90D8               	bcf	status,0,c
   194  007650  0100               	movlb	0	; () banked
   195  007652  35F6               	rlcf	main@i& (0+255),w,b
   196  007654  6ED9               	movwf	fsr2l,c
   197  007656  0100               	movlb	0	; () banked
   198  007658  35F7               	rlcf	(main@i+1)& (0+255),w,b
   199  00765A  6EDA               	movwf	fsr2h,c
   200  00765C  5048               	movf	??_main,w,c
   201  00765E  26D9               	addwf	fsr2l,f,c
   202  007660  5049               	movf	??_main+1,w,c
   203  007662  22DA               	addwfc	fsr2h,f,c
   204  007664  C050  FFDE         	movff	main@data0,postinc2
   205  007668  C051  FFDD         	movff	main@data0+1,postdec2
   206                           
   207                           ; BSR set to: 0
   208                           ;Main.c: 48: data0++;
   209  00766C  4A50               	infsnz	main@data0,f,c
   210  00766E  2A51               	incf	main@data0+1,f,c
   211                           
   212                           ; BSR set to: 0
   213  007670  0100               	movlb	0	; () banked
   214  007672  4BF6               	infsnz	main@i& (0+255),f,b
   215  007674  2BF7               	incf	(main@i+1)& (0+255),f,b
   216  007676  D7DE               	goto	L1
   217  007678                     l1838:
   218                           
   219                           ; BSR set to: 0
   220                           ;Main.c: 49: }
   221                           ;Main.c: 50: for(i = 0 ; i < 16 ; i++){
   222  007678  0E00               	movlw	0
   223  00767A  0100               	movlb	0	; () banked
   224  00767C  6FF7               	movwf	(main@i+1)& (0+255),b
   225  00767E  0E00               	movlw	0
   226  007680  0100               	movlb	0	; () banked
   227  007682  6FF6               	movwf	main@i& (0+255),b
   228  007684                     
   229                           ; BSR set to: 0
   230  007684  0100               	movlb	0	; () banked
   231  007686  51F7               	movf	(main@i+1)& (0+255),w,b
   232  007688  0A80               	xorlw	128
   233  00768A  0F80               	addlw	-128
   234  00768C  0E10               	movlw	16
   235  00768E  B4D8               	btfsc	status,2,c
   236  007690  5DF6               	subwf	main@i& (0+255),w,b
   237  007692  B0D8               	btfsc	status,0,c
   238  007694  D019               	goto	l1852
   239                           
   240                           ; BSR set to: 0
   241                           ;Main.c: 51: blockWrite1[i] = data1;
   242                           
   243                           ; BSR set to: 0
   244                           
   245                           ; BSR set to: 0
   246  007696  0EC0               	movlw	low main@blockWrite1
   247  007698  6E48               	movwf	??_main& (0+255),c
   248  00769A  0E01               	movlw	high main@blockWrite1
   249  00769C  6E49               	movwf	(??_main+1)& (0+255),c
   250  00769E  90D8               	bcf	status,0,c
   251  0076A0  0100               	movlb	0	; () banked
   252  0076A2  35F6               	rlcf	main@i& (0+255),w,b
   253  0076A4  6ED9               	movwf	fsr2l,c
   254  0076A6  0100               	movlb	0	; () banked
   255  0076A8  35F7               	rlcf	(main@i+1)& (0+255),w,b
   256  0076AA  6EDA               	movwf	fsr2h,c
   257  0076AC  5048               	movf	??_main,w,c
   258  0076AE  26D9               	addwf	fsr2l,f,c
   259  0076B0  5049               	movf	??_main+1,w,c
   260  0076B2  22DA               	addwfc	fsr2h,f,c
   261  0076B4  C052  FFDE         	movff	main@data1,postinc2
   262  0076B8  C053  FFDD         	movff	main@data1+1,postdec2
   263                           
   264                           ; BSR set to: 0
   265                           ;Main.c: 52: data1++;
   266  0076BC  4A52               	infsnz	main@data1,f,c
   267  0076BE  2A53               	incf	main@data1+1,f,c
   268                           
   269                           ; BSR set to: 0
   270  0076C0  0100               	movlb	0	; () banked
   271  0076C2  4BF6               	infsnz	main@i& (0+255),f,b
   272  0076C4  2BF7               	incf	(main@i+1)& (0+255),f,b
   273  0076C6  D7DE               	goto	L2
   274  0076C8                     l1852:
   275                           
   276                           ; BSR set to: 0
   277                           ;Main.c: 53: }
   278                           ;Main.c: 55: for(i = 0 ; i < 16 ; i++){
   279  0076C8  0E00               	movlw	0
   280  0076CA  0100               	movlb	0	; () banked
   281  0076CC  6FF7               	movwf	(main@i+1)& (0+255),b
   282  0076CE  0E00               	movlw	0
   283  0076D0  0100               	movlb	0	; () banked
   284  0076D2  6FF6               	movwf	main@i& (0+255),b
   285  0076D4                     
   286                           ; BSR set to: 0
   287  0076D4  0100               	movlb	0	; () banked
   288  0076D6  51F7               	movf	(main@i+1)& (0+255),w,b
   289  0076D8  0A80               	xorlw	128
   290  0076DA  0F80               	addlw	-128
   291  0076DC  0E10               	movlw	16
   292  0076DE  B4D8               	btfsc	status,2,c
   293  0076E0  5DF6               	subwf	main@i& (0+255),w,b
   294  0076E2  B0D8               	btfsc	status,0,c
   295  0076E4  D019               	goto	l1866
   296                           
   297                           ; BSR set to: 0
   298                           ;Main.c: 56: blockWrite2[i] = data2;
   299                           
   300                           ; BSR set to: 0
   301                           
   302                           ; BSR set to: 0
   303  0076E6  0EE0               	movlw	low main@blockWrite2
   304  0076E8  6E48               	movwf	??_main& (0+255),c
   305  0076EA  0E01               	movlw	high main@blockWrite2
   306  0076EC  6E49               	movwf	(??_main+1)& (0+255),c
   307  0076EE  90D8               	bcf	status,0,c
   308  0076F0  0100               	movlb	0	; () banked
   309  0076F2  35F6               	rlcf	main@i& (0+255),w,b
   310  0076F4  6ED9               	movwf	fsr2l,c
   311  0076F6  0100               	movlb	0	; () banked
   312  0076F8  35F7               	rlcf	(main@i+1)& (0+255),w,b
   313  0076FA  6EDA               	movwf	fsr2h,c
   314  0076FC  5048               	movf	??_main,w,c
   315  0076FE  26D9               	addwf	fsr2l,f,c
   316  007700  5049               	movf	??_main+1,w,c
   317  007702  22DA               	addwfc	fsr2h,f,c
   318  007704  C054  FFDE         	movff	main@data2,postinc2
   319  007708  C055  FFDD         	movff	main@data2+1,postdec2
   320                           
   321                           ; BSR set to: 0
   322                           ;Main.c: 57: data2++;
   323  00770C  4A54               	infsnz	main@data2,f,c
   324  00770E  2A55               	incf	main@data2+1,f,c
   325                           
   326                           ; BSR set to: 0
   327  007710  0100               	movlb	0	; () banked
   328  007712  4BF6               	infsnz	main@i& (0+255),f,b
   329  007714  2BF7               	incf	(main@i+1)& (0+255),f,b
   330  007716  D7DE               	goto	L3
   331  007718                     l1866:
   332                           
   333                           ; BSR set to: 0
   334                           ;Main.c: 58: }
   335                           ;Main.c: 59: for(i = 0 ; i < 16 ; i++){
   336  007718  0E00               	movlw	0
   337  00771A  0100               	movlb	0	; () banked
   338  00771C  6FF7               	movwf	(main@i+1)& (0+255),b
   339  00771E  0E00               	movlw	0
   340  007720  0100               	movlb	0	; () banked
   341  007722  6FF6               	movwf	main@i& (0+255),b
   342  007724                     
   343                           ; BSR set to: 0
   344  007724  0100               	movlb	0	; () banked
   345  007726  51F7               	movf	(main@i+1)& (0+255),w,b
   346  007728  0A80               	xorlw	128
   347  00772A  0F80               	addlw	-128
   348  00772C  0E10               	movlw	16
   349  00772E  B4D8               	btfsc	status,2,c
   350  007730  5DF6               	subwf	main@i& (0+255),w,b
   351  007732  B0D8               	btfsc	status,0,c
   352  007734  D019               	goto	l1880
   353                           
   354                           ; BSR set to: 0
   355                           ;Main.c: 60: blockWrite3[i] = data3;
   356                           
   357                           ; BSR set to: 0
   358                           
   359                           ; BSR set to: 0
   360  007736  0E60               	movlw	low main@blockWrite3
   361  007738  6E48               	movwf	??_main& (0+255),c
   362  00773A  0E02               	movlw	high main@blockWrite3
   363  00773C  6E49               	movwf	(??_main+1)& (0+255),c
   364  00773E  90D8               	bcf	status,0,c
   365  007740  0100               	movlb	0	; () banked
   366  007742  35F6               	rlcf	main@i& (0+255),w,b
   367  007744  6ED9               	movwf	fsr2l,c
   368  007746  0100               	movlb	0	; () banked
   369  007748  35F7               	rlcf	(main@i+1)& (0+255),w,b
   370  00774A  6EDA               	movwf	fsr2h,c
   371  00774C  5048               	movf	??_main,w,c
   372  00774E  26D9               	addwf	fsr2l,f,c
   373  007750  5049               	movf	??_main+1,w,c
   374  007752  22DA               	addwfc	fsr2h,f,c
   375  007754  C056  FFDE         	movff	main@data3,postinc2
   376  007758  C057  FFDD         	movff	main@data3+1,postdec2
   377                           
   378                           ; BSR set to: 0
   379                           ;Main.c: 61: data3++;
   380  00775C  4A56               	infsnz	main@data3,f,c
   381  00775E  2A57               	incf	main@data3+1,f,c
   382                           
   383                           ; BSR set to: 0
   384  007760  0100               	movlb	0	; () banked
   385  007762  4BF6               	infsnz	main@i& (0+255),f,b
   386  007764  2BF7               	incf	(main@i+1)& (0+255),f,b
   387  007766  D7DE               	goto	L4
   388  007768                     l1880:
   389                           
   390                           ; BSR set to: 0
   391                           ;Main.c: 62: }
   392                           ;Main.c: 63: for(i = 0 ; i < 64 ; i++){
   393  007768  0E00               	movlw	0
   394  00776A  0100               	movlb	0	; () banked
   395  00776C  6FF7               	movwf	(main@i+1)& (0+255),b
   396  00776E  0E00               	movlw	0
   397  007770  0100               	movlb	0	; () banked
   398  007772  6FF6               	movwf	main@i& (0+255),b
   399  007774                     
   400                           ; BSR set to: 0
   401  007774  0100               	movlb	0	; () banked
   402  007776  51F7               	movf	(main@i+1)& (0+255),w,b
   403  007778  0A80               	xorlw	128
   404  00777A  0F80               	addlw	-128
   405  00777C  0E40               	movlw	64
   406  00777E  B4D8               	btfsc	status,2,c
   407  007780  5DF6               	subwf	main@i& (0+255),w,b
   408  007782  B0D8               	btfsc	status,0,c
   409  007784  D019               	goto	l1894
   410                           
   411                           ; BSR set to: 0
   412                           ;Main.c: 64: blockWrite5[i] = data5;
   413                           
   414                           ; BSR set to: 0
   415                           
   416                           ; BSR set to: 0
   417  007786  0E00               	movlw	low main@blockWrite5
   418  007788  6E48               	movwf	??_main& (0+255),c
   419  00778A  0E01               	movlw	high main@blockWrite5
   420  00778C  6E49               	movwf	(??_main+1)& (0+255),c
   421  00778E  90D8               	bcf	status,0,c
   422  007790  0100               	movlb	0	; () banked
   423  007792  35F6               	rlcf	main@i& (0+255),w,b
   424  007794  6ED9               	movwf	fsr2l,c
   425  007796  0100               	movlb	0	; () banked
   426  007798  35F7               	rlcf	(main@i+1)& (0+255),w,b
   427  00779A  6EDA               	movwf	fsr2h,c
   428  00779C  5048               	movf	??_main,w,c
   429  00779E  26D9               	addwf	fsr2l,f,c
   430  0077A0  5049               	movf	??_main+1,w,c
   431  0077A2  22DA               	addwfc	fsr2h,f,c
   432  0077A4  C058  FFDE         	movff	main@data5,postinc2
   433  0077A8  C059  FFDD         	movff	main@data5+1,postdec2
   434                           
   435                           ; BSR set to: 0
   436                           ;Main.c: 65: data5++;
   437  0077AC  4A58               	infsnz	main@data5,f,c
   438  0077AE  2A59               	incf	main@data5+1,f,c
   439                           
   440                           ; BSR set to: 0
   441  0077B0  0100               	movlb	0	; () banked
   442  0077B2  4BF6               	infsnz	main@i& (0+255),f,b
   443  0077B4  2BF7               	incf	(main@i+1)& (0+255),f,b
   444  0077B6  D7DE               	goto	L5
   445  0077B8                     l1894:
   446                           
   447                           ; BSR set to: 0
   448                           ;Main.c: 66: }
   449                           ;Main.c: 68: trisInit();
   450  0077B8  EC06  F036         	call	_trisInit	;wreg free
   451                           
   452                           ;Main.c: 69: enter_HVP();
   453  0077BC  EC3F  F036         	call	_enter_HVP	;wreg free
   454                           
   455                           ;Main.c: 71: bulkErase();
   456  0077C0  EC36  F03A         	call	_bulkErase	;wreg free
   457                           
   458                           ;Main.c: 72: enableWrite();
   459  0077C4  EC88  F036         	call	_enableWrite	;wreg free
   460                           
   461                           ;Main.c: 74: flashWriteBlock(blockWrite0, blockWrite1, 1);
   462  0077C8  0100               	movlb	0	; () banked
   463  0077CA  0E00               	movlw	high main@blockWrite0
   464  0077CC  6E27               	movwf	flashWriteBlock@firstHalf+1,c
   465  0077CE  0100               	movlb	0	; () banked
   466  0077D0  0ED6               	movlw	low main@blockWrite0
   467  0077D2  6E26               	movwf	flashWriteBlock@firstHalf,c
   468  0077D4  0101               	movlb	1	; () banked
   469  0077D6  0E01               	movlw	high main@blockWrite1
   470  0077D8  6E29               	movwf	flashWriteBlock@secondHalf+1,c
   471  0077DA  0101               	movlb	1	; () banked
   472  0077DC  0EC0               	movlw	low main@blockWrite1
   473  0077DE  6E28               	movwf	flashWriteBlock@secondHalf,c
   474  0077E0  0E01               	movlw	1
   475  0077E2  6E2A               	movwf	flashWriteBlock@blockNumber,c
   476  0077E4  0E00               	movlw	0
   477  0077E6  6E2B               	movwf	flashWriteBlock@blockNumber+1,c
   478  0077E8  0E00               	movlw	0
   479  0077EA  6E2C               	movwf	flashWriteBlock@blockNumber+2,c
   480  0077EC  0E00               	movlw	0
   481  0077EE  6E2D               	movwf	flashWriteBlock@blockNumber+3,c
   482  0077F0  EC1A  F039         	call	_flashWriteBlock	;wreg free
   483                           
   484                           ;Main.c: 75: flashWriteBlock(blockWrite2, blockWrite3, 2);
   485  0077F4  0101               	movlb	1	; () banked
   486  0077F6  0E01               	movlw	high main@blockWrite2
   487  0077F8  6E27               	movwf	flashWriteBlock@firstHalf+1,c
   488  0077FA  0101               	movlb	1	; () banked
   489  0077FC  0EE0               	movlw	low main@blockWrite2
   490  0077FE  6E26               	movwf	flashWriteBlock@firstHalf,c
   491  007800  0102               	movlb	2	; () banked
   492  007802  0E02               	movlw	high main@blockWrite3
   493  007804  6E29               	movwf	flashWriteBlock@secondHalf+1,c
   494  007806  0102               	movlb	2	; () banked
   495  007808  0E60               	movlw	low main@blockWrite3
   496  00780A  6E28               	movwf	flashWriteBlock@secondHalf,c
   497  00780C  0E02               	movlw	2
   498  00780E  6E2A               	movwf	flashWriteBlock@blockNumber,c
   499  007810  0E00               	movlw	0
   500  007812  6E2B               	movwf	flashWriteBlock@blockNumber+1,c
   501  007814  0E00               	movlw	0
   502  007816  6E2C               	movwf	flashWriteBlock@blockNumber+2,c
   503  007818  0E00               	movlw	0
   504  00781A  6E2D               	movwf	flashWriteBlock@blockNumber+3,c
   505  00781C  EC1A  F039         	call	_flashWriteBlock	;wreg free
   506                           
   507                           ;Main.c: 76: flashReadBlock(blockRead, 64, 1);
   508  007820  0101               	movlb	1	; () banked
   509  007822  0E01               	movlw	high main@blockRead
   510  007824  6E27               	movwf	flashReadBlock@data+1,c
   511  007826  0101               	movlb	1	; () banked
   512  007828  0E80               	movlw	low main@blockRead
   513  00782A  6E26               	movwf	flashReadBlock@data,c
   514  00782C  0E00               	movlw	0
   515  00782E  6E29               	movwf	flashReadBlock@size+1,c
   516  007830  0E40               	movlw	64
   517  007832  6E28               	movwf	flashReadBlock@size,c
   518  007834  0E01               	movlw	1
   519  007836  6E2A               	movwf	flashReadBlock@blockNumber,c
   520  007838  0E00               	movlw	0
   521  00783A  6E2B               	movwf	flashReadBlock@blockNumber+1,c
   522  00783C  0E00               	movlw	0
   523  00783E  6E2C               	movwf	flashReadBlock@blockNumber+2,c
   524  007840  0E00               	movlw	0
   525  007842  6E2D               	movwf	flashReadBlock@blockNumber+3,c
   526  007844  EC8E  F037         	call	_flashReadBlock	;wreg free
   527                           
   528                           ;Main.c: 77: flashReadBlock(blockRead, 64, 2);
   529  007848  0101               	movlb	1	; () banked
   530  00784A  0E01               	movlw	high main@blockRead
   531  00784C  6E27               	movwf	flashReadBlock@data+1,c
   532  00784E  0101               	movlb	1	; () banked
   533  007850  0E80               	movlw	low main@blockRead
   534  007852  6E26               	movwf	flashReadBlock@data,c
   535  007854  0E00               	movlw	0
   536  007856  6E29               	movwf	flashReadBlock@size+1,c
   537  007858  0E40               	movlw	64
   538  00785A  6E28               	movwf	flashReadBlock@size,c
   539  00785C  0E02               	movlw	2
   540  00785E  6E2A               	movwf	flashReadBlock@blockNumber,c
   541  007860  0E00               	movlw	0
   542  007862  6E2B               	movwf	flashReadBlock@blockNumber+1,c
   543  007864  0E00               	movlw	0
   544  007866  6E2C               	movwf	flashReadBlock@blockNumber+2,c
   545  007868  0E00               	movlw	0
   546  00786A  6E2D               	movwf	flashReadBlock@blockNumber+3,c
   547  00786C  EC8E  F037         	call	_flashReadBlock	;wreg free
   548                           
   549                           ;Main.c: 78: flashWriteData(blockWrite5, 64, 0);
   550  007870  0101               	movlb	1	; () banked
   551  007872  0E01               	movlw	high main@blockWrite5
   552  007874  6E39               	movwf	flashWriteData@data+1,c
   553  007876  0101               	movlb	1	; () banked
   554  007878  0E00               	movlw	low main@blockWrite5
   555  00787A  6E38               	movwf	flashWriteData@data,c
   556  00787C  0E00               	movlw	0
   557  00787E  6E3B               	movwf	flashWriteData@size+1,c
   558  007880  0E40               	movlw	64
   559  007882  6E3A               	movwf	flashWriteData@size,c
   560  007884  0E00               	movlw	0
   561  007886  6E3C               	movwf	flashWriteData@address,c
   562  007888  0E00               	movlw	0
   563  00788A  6E3D               	movwf	flashWriteData@address+1,c
   564  00788C  0E00               	movlw	0
   565  00788E  6E3E               	movwf	flashWriteData@address+2,c
   566  007890  0E00               	movlw	0
   567  007892  6E3F               	movwf	flashWriteData@address+3,c
   568  007894  EC77  F03C         	call	_flashWriteData	;wreg free
   569                           
   570                           ;Main.c: 79: flashReadBlock(blockRead, 64, 1);
   571  007898  0101               	movlb	1	; () banked
   572  00789A  0E01               	movlw	high main@blockRead
   573  00789C  6E27               	movwf	flashReadBlock@data+1,c
   574  00789E  0101               	movlb	1	; () banked
   575  0078A0  0E80               	movlw	low main@blockRead
   576  0078A2  6E26               	movwf	flashReadBlock@data,c
   577  0078A4  0E00               	movlw	0
   578  0078A6  6E29               	movwf	flashReadBlock@size+1,c
   579  0078A8  0E40               	movlw	64
   580  0078AA  6E28               	movwf	flashReadBlock@size,c
   581  0078AC  0E01               	movlw	1
   582  0078AE  6E2A               	movwf	flashReadBlock@blockNumber,c
   583  0078B0  0E00               	movlw	0
   584  0078B2  6E2B               	movwf	flashReadBlock@blockNumber+1,c
   585  0078B4  0E00               	movlw	0
   586  0078B6  6E2C               	movwf	flashReadBlock@blockNumber+2,c
   587  0078B8  0E00               	movlw	0
   588  0078BA  6E2D               	movwf	flashReadBlock@blockNumber+3,c
   589  0078BC  EC8E  F037         	call	_flashReadBlock	;wreg free
   590                           
   591                           ;Main.c: 80: flashReadBlock(blockRead, 64, 2);
   592  0078C0  0101               	movlb	1	; () banked
   593  0078C2  0E01               	movlw	high main@blockRead
   594  0078C4  6E27               	movwf	flashReadBlock@data+1,c
   595  0078C6  0101               	movlb	1	; () banked
   596  0078C8  0E80               	movlw	low main@blockRead
   597  0078CA  6E26               	movwf	flashReadBlock@data,c
   598  0078CC  0E00               	movlw	0
   599  0078CE  6E29               	movwf	flashReadBlock@size+1,c
   600  0078D0  0E40               	movlw	64
   601  0078D2  6E28               	movwf	flashReadBlock@size,c
   602  0078D4  0E02               	movlw	2
   603  0078D6  6E2A               	movwf	flashReadBlock@blockNumber,c
   604  0078D8  0E00               	movlw	0
   605  0078DA  6E2B               	movwf	flashReadBlock@blockNumber+1,c
   606  0078DC  0E00               	movlw	0
   607  0078DE  6E2C               	movwf	flashReadBlock@blockNumber+2,c
   608  0078E0  0E00               	movlw	0
   609  0078E2  6E2D               	movwf	flashReadBlock@blockNumber+3,c
   610  0078E4  EC8E  F037         	call	_flashReadBlock	;wreg free
   611                           
   612                           ;Main.c: 81: exit_HVP();
   613  0078E8  EC21  F036         	call	_exit_HVP	;wreg free
   614  0078EC                     l185:
   615  0078EC  D7FF               	goto	l185
   616  0078EE                     __end_of_main:
   617                           	opt stack 0
   618                           postinc2	equ	0xFDE
   619                           postdec2	equ	0xFDD
   620                           fsr2h	equ	0xFDA
   621                           fsr2l	equ	0xFD9
   622                           status	equ	0xFD8
   623                           
   624                           	psect	cinit
   625  006CC8                     __pcinit:
   626                           	opt stack 0
   627  006CC8                     start_initialization:
   628                           	opt stack 0
   629  006CC8                     __initialization:
   630                           	opt stack 0
   631                           
   632                           ; Clear objects allocated to BANK2 (96 bytes)
   633  006CC8  EE02  F000         	lfsr	0,__pbssBANK2
   634  006CCC  0E60               	movlw	96
   635  006CCE                     clear_0:
   636  006CCE  6AEE               	clrf	postinc0,c
   637  006CD0  06E8               	decf	wreg,f,c
   638  006CD2  E1FD               	bnz	clear_0
   639                           
   640                           ; Clear objects allocated to COMRAM (32 bytes)
   641  006CD4  EE00  F05A         	lfsr	0,__pbssCOMRAM
   642  006CD8  0E20               	movlw	32
   643  006CDA                     clear_1:
   644  006CDA  6AEE               	clrf	postinc0,c
   645  006CDC  06E8               	decf	wreg,f,c
   646  006CDE  E1FD               	bnz	clear_1
   647  006CE0                     end_of_initialization:
   648                           	opt stack 0
   649  006CE0                     __end_of__initialization:
   650                           	opt stack 0
   651  006CE0  0100               	movlb	0
   652  006CE2  EFF4  F03A         	goto	_main	;jump to C main() function
   653                           postinc0	equ	0xFEE
   654                           wreg	equ	0xFE8
   655                           postinc2	equ	0xFDE
   656                           postdec2	equ	0xFDD
   657                           fsr2h	equ	0xFDA
   658                           fsr2l	equ	0xFD9
   659                           status	equ	0xFD8
   660                           
   661                           	psect	bssCOMRAM
   662  00005A                     __pbssCOMRAM:
   663                           	opt stack 0
   664  00005A                     _halfBuffer1:
   665                           	opt stack 0
   666  00005A                     	ds	32
   667                           postinc0	equ	0xFEE
   668                           wreg	equ	0xFE8
   669                           postinc2	equ	0xFDE
   670                           postdec2	equ	0xFDD
   671                           fsr2h	equ	0xFDA
   672                           fsr2l	equ	0xFD9
   673                           status	equ	0xFD8
   674                           
   675                           	psect	bssBANK2
   676  000200                     __pbssBANK2:
   677                           	opt stack 0
   678  000200                     _blockBuffer:
   679                           	opt stack 0
   680  000200                     	ds	64
   681  000240                     _halfBuffer2:
   682                           	opt stack 0
   683  000240                     	ds	32
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           postinc2	equ	0xFDE
   687                           postdec2	equ	0xFDD
   688                           fsr2h	equ	0xFDA
   689                           fsr2l	equ	0xFD9
   690                           status	equ	0xFD8
   691                           
   692                           	psect	cstackBANK2
   693  000260                     __pcstackBANK2:
   694                           	opt stack 0
   695  000260                     main@blockWrite3:
   696                           	opt stack 0
   697                           
   698                           ; 32 bytes @ 0x0
   699  000260                     	ds	32
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postinc2	equ	0xFDE
   703                           postdec2	equ	0xFDD
   704                           fsr2h	equ	0xFDA
   705                           fsr2l	equ	0xFD9
   706                           status	equ	0xFD8
   707                           
   708                           	psect	cstackBANK1
   709  000100                     __pcstackBANK1:
   710                           	opt stack 0
   711  000100                     main@blockWrite5:
   712                           	opt stack 0
   713                           
   714                           ; 128 bytes @ 0x0
   715  000100                     	ds	128
   716  000180                     main@blockRead:
   717                           	opt stack 0
   718                           
   719                           ; 64 bytes @ 0x80
   720  000180                     	ds	64
   721  0001C0                     main@blockWrite1:
   722                           	opt stack 0
   723                           
   724                           ; 32 bytes @ 0xC0
   725  0001C0                     	ds	32
   726  0001E0                     main@blockWrite2:
   727                           	opt stack 0
   728                           
   729                           ; 32 bytes @ 0xE0
   730  0001E0                     	ds	32
   731                           postinc0	equ	0xFEE
   732                           wreg	equ	0xFE8
   733                           postinc2	equ	0xFDE
   734                           postdec2	equ	0xFDD
   735                           fsr2h	equ	0xFDA
   736                           fsr2l	equ	0xFD9
   737                           status	equ	0xFD8
   738                           
   739                           	psect	cstackBANK0
   740  000080                     __pcstackBANK0:
   741                           	opt stack 0
   742  000080                     flashWriteData@newData:
   743                           	opt stack 0
   744                           
   745                           ; 64 bytes @ 0x0
   746  000080                     	ds	64
   747  0000C0                     flashWriteData@j:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x40
   751  0000C0                     	ds	2
   752  0000C2                     flashWriteData@newSize:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x42
   756  0000C2                     	ds	2
   757  0000C4                     flashWriteData@timesToWrite:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x44
   761  0000C4                     	ds	2
   762  0000C6                     flashWriteData@nextDataSet:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x46
   766  0000C6                     	ds	2
   767  0000C8                     flashWriteData@memoryBlock:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x48
   771  0000C8                     	ds	2
   772  0000CA                     flashWriteData@k:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x4A
   776  0000CA                     	ds	2
   777  0000CC                     flashWriteData@currentStartPoint:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x4C
   781  0000CC                     	ds	2
   782  0000CE                     flashWriteData@i:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x4E
   786  0000CE                     	ds	2
   787  0000D0                     flashWriteData@bytesWritten:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x50
   791  0000D0                     	ds	2
   792  0000D2                     flashWriteData@newAddress:
   793                           	opt stack 0
   794                           
   795                           ; 4 bytes @ 0x52
   796  0000D2                     	ds	4
   797  0000D6                     main@blockWrite0:
   798                           	opt stack 0
   799                           
   800                           ; 32 bytes @ 0x56
   801  0000D6                     	ds	32
   802  0000F6                     main@i:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x76
   806  0000F6                     	ds	2
   807                           postinc0	equ	0xFEE
   808                           wreg	equ	0xFE8
   809                           postinc2	equ	0xFDE
   810                           postdec2	equ	0xFDD
   811                           fsr2h	equ	0xFDA
   812                           fsr2l	equ	0xFD9
   813                           status	equ	0xFD8
   814                           
   815                           	psect	cstackCOMRAM
   816  000001                     __pcstackCOMRAM:
   817                           	opt stack 0
   818  000001                     ??_loadHalfBuffer:
   819  000001                     ?_readPGD:
   820                           	opt stack 0
   821  000001                     writePGD@data:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x0
   825  000001                     	ds	2
   826  000003                     ??_readPGD:
   827  000003                     writeBit@bitToWrite:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x2
   831  000003                     	ds	1
   832  000004                     ?_readBit:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x3
   836  000004                     	ds	1
   837  000005                     writeBits@pattern:
   838                           	opt stack 0
   839  000005                     loadHalfBuffer@j:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x4
   843  000005                     	ds	1
   844  000006                     readBit@data:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x5
   848  000006                     	ds	1
   849  000007                     writeBits@bitsToWrite:
   850                           	opt stack 0
   851  000007                     loadHalfBuffer@i:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x6
   855  000007                     	ds	1
   856  000008                     ?_readBits:
   857                           	opt stack 0
   858  000008                     readBits@bitsToRead:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x7
   862  000008                     	ds	1
   863  000009                     ??_writeBits:
   864  000009                     ?_overwriteBufferData:
   865                           	opt stack 0
   866  000009                     overwriteBufferData@data:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x8
   870  000009                     	ds	1
   871  00000A                     ??_readBits:
   872                           
   873                           ; 0 bytes @ 0x9
   874  00000A                     	ds	1
   875  00000B                     readBits@i:
   876                           	opt stack 0
   877  00000B                     overwriteBufferData@sizeToWrite:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0xA
   881  00000B                     	ds	1
   882  00000C                     writeBits@i:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0xB
   886  00000C                     	ds	1
   887  00000D                     readBits@data:
   888                           	opt stack 0
   889  00000D                     overwriteBufferData@bufferStartPoint:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0xC
   893  00000D                     	ds	1
   894  00000E                     writeICSP@commandByte:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0xD
   898  00000E                     	ds	1
   899  00000F                     ??_overwriteBufferData:
   900  00000F                     ?_readICSP:
   901                           	opt stack 0
   902  00000F                     ?_readFirstByte:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0xE
   906  00000F                     	ds	1
   907  000010                     writeICSP@dataBytes:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0xF
   911  000010                     	ds	1
   912  000011                     readICSP@data:
   913                           	opt stack 0
   914  000011                     readFirstByte@data:
   915                           	opt stack 0
   916  000011                     overwriteBufferData@j:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x10
   920  000011                     	ds	1
   921  000012                     bulkErase@i:
   922                           	opt stack 0
   923  000012                     writeToBuffer@data:
   924                           	opt stack 0
   925  000012                     flashWriteAndProgram@data:
   926                           	opt stack 0
   927  000012                     flashSetAddress@address:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x11
   931  000012                     	ds	1
   932  000013                     ?_flashRead16Bits:
   933                           	opt stack 0
   934  000013                     overwriteBufferData@bytesLeft:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x12
   938  000013                     	ds	1
   939  000014                     flashWriteAndProgram@i:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x13
   943  000014                     	ds	1
   944  000015                     flashRead16Bits@firstData:
   945                           	opt stack 0
   946  000015                     overwriteBufferData@bytesWritten:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x14
   950  000015                     	ds	1
   951  000016                     ??_flashSetAddress:
   952                           
   953                           ; 0 bytes @ 0x15
   954  000016                     	ds	1
   955  000017                     flashRead16Bits@data:
   956                           	opt stack 0
   957  000017                     overwriteBufferData@start:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x16
   961  000017                     	ds	2
   962  000019                     overwriteBufferData@availableWriteSpace:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x18
   966  000019                     	ds	1
   967  00001A                     flashSetAddress@upperAddr:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x19
   971  00001A                     	ds	1
   972  00001B                     overwriteBufferData@i:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x1A
   976  00001B                     	ds	3
   977  00001E                     flashSetAddress@highAddr:
   978                           	opt stack 0
   979                           
   980                           ; 4 bytes @ 0x1D
   981  00001E                     	ds	4
   982  000022                     flashSetAddress@lowAddr:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0x21
   986  000022                     	ds	4
   987  000026                     flashReadBlock@data:
   988                           	opt stack 0
   989  000026                     flashWriteBlock@firstHalf:
   990                           	opt stack 0
   991  000026                     rowErase@address:
   992                           	opt stack 0
   993                           
   994                           ; 4 bytes @ 0x25
   995  000026                     	ds	2
   996  000028                     flashReadBlock@size:
   997                           	opt stack 0
   998  000028                     flashWriteBlock@secondHalf:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x27
  1002  000028                     	ds	2
  1003  00002A                     rowErase@i:
  1004                           	opt stack 0
  1005  00002A                     flashReadBlock@blockNumber:
  1006                           	opt stack 0
  1007  00002A                     flashWriteBlock@blockNumber:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0x29
  1011  00002A                     	ds	4
  1012  00002E                     ??_flashReadBlock:
  1013  00002E                     ??_flashWriteBlock:
  1014                           
  1015                           ; 0 bytes @ 0x2D
  1016  00002E                     	ds	4
  1017  000032                     flashReadBlock@blockSelect:
  1018                           	opt stack 0
  1019  000032                     flashWriteBlock@blockSelect:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x31
  1023  000032                     	ds	4
  1024  000036                     flashReadBlock@i:
  1025                           	opt stack 0
  1026  000036                     flashWriteBlock@i:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x35
  1030  000036                     	ds	2
  1031  000038                     flashWriteData@data:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x37
  1035  000038                     	ds	2
  1036  00003A                     flashWriteData@size:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x39
  1040  00003A                     	ds	2
  1041  00003C                     flashWriteData@address:
  1042                           	opt stack 0
  1043                           
  1044                           ; 4 bytes @ 0x3B
  1045  00003C                     	ds	4
  1046  000040                     ??_flashWriteData:
  1047                           
  1048                           ; 0 bytes @ 0x3F
  1049  000040                     	ds	8
  1050  000048                     ??_main:
  1051                           
  1052                           ; 0 bytes @ 0x47
  1053  000048                     	ds	2
  1054  00004A                     main@address:
  1055                           	opt stack 0
  1056                           
  1057                           ; 4 bytes @ 0x49
  1058  00004A                     	ds	4
  1059  00004E                     main@data4:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x4D
  1063  00004E                     	ds	2
  1064  000050                     main@data0:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x4F
  1068  000050                     	ds	2
  1069  000052                     main@data1:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x51
  1073  000052                     	ds	2
  1074  000054                     main@data2:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x53
  1078  000054                     	ds	2
  1079  000056                     main@data3:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x55
  1083  000056                     	ds	2
  1084  000058                     main@data5:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x57
  1088  000058                     	ds	2
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           postinc2	equ	0xFDE
  1092                           postdec2	equ	0xFDD
  1093                           fsr2h	equ	0xFDA
  1094                           fsr2l	equ	0xFD9
  1095                           status	equ	0xFD8
  1096                           
  1097 ;; *************** function _trisInit *****************
  1098 ;; Defined at:
  1099 ;;		line 22 in file "../src/PIC18/Main.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;		None
  1104 ;; Return value:  Size  Location     Type
  1105 ;;		None               void
  1106 ;; Registers used:
  1107 ;;		None
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1113 ;;      Params:         0       0       0       0       0       0       0
  1114 ;;      Locals:         0       0       0       0       0       0       0
  1115 ;;      Temps:          0       0       0       0       0       0       0
  1116 ;;      Totals:         0       0       0       0       0       0       0
  1117 ;;Total ram usage:        0 bytes
  1118 ;; Hardware stack levels used:    1
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text1
  1127  006C0C                     __ptext1:
  1128                           	opt stack 0
  1129  006C0C                     _trisInit:
  1130                           	opt stack 29
  1131                           
  1132                           ;Main.c: 23: TRISDbits.TRISD4 = 0;
  1133                           
  1134                           ;incstack = 0
  1135  006C0C  9895               	bcf	3989,4,c	;volatile
  1136                           
  1137                           ;Main.c: 24: TRISDbits.TRISD5 = 0;
  1138  006C0E  9A95               	bcf	3989,5,c	;volatile
  1139                           
  1140                           ;Main.c: 25: TRISDbits.TRISD6 = 0;
  1141  006C10  9C95               	bcf	3989,6,c	;volatile
  1142                           
  1143                           ;Main.c: 26: TRISDbits.TRISD7 = 0;
  1144  006C12  9E95               	bcf	3989,7,c	;volatile
  1145  006C14  0012               	return	
  1146  006C16                     __end_of_trisInit:
  1147                           	opt stack 0
  1148                           postinc0	equ	0xFEE
  1149                           wreg	equ	0xFE8
  1150                           postinc2	equ	0xFDE
  1151                           postdec2	equ	0xFDD
  1152                           fsr2h	equ	0xFDA
  1153                           fsr2l	equ	0xFD9
  1154                           status	equ	0xFD8
  1155                           
  1156 ;; *************** function _flashWriteData *****************
  1157 ;; Defined at:
  1158 ;;		line 11 in file "../src/PIC18/FlashWrite.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  data            2   55[COMRAM] PTR unsigned int 
  1161 ;;		 -> main@blockWrite5(128), 
  1162 ;;  size            2   57[COMRAM] unsigned int 
  1163 ;;  address         4   59[COMRAM] unsigned long 
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  newData        64    0[BANK0 ] unsigned int [32]
  1166 ;;  newAddress      4   82[BANK0 ] unsigned long 
  1167 ;;  bytesWritten    2   80[BANK0 ] int 
  1168 ;;  i               2   78[BANK0 ] int 
  1169 ;;  currentStart    2   76[BANK0 ] unsigned int 
  1170 ;;  k               2   74[BANK0 ] int 
  1171 ;;  memoryBlock     2   72[BANK0 ] unsigned int 
  1172 ;;  nextDataSet     2   70[BANK0 ] int 
  1173 ;;  timesToWrite    2   68[BANK0 ] int 
  1174 ;;  newSize         2   66[BANK0 ] unsigned int 
  1175 ;;  j               2   64[BANK0 ] int 
  1176 ;;  availableWri    2    0        unsigned int 
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  2   55[COMRAM] int 
  1179 ;; Registers used:
  1180 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1186 ;;      Params:         8       0       0       0       0       0       0
  1187 ;;      Locals:         0      86       0       0       0       0       0
  1188 ;;      Temps:          8       0       0       0       0       0       0
  1189 ;;      Totals:        16      86       0       0       0       0       0
  1190 ;;Total ram usage:      102 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    6
  1193 ;; This function calls:
  1194 ;;		_flashReadBlock
  1195 ;;		_flashSetAddress
  1196 ;;		_flashWriteBlock
  1197 ;;		_loadHalfBuffer
  1198 ;;		_overwriteBufferData
  1199 ;;		_rowErase
  1200 ;; This function is called by:
  1201 ;;		_main
  1202 ;; This function uses a non-reentrant model
  1203 ;;
  1204                           
  1205                           	psect	text2
  1206  0078EE                     __ptext2:
  1207                           	opt stack 0
  1208  0078EE                     _flashWriteData:
  1209                           	opt stack 23
  1210                           
  1211                           ;FlashWrite.c: 12: int i, k, bytesWritten = 0, timesToWrite = 1, nextDataSet = 0;
  1212                           
  1213                           ;incstack = 0
  1214  0078EE  0E00               	movlw	0
  1215  0078F0  0100               	movlb	0	; () banked
  1216  0078F2  6FD1               	movwf	(flashWriteData@bytesWritten+1)& (0+255),b
  1217  0078F4  0E00               	movlw	0
  1218  0078F6  0100               	movlb	0	; () banked
  1219  0078F8  6FD0               	movwf	flashWriteData@bytesWritten& (0+255),b
  1220  0078FA  0E00               	movlw	0
  1221  0078FC  0100               	movlb	0	; () banked
  1222  0078FE  6FC5               	movwf	(flashWriteData@timesToWrite+1)& (0+255),b
  1223  007900  0E01               	movlw	1
  1224  007902  0100               	movlb	0	; () banked
  1225  007904  6FC4               	movwf	flashWriteData@timesToWrite& (0+255),b
  1226  007906  0E00               	movlw	0
  1227  007908  0100               	movlb	0	; () banked
  1228  00790A  6FC7               	movwf	(flashWriteData@nextDataSet+1)& (0+255),b
  1229  00790C  0E00               	movlw	0
  1230  00790E  0100               	movlb	0	; () banked
  1231  007910  6FC6               	movwf	flashWriteData@nextDataSet& (0+255),b
  1232                           
  1233                           ;FlashWrite.c: 13: int j = 16;
  1234  007912  0E00               	movlw	0
  1235  007914  0100               	movlb	0	; () banked
  1236  007916  6FC1               	movwf	(flashWriteData@j+1)& (0+255),b
  1237  007918  0E10               	movlw	16
  1238  00791A  0100               	movlb	0	; () banked
  1239  00791C  6FC0               	movwf	flashWriteData@j& (0+255),b
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;FlashWrite.c: 14: uint32 newAddress = address;
  1243  00791E  C03C  F0D2         	movff	flashWriteData@address,flashWriteData@newAddress
  1244  007922  C03D  F0D3         	movff	flashWriteData@address+1,flashWriteData@newAddress+1
  1245  007926  C03E  F0D4         	movff	flashWriteData@address+2,flashWriteData@newAddress+2
  1246  00792A  C03F  F0D5         	movff	flashWriteData@address+3,flashWriteData@newAddress+3
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;FlashWrite.c: 15: uint16 newSize = size;
  1250  00792E  C03A  F0C2         	movff	flashWriteData@size,flashWriteData@newSize
  1251  007932  C03B  F0C3         	movff	flashWriteData@size+1,flashWriteData@newSize+1
  1252                           
  1253                           ;FlashWrite.c: 16: uint16 memoryBlock, currentStartPoint = 0;
  1254  007936  0E00               	movlw	0
  1255  007938  0100               	movlb	0	; () banked
  1256  00793A  6FCD               	movwf	(flashWriteData@currentStartPoint+1)& (0+255),b
  1257  00793C  0E00               	movlw	0
  1258  00793E  0100               	movlb	0	; () banked
  1259  007940  6FCC               	movwf	flashWriteData@currentStartPoint& (0+255),b
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;FlashWrite.c: 17: uint16 newData[32], availableWriteSpace;
  1263                           ;FlashWrite.c: 21: currentStartPoint = (address - ((address/64)*64))/2;
  1264  007942  C03C  F040         	movff	flashWriteData@address,??_flashWriteData
  1265  007946  C03D  F041         	movff	flashWriteData@address+1,??_flashWriteData+1
  1266  00794A  C03E  F042         	movff	flashWriteData@address+2,??_flashWriteData+2
  1267  00794E  C03F  F043         	movff	flashWriteData@address+3,??_flashWriteData+3
  1268  007952  0E07               	movlw	7
  1269  007954  D005               	goto	u930
  1270  007956                     u935:
  1271  007956  90D8               	bcf	status,0,c
  1272  007958  3243               	rrcf	??_flashWriteData+3,f,c
  1273  00795A  3242               	rrcf	??_flashWriteData+2,f,c
  1274  00795C  3241               	rrcf	??_flashWriteData+1,f,c
  1275  00795E  3240               	rrcf	??_flashWriteData,f,c
  1276  007960                     u930:
  1277  007960  2EE8               	decfsz	wreg,f,c
  1278  007962  D7F9               	goto	u935
  1279  007964  0E06               	movlw	6
  1280  007966                     u945:
  1281  007966  90D8               	bcf	status,0,c
  1282  007968  3640               	rlcf	??_flashWriteData,f,c
  1283  00796A  3641               	rlcf	??_flashWriteData+1,f,c
  1284  00796C  3642               	rlcf	??_flashWriteData+2,f,c
  1285  00796E  3643               	rlcf	??_flashWriteData+3,f,c
  1286  007970  2EE8               	decfsz	wreg,f,c
  1287  007972  D7F9               	goto	u945
  1288  007974  1E40               	comf	??_flashWriteData,f,c
  1289  007976  1E41               	comf	??_flashWriteData+1,f,c
  1290  007978  1E42               	comf	??_flashWriteData+2,f,c
  1291  00797A  1E43               	comf	??_flashWriteData+3,f,c
  1292  00797C  2A40               	incf	??_flashWriteData,f,c
  1293  00797E  0E00               	movlw	0
  1294  007980  2241               	addwfc	??_flashWriteData+1,f,c
  1295  007982  2242               	addwfc	??_flashWriteData+2,f,c
  1296  007984  2243               	addwfc	??_flashWriteData+3,f,c
  1297  007986  503C               	movf	flashWriteData@address,w,c
  1298  007988  2440               	addwf	??_flashWriteData,w,c
  1299  00798A  6E44               	movwf	(??_flashWriteData+4)& (0+255),c
  1300  00798C  503D               	movf	flashWriteData@address+1,w,c
  1301  00798E  2041               	addwfc	??_flashWriteData+1,w,c
  1302  007990  6E45               	movwf	(??_flashWriteData+5)& (0+255),c
  1303  007992  503E               	movf	flashWriteData@address+2,w,c
  1304  007994  2042               	addwfc	??_flashWriteData+2,w,c
  1305  007996  6E46               	movwf	(??_flashWriteData+6)& (0+255),c
  1306  007998  503F               	movf	flashWriteData@address+3,w,c
  1307  00799A  2043               	addwfc	??_flashWriteData+3,w,c
  1308  00799C  6E47               	movwf	(??_flashWriteData+7)& (0+255),c
  1309  00799E  90D8               	bcf	status,0,c
  1310  0079A0  3247               	rrcf	??_flashWriteData+7,f,c
  1311  0079A2  3246               	rrcf	??_flashWriteData+6,f,c
  1312  0079A4  3245               	rrcf	??_flashWriteData+5,f,c
  1313  0079A6  3244               	rrcf	??_flashWriteData+4,f,c
  1314  0079A8  C044  F0CC         	movff	??_flashWriteData+4,flashWriteData@currentStartPoint
  1315  0079AC  C045  F0CD         	movff	??_flashWriteData+5,flashWriteData@currentStartPoint+1
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;FlashWrite.c: 22: if((size+currentStartPoint) > 32){
  1319  0079B0  C03A  F040         	movff	flashWriteData@size,??_flashWriteData
  1320  0079B4  C03B  F041         	movff	flashWriteData@size+1,??_flashWriteData+1
  1321  0079B8  0100               	movlb	0	; () banked
  1322  0079BA  51CC               	movf	flashWriteData@currentStartPoint& (0+255),w,b
  1323  0079BC  2640               	addwf	??_flashWriteData,f,c
  1324  0079BE  0100               	movlb	0	; () banked
  1325  0079C0  51CD               	movf	(flashWriteData@currentStartPoint+1)& (0+255),w,b
  1326  0079C2  2241               	addwfc	??_flashWriteData+1,f,c
  1327  0079C4  0E21               	movlw	33
  1328  0079C6  5C40               	subwf	??_flashWriteData,w,c
  1329  0079C8  0E00               	movlw	0
  1330  0079CA  5841               	subwfb	??_flashWriteData+1,w,c
  1331  0079CC  A0D8               	btfss	status,0,c
  1332  0079CE  D029               	goto	l1704
  1333                           
  1334                           ; BSR set to: 0
  1335                           ;FlashWrite.c: 23: i = (size+currentStartPoint) - 32;
  1336  0079D0  C03A  F040         	movff	flashWriteData@size,??_flashWriteData
  1337  0079D4  C03B  F041         	movff	flashWriteData@size+1,??_flashWriteData+1
  1338  0079D8  0100               	movlb	0	; () banked
  1339  0079DA  51CC               	movf	flashWriteData@currentStartPoint& (0+255),w,b
  1340  0079DC  2640               	addwf	??_flashWriteData,f,c
  1341  0079DE  0100               	movlb	0	; () banked
  1342  0079E0  51CD               	movf	(flashWriteData@currentStartPoint+1)& (0+255),w,b
  1343  0079E2  2241               	addwfc	??_flashWriteData+1,f,c
  1344  0079E4  0EE0               	movlw	224
  1345  0079E6  2440               	addwf	??_flashWriteData,w,c
  1346  0079E8  0100               	movlb	0	; () banked
  1347  0079EA  6FCE               	movwf	flashWriteData@i& (0+255),b
  1348  0079EC  0EFF               	movlw	255
  1349  0079EE  2041               	addwfc	??_flashWriteData+1,w,c
  1350  0079F0  D008               	goto	L6
  1351  0079F2                     l1698:
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;FlashWrite.c: 26: i = i - 32;
  1355  0079F2  0EE0               	movlw	224
  1356  0079F4  0100               	movlb	0	; () banked
  1357  0079F6  25CE               	addwf	flashWriteData@i& (0+255),w,b
  1358  0079F8  0100               	movlb	0	; () banked
  1359  0079FA  6FCE               	movwf	flashWriteData@i& (0+255),b
  1360  0079FC  0EFF               	movlw	255
  1361  0079FE  0100               	movlb	0	; () banked
  1362  007A00  21CF               	addwfc	(flashWriteData@i+1)& (0+255),w,b
  1363  007A02                     L6:
  1364  007A02  0100               	movlb	0	; () banked
  1365  007A04  6FCF               	movwf	(flashWriteData@i+1)& (0+255),b
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;FlashWrite.c: 27: timesToWrite++;
  1369  007A06  0100               	movlb	0	; () banked
  1370  007A08  4BC4               	infsnz	flashWriteData@timesToWrite& (0+255),f,b
  1371  007A0A  2BC5               	incf	(flashWriteData@timesToWrite+1)& (0+255),f,b
  1372                           
  1373                           ; BSR set to: 0
  1374                           
  1375                           ; BSR set to: 0
  1376  007A0C  0100               	movlb	0	; () banked
  1377  007A0E  51CF               	movf	(flashWriteData@i+1)& (0+255),w,b
  1378  007A10  0A80               	xorlw	128
  1379  007A12  6EF3               	movwf	prodl,c
  1380  007A14  0E80               	movlw	128
  1381  007A16  5CF3               	subwf	prodl,w,c
  1382  007A18  0E21               	movlw	33
  1383  007A1A  B4D8               	btfsc	status,2,c
  1384  007A1C  5DCE               	subwf	flashWriteData@i& (0+255),w,b
  1385  007A1E  B0D8               	btfsc	status,0,c
  1386  007A20  D7E8               	goto	l1698
  1387  007A22                     l1704:
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;FlashWrite.c: 28: }
  1391                           ;FlashWrite.c: 29: }
  1392                           ;FlashWrite.c: 31: for(i = 0 ; i < timesToWrite ; i++){
  1393  007A22  0E00               	movlw	0
  1394  007A24  0100               	movlb	0	; () banked
  1395  007A26  6FCF               	movwf	(flashWriteData@i+1)& (0+255),b
  1396  007A28  0E00               	movlw	0
  1397  007A2A  0100               	movlb	0	; () banked
  1398  007A2C  6FCE               	movwf	flashWriteData@i& (0+255),b
  1399  007A2E  D159               	goto	l1740
  1400  007A30                     l1706:
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;FlashWrite.c: 33: for(k = 0 ; k < 32 ; k++){
  1404  007A30  0E00               	movlw	0
  1405  007A32  0100               	movlb	0	; () banked
  1406  007A34  6FCB               	movwf	(flashWriteData@k+1)& (0+255),b
  1407  007A36  0E00               	movlw	0
  1408  007A38  0100               	movlb	0	; () banked
  1409  007A3A  6FCA               	movwf	flashWriteData@k& (0+255),b
  1410  007A3C                     
  1411                           ; BSR set to: 0
  1412  007A3C  0100               	movlb	0	; () banked
  1413  007A3E  51CB               	movf	(flashWriteData@k+1)& (0+255),w,b
  1414  007A40  0A80               	xorlw	128
  1415  007A42  0F80               	addlw	-128
  1416  007A44  0E20               	movlw	32
  1417  007A46  B4D8               	btfsc	status,2,c
  1418  007A48  5DCA               	subwf	flashWriteData@k& (0+255),w,b
  1419  007A4A  B0D8               	btfsc	status,0,c
  1420  007A4C  D025               	goto	l1720
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;FlashWrite.c: 34: newData[k] = data[nextDataSet];
  1424                           
  1425                           ; BSR set to: 0
  1426                           
  1427                           ; BSR set to: 0
  1428  007A4E  90D8               	bcf	status,0,c
  1429  007A50  0100               	movlb	0	; () banked
  1430  007A52  35C6               	rlcf	flashWriteData@nextDataSet& (0+255),w,b
  1431  007A54  6ED9               	movwf	fsr2l,c
  1432  007A56  0100               	movlb	0	; () banked
  1433  007A58  35C7               	rlcf	(flashWriteData@nextDataSet+1)& (0+255),w,b
  1434  007A5A  6EDA               	movwf	fsr2h,c
  1435  007A5C  5038               	movf	flashWriteData@data,w,c
  1436  007A5E  26D9               	addwf	fsr2l,f,c
  1437  007A60  5039               	movf	flashWriteData@data+1,w,c
  1438  007A62  22DA               	addwfc	fsr2h,f,c
  1439  007A64  0E80               	movlw	low flashWriteData@newData
  1440  007A66  6E40               	movwf	??_flashWriteData& (0+255),c
  1441  007A68  0E00               	movlw	high flashWriteData@newData
  1442  007A6A  6E41               	movwf	(??_flashWriteData+1)& (0+255),c
  1443  007A6C  90D8               	bcf	status,0,c
  1444  007A6E  0100               	movlb	0	; () banked
  1445  007A70  35CA               	rlcf	flashWriteData@k& (0+255),w,b
  1446  007A72  6EE1               	movwf	fsr1l,c
  1447  007A74  0100               	movlb	0	; () banked
  1448  007A76  35CB               	rlcf	(flashWriteData@k+1)& (0+255),w,b
  1449  007A78  6EE2               	movwf	fsr1h,c
  1450  007A7A  5040               	movf	??_flashWriteData,w,c
  1451  007A7C  26E1               	addwf	fsr1l,f,c
  1452  007A7E  5041               	movf	??_flashWriteData+1,w,c
  1453  007A80  22E2               	addwfc	fsr1h,f,c
  1454  007A82  CFDE FFE6          	movff	postinc2,postinc1
  1455  007A86  CFDD FFE5          	movff	postdec2,postdec1
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;FlashWrite.c: 35: nextDataSet++;
  1459  007A8A  0100               	movlb	0	; () banked
  1460  007A8C  4BC6               	infsnz	flashWriteData@nextDataSet& (0+255),f,b
  1461  007A8E  2BC7               	incf	(flashWriteData@nextDataSet+1)& (0+255),f,b
  1462                           
  1463                           ; BSR set to: 0
  1464  007A90  0100               	movlb	0	; () banked
  1465  007A92  4BCA               	infsnz	flashWriteData@k& (0+255),f,b
  1466  007A94  2BCB               	incf	(flashWriteData@k+1)& (0+255),f,b
  1467  007A96  D7D2               	goto	L7
  1468  007A98                     l1720:
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;FlashWrite.c: 36: }
  1472                           ;FlashWrite.c: 38: memoryBlock = (newAddress/64)+1;
  1473  007A98  0100               	movlb	0	; () banked
  1474  007A9A  C0D2  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1475  007A9E  0100               	movlb	0	; () banked
  1476  007AA0  C0D3  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1477  007AA4  0100               	movlb	0	; () banked
  1478  007AA6  C0D4  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1479  007AAA  0100               	movlb	0	; () banked
  1480  007AAC  C0D5  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1481  007AB0  0E07               	movlw	7
  1482  007AB2  D005               	goto	u990
  1483  007AB4                     u995:
  1484  007AB4  90D8               	bcf	status,0,c
  1485  007AB6  3243               	rrcf	??_flashWriteData+3,f,c
  1486  007AB8  3242               	rrcf	??_flashWriteData+2,f,c
  1487  007ABA  3241               	rrcf	??_flashWriteData+1,f,c
  1488  007ABC  3240               	rrcf	??_flashWriteData,f,c
  1489  007ABE                     u990:
  1490  007ABE  2EE8               	decfsz	wreg,f,c
  1491  007AC0  D7F9               	goto	u995
  1492  007AC2  0E01               	movlw	1
  1493  007AC4  2440               	addwf	??_flashWriteData,w,c
  1494  007AC6  0100               	movlb	0	; () banked
  1495  007AC8  6FC8               	movwf	flashWriteData@memoryBlock& (0+255),b
  1496  007ACA  0E00               	movlw	0
  1497  007ACC  2041               	addwfc	??_flashWriteData+1,w,c
  1498  007ACE  0100               	movlb	0	; () banked
  1499  007AD0  6FC9               	movwf	(flashWriteData@memoryBlock+1)& (0+255),b
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;FlashWrite.c: 39: flashReadBlock(blockBuffer, 64, memoryBlock);
  1503  007AD2  0102               	movlb	2	; () banked
  1504  007AD4  0E02               	movlw	high _blockBuffer
  1505  007AD6  6E27               	movwf	flashReadBlock@data+1,c
  1506  007AD8  0102               	movlb	2	; () banked
  1507  007ADA  0E00               	movlw	low _blockBuffer
  1508  007ADC  6E26               	movwf	flashReadBlock@data,c
  1509  007ADE  0E00               	movlw	0
  1510  007AE0  6E29               	movwf	flashReadBlock@size+1,c
  1511  007AE2  0E40               	movlw	64
  1512  007AE4  6E28               	movwf	flashReadBlock@size,c
  1513  007AE6  0100               	movlb	0	; () banked
  1514  007AE8  C0C8  F02A         	movff	flashWriteData@memoryBlock,flashReadBlock@blockNumber
  1515  007AEC  0100               	movlb	0	; () banked
  1516  007AEE  C0C9  F02B         	movff	flashWriteData@memoryBlock+1,flashReadBlock@blockNumber+1
  1517  007AF2  6A2C               	clrf	flashReadBlock@blockNumber+2,c
  1518  007AF4  6A2D               	clrf	flashReadBlock@blockNumber+3,c
  1519  007AF6  EC8E  F037         	call	_flashReadBlock	;wreg free
  1520                           
  1521                           ;FlashWrite.c: 40: loadHalfBuffer();
  1522  007AFA  ECD6  F037         	call	_loadHalfBuffer	;wreg free
  1523                           
  1524                           ;FlashWrite.c: 41: bytesWritten = bytesWritten + (overwriteBufferData(newData, newSize, 
      +                          currentStartPoint));
  1525  007AFE  0100               	movlb	0	; () banked
  1526  007B00  0E00               	movlw	high flashWriteData@newData
  1527  007B02  6E0A               	movwf	overwriteBufferData@data+1,c
  1528  007B04  0100               	movlb	0	; () banked
  1529  007B06  0E80               	movlw	low flashWriteData@newData
  1530  007B08  6E09               	movwf	overwriteBufferData@data,c
  1531  007B0A  C0C2  F00B         	movff	flashWriteData@newSize,overwriteBufferData@sizeToWrite
  1532  007B0E  C0C3  F00C         	movff	flashWriteData@newSize+1,overwriteBufferData@sizeToWrite+1
  1533  007B12  C0CC  F00D         	movff	flashWriteData@currentStartPoint,overwriteBufferData@bufferStartPoint
  1534  007B16  C0CD  F00E         	movff	flashWriteData@currentStartPoint+1,overwriteBufferData@bufferStartPoint+1
  1535  007B1A  EC37  F038         	call	_overwriteBufferData	;wreg free
  1536  007B1E  0100               	movlb	0	; () banked
  1537  007B20  51D0               	movf	flashWriteData@bytesWritten& (0+255),w,b
  1538  007B22  2409               	addwf	?_overwriteBufferData,w,c
  1539  007B24  0100               	movlb	0	; () banked
  1540  007B26  6FD0               	movwf	flashWriteData@bytesWritten& (0+255),b
  1541  007B28  0100               	movlb	0	; () banked
  1542  007B2A  51D1               	movf	(flashWriteData@bytesWritten+1)& (0+255),w,b
  1543  007B2C  200A               	addwfc	?_overwriteBufferData+1,w,c
  1544  007B2E  0100               	movlb	0	; () banked
  1545  007B30  6FD1               	movwf	(flashWriteData@bytesWritten+1)& (0+255),b
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;FlashWrite.c: 43: rowErase((newAddress/64)*64);
  1549  007B32  0100               	movlb	0	; () banked
  1550  007B34  C0D2  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1551  007B38  0100               	movlb	0	; () banked
  1552  007B3A  C0D3  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1553  007B3E  0100               	movlb	0	; () banked
  1554  007B40  C0D4  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1555  007B44  0100               	movlb	0	; () banked
  1556  007B46  C0D5  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1557  007B4A  0E07               	movlw	7
  1558  007B4C  D005               	goto	u1000
  1559  007B4E                     u1005:
  1560  007B4E  90D8               	bcf	status,0,c
  1561  007B50  3243               	rrcf	??_flashWriteData+3,f,c
  1562  007B52  3242               	rrcf	??_flashWriteData+2,f,c
  1563  007B54  3241               	rrcf	??_flashWriteData+1,f,c
  1564  007B56  3240               	rrcf	??_flashWriteData,f,c
  1565  007B58                     u1000:
  1566  007B58  2EE8               	decfsz	wreg,f,c
  1567  007B5A  D7F9               	goto	u1005
  1568  007B5C  0E06               	movlw	6
  1569  007B5E                     u1015:
  1570  007B5E  90D8               	bcf	status,0,c
  1571  007B60  3640               	rlcf	??_flashWriteData,f,c
  1572  007B62  3641               	rlcf	??_flashWriteData+1,f,c
  1573  007B64  3642               	rlcf	??_flashWriteData+2,f,c
  1574  007B66  3643               	rlcf	??_flashWriteData+3,f,c
  1575  007B68  2EE8               	decfsz	wreg,f,c
  1576  007B6A  D7F9               	goto	u1015
  1577  007B6C  C040  F026         	movff	??_flashWriteData,rowErase@address
  1578  007B70  C041  F027         	movff	??_flashWriteData+1,rowErase@address+1
  1579  007B74  C042  F028         	movff	??_flashWriteData+2,rowErase@address+2
  1580  007B78  C043  F029         	movff	??_flashWriteData+3,rowErase@address+3
  1581  007B7C  ECA3  F039         	call	_rowErase	;wreg free
  1582                           
  1583                           ;FlashWrite.c: 44: flashSetAddress((newAddress/64)*64);
  1584  007B80  0100               	movlb	0	; () banked
  1585  007B82  C0D2  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1586  007B86  0100               	movlb	0	; () banked
  1587  007B88  C0D3  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1588  007B8C  0100               	movlb	0	; () banked
  1589  007B8E  C0D4  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1590  007B92  0100               	movlb	0	; () banked
  1591  007B94  C0D5  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1592  007B98  0E07               	movlw	7
  1593  007B9A  D005               	goto	u1020
  1594  007B9C                     u1025:
  1595  007B9C  90D8               	bcf	status,0,c
  1596  007B9E  3243               	rrcf	??_flashWriteData+3,f,c
  1597  007BA0  3242               	rrcf	??_flashWriteData+2,f,c
  1598  007BA2  3241               	rrcf	??_flashWriteData+1,f,c
  1599  007BA4  3240               	rrcf	??_flashWriteData,f,c
  1600  007BA6                     u1020:
  1601  007BA6  2EE8               	decfsz	wreg,f,c
  1602  007BA8  D7F9               	goto	u1025
  1603  007BAA  0E06               	movlw	6
  1604  007BAC                     u1035:
  1605  007BAC  90D8               	bcf	status,0,c
  1606  007BAE  3640               	rlcf	??_flashWriteData,f,c
  1607  007BB0  3641               	rlcf	??_flashWriteData+1,f,c
  1608  007BB2  3642               	rlcf	??_flashWriteData+2,f,c
  1609  007BB4  3643               	rlcf	??_flashWriteData+3,f,c
  1610  007BB6  2EE8               	decfsz	wreg,f,c
  1611  007BB8  D7F9               	goto	u1035
  1612  007BBA  C040  F012         	movff	??_flashWriteData,flashSetAddress@address
  1613  007BBE  C041  F013         	movff	??_flashWriteData+1,flashSetAddress@address+1
  1614  007BC2  C042  F014         	movff	??_flashWriteData+2,flashSetAddress@address+2
  1615  007BC6  C043  F015         	movff	??_flashWriteData+3,flashSetAddress@address+3
  1616  007BCA  ECA8  F038         	call	_flashSetAddress	;wreg free
  1617                           
  1618                           ;FlashWrite.c: 45: flashWriteBlock(halfBuffer1, halfBuffer2, memoryBlock);
  1619  007BCE  0E00               	movlw	high _halfBuffer1
  1620  007BD0  6E27               	movwf	flashWriteBlock@firstHalf+1,c
  1621  007BD2  0E5A               	movlw	low _halfBuffer1
  1622  007BD4  6E26               	movwf	flashWriteBlock@firstHalf,c
  1623  007BD6  0102               	movlb	2	; () banked
  1624  007BD8  0E02               	movlw	high _halfBuffer2
  1625  007BDA  6E29               	movwf	flashWriteBlock@secondHalf+1,c
  1626  007BDC  0102               	movlb	2	; () banked
  1627  007BDE  0E40               	movlw	low _halfBuffer2
  1628  007BE0  6E28               	movwf	flashWriteBlock@secondHalf,c
  1629  007BE2  0100               	movlb	0	; () banked
  1630  007BE4  C0C8  F02A         	movff	flashWriteData@memoryBlock,flashWriteBlock@blockNumber
  1631  007BE8  0100               	movlb	0	; () banked
  1632  007BEA  C0C9  F02B         	movff	flashWriteData@memoryBlock+1,flashWriteBlock@blockNumber+1
  1633  007BEE  6A2C               	clrf	flashWriteBlock@blockNumber+2,c
  1634  007BF0  6A2D               	clrf	flashWriteBlock@blockNumber+3,c
  1635  007BF2  EC1A  F039         	call	_flashWriteBlock	;wreg free
  1636                           
  1637                           ;FlashWrite.c: 47: if(bytesWritten < size){
  1638  007BF6  503A               	movf	flashWriteData@size,w,c
  1639  007BF8  0100               	movlb	0	; () banked
  1640  007BFA  5DD0               	subwf	flashWriteData@bytesWritten& (0+255),w,b
  1641  007BFC  503B               	movf	flashWriteData@size+1,w,c
  1642  007BFE  0100               	movlb	0	; () banked
  1643  007C00  59D1               	subwfb	(flashWriteData@bytesWritten+1)& (0+255),w,b
  1644  007C02  B0D8               	btfsc	status,0,c
  1645  007C04  D06B               	goto	l1738
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;FlashWrite.c: 48: nextDataSet = bytesWritten;
  1649  007C06  C0D0  F0C6         	movff	flashWriteData@bytesWritten,flashWriteData@nextDataSet
  1650  007C0A  C0D1  F0C7         	movff	flashWriteData@bytesWritten+1,flashWriteData@nextDataSet+1
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;FlashWrite.c: 49: newAddress = (memoryBlock*64);
  1654  007C0E  0100               	movlb	0	; () banked
  1655  007C10  C0C8  F040         	movff	flashWriteData@memoryBlock,??_flashWriteData
  1656  007C14  0100               	movlb	0	; () banked
  1657  007C16  C0C9  F041         	movff	flashWriteData@memoryBlock+1,??_flashWriteData+1
  1658  007C1A  0E06               	movlw	6
  1659  007C1C                     u1055:
  1660  007C1C  90D8               	bcf	status,0,c
  1661  007C1E  3640               	rlcf	??_flashWriteData,f,c
  1662  007C20  3641               	rlcf	??_flashWriteData+1,f,c
  1663  007C22  2EE8               	decfsz	wreg,f,c
  1664  007C24  D7FB               	goto	u1055
  1665  007C26  0100               	movlb	0	; () banked
  1666  007C28  C040  F0D2         	movff	??_flashWriteData,flashWriteData@newAddress
  1667  007C2C  0100               	movlb	0	; () banked
  1668  007C2E  C041  F0D3         	movff	??_flashWriteData+1,flashWriteData@newAddress+1
  1669  007C32  0100               	movlb	0	; () banked
  1670  007C34  6BD4               	clrf	(flashWriteData@newAddress+2)& (0+255),b
  1671  007C36  0100               	movlb	0	; () banked
  1672  007C38  6BD5               	clrf	(flashWriteData@newAddress+3)& (0+255),b
  1673                           
  1674                           ;FlashWrite.c: 50: newSize = size - bytesWritten;
  1675  007C3A  0100               	movlb	0	; () banked
  1676  007C3C  C0D0  F040         	movff	flashWriteData@bytesWritten,??_flashWriteData
  1677  007C40  0100               	movlb	0	; () banked
  1678  007C42  C0D1  F041         	movff	flashWriteData@bytesWritten+1,??_flashWriteData+1
  1679  007C46  1E40               	comf	??_flashWriteData,f,c
  1680  007C48  1E41               	comf	??_flashWriteData+1,f,c
  1681  007C4A  4A40               	infsnz	??_flashWriteData,f,c
  1682  007C4C  2A41               	incf	??_flashWriteData+1,f,c
  1683  007C4E  503A               	movf	flashWriteData@size,w,c
  1684  007C50  2440               	addwf	??_flashWriteData,w,c
  1685  007C52  0100               	movlb	0	; () banked
  1686  007C54  6FC2               	movwf	flashWriteData@newSize& (0+255),b
  1687  007C56  503B               	movf	flashWriteData@size+1,w,c
  1688  007C58  2041               	addwfc	??_flashWriteData+1,w,c
  1689  007C5A  0100               	movlb	0	; () banked
  1690  007C5C  6FC3               	movwf	(flashWriteData@newSize+1)& (0+255),b
  1691                           
  1692                           ;FlashWrite.c: 51: currentStartPoint = (newAddress - ((newAddress/64)*64))/2;
  1693  007C5E  0100               	movlb	0	; () banked
  1694  007C60  C0D2  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1695  007C64  0100               	movlb	0	; () banked
  1696  007C66  C0D3  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1697  007C6A  0100               	movlb	0	; () banked
  1698  007C6C  C0D4  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1699  007C70  0100               	movlb	0	; () banked
  1700  007C72  C0D5  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1701  007C76  0E07               	movlw	7
  1702  007C78  D005               	goto	u1060
  1703  007C7A                     u1065:
  1704  007C7A  90D8               	bcf	status,0,c
  1705  007C7C  3243               	rrcf	??_flashWriteData+3,f,c
  1706  007C7E  3242               	rrcf	??_flashWriteData+2,f,c
  1707  007C80  3241               	rrcf	??_flashWriteData+1,f,c
  1708  007C82  3240               	rrcf	??_flashWriteData,f,c
  1709  007C84                     u1060:
  1710  007C84  2EE8               	decfsz	wreg,f,c
  1711  007C86  D7F9               	goto	u1065
  1712  007C88  0E06               	movlw	6
  1713  007C8A                     u1075:
  1714  007C8A  90D8               	bcf	status,0,c
  1715  007C8C  3640               	rlcf	??_flashWriteData,f,c
  1716  007C8E  3641               	rlcf	??_flashWriteData+1,f,c
  1717  007C90  3642               	rlcf	??_flashWriteData+2,f,c
  1718  007C92  3643               	rlcf	??_flashWriteData+3,f,c
  1719  007C94  2EE8               	decfsz	wreg,f,c
  1720  007C96  D7F9               	goto	u1075
  1721  007C98  1E40               	comf	??_flashWriteData,f,c
  1722  007C9A  1E41               	comf	??_flashWriteData+1,f,c
  1723  007C9C  1E42               	comf	??_flashWriteData+2,f,c
  1724  007C9E  1E43               	comf	??_flashWriteData+3,f,c
  1725  007CA0  2A40               	incf	??_flashWriteData,f,c
  1726  007CA2  0E00               	movlw	0
  1727  007CA4  2241               	addwfc	??_flashWriteData+1,f,c
  1728  007CA6  2242               	addwfc	??_flashWriteData+2,f,c
  1729  007CA8  2243               	addwfc	??_flashWriteData+3,f,c
  1730  007CAA  0100               	movlb	0	; () banked
  1731  007CAC  51D2               	movf	flashWriteData@newAddress& (0+255),w,b
  1732  007CAE  2440               	addwf	??_flashWriteData,w,c
  1733  007CB0  6E44               	movwf	(??_flashWriteData+4)& (0+255),c
  1734  007CB2  0100               	movlb	0	; () banked
  1735  007CB4  51D3               	movf	(flashWriteData@newAddress+1)& (0+255),w,b
  1736  007CB6  2041               	addwfc	??_flashWriteData+1,w,c
  1737  007CB8  6E45               	movwf	(??_flashWriteData+5)& (0+255),c
  1738  007CBA  0100               	movlb	0	; () banked
  1739  007CBC  51D4               	movf	(flashWriteData@newAddress+2)& (0+255),w,b
  1740  007CBE  2042               	addwfc	??_flashWriteData+2,w,c
  1741  007CC0  6E46               	movwf	(??_flashWriteData+6)& (0+255),c
  1742  007CC2  0100               	movlb	0	; () banked
  1743  007CC4  51D5               	movf	(flashWriteData@newAddress+3)& (0+255),w,b
  1744  007CC6  2043               	addwfc	??_flashWriteData+3,w,c
  1745  007CC8  6E47               	movwf	(??_flashWriteData+7)& (0+255),c
  1746  007CCA  90D8               	bcf	status,0,c
  1747  007CCC  3247               	rrcf	??_flashWriteData+7,f,c
  1748  007CCE  3246               	rrcf	??_flashWriteData+6,f,c
  1749  007CD0  3245               	rrcf	??_flashWriteData+5,f,c
  1750  007CD2  3244               	rrcf	??_flashWriteData+4,f,c
  1751  007CD4  C044  F0CC         	movff	??_flashWriteData+4,flashWriteData@currentStartPoint
  1752  007CD8  C045  F0CD         	movff	??_flashWriteData+5,flashWriteData@currentStartPoint+1
  1753  007CDC                     l1738:
  1754                           
  1755                           ; BSR set to: 0
  1756  007CDC  0100               	movlb	0	; () banked
  1757  007CDE  4BCE               	infsnz	flashWriteData@i& (0+255),f,b
  1758  007CE0  2BCF               	incf	(flashWriteData@i+1)& (0+255),f,b
  1759  007CE2                     l1740:
  1760                           
  1761                           ; BSR set to: 0
  1762  007CE2  0100               	movlb	0	; () banked
  1763  007CE4  51CF               	movf	(flashWriteData@i+1)& (0+255),w,b
  1764  007CE6  0A80               	xorlw	128
  1765  007CE8  6E40               	movwf	??_flashWriteData& (0+255),c
  1766  007CEA  0100               	movlb	0	; () banked
  1767  007CEC  51C4               	movf	flashWriteData@timesToWrite& (0+255),w,b
  1768  007CEE  0100               	movlb	0	; () banked
  1769  007CF0  5DCE               	subwf	flashWriteData@i& (0+255),w,b
  1770  007CF2  0100               	movlb	0	; () banked
  1771  007CF4  51C5               	movf	(flashWriteData@timesToWrite+1)& (0+255),w,b
  1772  007CF6  0A80               	xorlw	128
  1773  007CF8  5840               	subwfb	??_flashWriteData& (0+255),w,c
  1774  007CFA  B0D8               	btfsc	status,0,c
  1775                           
  1776                           ; BSR set to: 0
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;FlashWrite.c: 52: }
  1780                           ;FlashWrite.c: 53: }
  1781                           ;FlashWrite.c: 54: return bytesWritten;
  1782                           ;	Return value of _flashWriteData is never used
  1783  007CFC  0012               	return	
  1784  007CFE  D698               	goto	l1706
  1785  007D00                     __end_of_flashWriteData:
  1786                           	opt stack 0
  1787                           prodl	equ	0xFF3
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           postinc1	equ	0xFE6
  1791                           postdec1	equ	0xFE5
  1792                           fsr1h	equ	0xFE2
  1793                           fsr1l	equ	0xFE1
  1794                           postinc2	equ	0xFDE
  1795                           postdec2	equ	0xFDD
  1796                           fsr2h	equ	0xFDA
  1797                           fsr2l	equ	0xFD9
  1798                           status	equ	0xFD8
  1799                           
  1800 ;; *************** function _rowErase *****************
  1801 ;; Defined at:
  1802 ;;		line 237 in file "../src/PIC18/FlashProg.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  address         4   37[COMRAM] unsigned long 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;  i               2   41[COMRAM] int 
  1807 ;; Return value:  Size  Location     Type
  1808 ;;		None               void
  1809 ;; Registers used:
  1810 ;;		wreg, status,2, status,0, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1816 ;;      Params:         4       0       0       0       0       0       0
  1817 ;;      Locals:         2       0       0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0
  1819 ;;      Totals:         6       0       0       0       0       0       0
  1820 ;;Total ram usage:        6 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    5
  1823 ;; This function calls:
  1824 ;;		_PGC_high
  1825 ;;		_PGC_low
  1826 ;;		_PGD_low
  1827 ;;		_flashSetAddress
  1828 ;;		_writeBits
  1829 ;;		_writeICSP
  1830 ;; This function is called by:
  1831 ;;		_flashWriteData
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text3
  1836  007346                     __ptext3:
  1837                           	opt stack 0
  1838  007346                     _rowErase:
  1839                           	opt stack 23
  1840                           
  1841                           ;FlashProg.c: 238: int i;
  1842                           ;FlashProg.c: 239: writeICSP(0x0, 0x8ea6);
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;incstack = 0
  1846  007346  0E00               	movlw	0
  1847  007348  6E0F               	movwf	writeICSP@commandByte+1,c
  1848  00734A  0E00               	movlw	0
  1849  00734C  6E0E               	movwf	writeICSP@commandByte,c
  1850  00734E  0E8E               	movlw	142
  1851  007350  6E11               	movwf	writeICSP@dataBytes+1,c
  1852  007352  0EA6               	movlw	166
  1853  007354  6E10               	movwf	writeICSP@dataBytes,c
  1854  007356  EC73  F036         	call	_writeICSP	;wreg free
  1855                           
  1856                           ;FlashProg.c: 240: writeICSP(0x0, 0x9ca6);
  1857  00735A  0E00               	movlw	0
  1858  00735C  6E0F               	movwf	writeICSP@commandByte+1,c
  1859  00735E  0E00               	movlw	0
  1860  007360  6E0E               	movwf	writeICSP@commandByte,c
  1861  007362  0E9C               	movlw	156
  1862  007364  6E11               	movwf	writeICSP@dataBytes+1,c
  1863  007366  0EA6               	movlw	166
  1864  007368  6E10               	movwf	writeICSP@dataBytes,c
  1865  00736A  EC73  F036         	call	_writeICSP	;wreg free
  1866                           
  1867                           ;FlashProg.c: 241: writeICSP(0x0, 0x84a6);
  1868  00736E  0E00               	movlw	0
  1869  007370  6E0F               	movwf	writeICSP@commandByte+1,c
  1870  007372  0E00               	movlw	0
  1871  007374  6E0E               	movwf	writeICSP@commandByte,c
  1872  007376  0E84               	movlw	132
  1873  007378  6E11               	movwf	writeICSP@dataBytes+1,c
  1874  00737A  0EA6               	movlw	166
  1875  00737C  6E10               	movwf	writeICSP@dataBytes,c
  1876  00737E  EC73  F036         	call	_writeICSP	;wreg free
  1877                           
  1878                           ;FlashProg.c: 244: writeICSP(0x0, 0x6af8);
  1879  007382  0E00               	movlw	0
  1880  007384  6E0F               	movwf	writeICSP@commandByte+1,c
  1881  007386  0E00               	movlw	0
  1882  007388  6E0E               	movwf	writeICSP@commandByte,c
  1883  00738A  0E6A               	movlw	106
  1884  00738C  6E11               	movwf	writeICSP@dataBytes+1,c
  1885  00738E  0EF8               	movlw	248
  1886  007390  6E10               	movwf	writeICSP@dataBytes,c
  1887  007392  EC73  F036         	call	_writeICSP	;wreg free
  1888                           
  1889                           ;FlashProg.c: 245: writeICSP(0x0, 0x6af7);
  1890  007396  0E00               	movlw	0
  1891  007398  6E0F               	movwf	writeICSP@commandByte+1,c
  1892  00739A  0E00               	movlw	0
  1893  00739C  6E0E               	movwf	writeICSP@commandByte,c
  1894  00739E  0E6A               	movlw	106
  1895  0073A0  6E11               	movwf	writeICSP@dataBytes+1,c
  1896  0073A2  0EF7               	movlw	247
  1897  0073A4  6E10               	movwf	writeICSP@dataBytes,c
  1898  0073A6  EC73  F036         	call	_writeICSP	;wreg free
  1899                           
  1900                           ;FlashProg.c: 246: writeICSP(0x0, 0x6af6);
  1901  0073AA  0E00               	movlw	0
  1902  0073AC  6E0F               	movwf	writeICSP@commandByte+1,c
  1903  0073AE  0E00               	movlw	0
  1904  0073B0  6E0E               	movwf	writeICSP@commandByte,c
  1905  0073B2  0E6A               	movlw	106
  1906  0073B4  6E11               	movwf	writeICSP@dataBytes+1,c
  1907  0073B6  0EF6               	movlw	246
  1908  0073B8  6E10               	movwf	writeICSP@dataBytes,c
  1909  0073BA  EC73  F036         	call	_writeICSP	;wreg free
  1910                           
  1911                           ;FlashProg.c: 247: flashSetAddress(address);
  1912  0073BE  C026  F012         	movff	rowErase@address,flashSetAddress@address
  1913  0073C2  C027  F013         	movff	rowErase@address+1,flashSetAddress@address+1
  1914  0073C6  C028  F014         	movff	rowErase@address+2,flashSetAddress@address+2
  1915  0073CA  C029  F015         	movff	rowErase@address+3,flashSetAddress@address+3
  1916  0073CE  ECA8  F038         	call	_flashSetAddress	;wreg free
  1917                           
  1918                           ;FlashProg.c: 249: writeICSP(0x0, 0x88a6);
  1919  0073D2  0E00               	movlw	0
  1920  0073D4  6E0F               	movwf	writeICSP@commandByte+1,c
  1921  0073D6  0E00               	movlw	0
  1922  0073D8  6E0E               	movwf	writeICSP@commandByte,c
  1923  0073DA  0E88               	movlw	136
  1924  0073DC  6E11               	movwf	writeICSP@dataBytes+1,c
  1925  0073DE  0EA6               	movlw	166
  1926  0073E0  6E10               	movwf	writeICSP@dataBytes,c
  1927  0073E2  EC73  F036         	call	_writeICSP	;wreg free
  1928                           
  1929                           ;FlashProg.c: 250: writeICSP(0x0, 0x82a6);
  1930  0073E6  0E00               	movlw	0
  1931  0073E8  6E0F               	movwf	writeICSP@commandByte+1,c
  1932  0073EA  0E00               	movlw	0
  1933  0073EC  6E0E               	movwf	writeICSP@commandByte,c
  1934  0073EE  0E82               	movlw	130
  1935  0073F0  6E11               	movwf	writeICSP@dataBytes+1,c
  1936  0073F2  0EA6               	movlw	166
  1937  0073F4  6E10               	movwf	writeICSP@dataBytes,c
  1938  0073F6  EC73  F036         	call	_writeICSP	;wreg free
  1939                           
  1940                           ;FlashProg.c: 251: writeBits(0x0, 3);
  1941  0073FA  0E00               	movlw	0
  1942  0073FC  6E06               	movwf	writeBits@pattern+1,c
  1943  0073FE  0E00               	movlw	0
  1944  007400  6E05               	movwf	writeBits@pattern,c
  1945  007402  0E00               	movlw	0
  1946  007404  6E08               	movwf	writeBits@bitsToWrite+1,c
  1947  007406  0E03               	movlw	3
  1948  007408  6E07               	movwf	writeBits@bitsToWrite,c
  1949  00740A  ECB4  F036         	call	_writeBits	;wreg free
  1950                           
  1951                           ;FlashProg.c: 252: PGC_high();
  1952  00740E  ECFC  F035         	call	_PGC_high	;wreg free
  1953                           
  1954                           ;FlashProg.c: 253: PGD_low();
  1955  007412  EC11  F036         	call	_PGD_low	;wreg free
  1956                           
  1957                           ;FlashProg.c: 254: for(i = 0; i < 25 ; i++){}
  1958  007416  0E00               	movlw	0
  1959  007418  6E2B               	movwf	rowErase@i+1,c
  1960  00741A  0E00               	movlw	0
  1961  00741C  6E2A               	movwf	rowErase@i,c
  1962  00741E  502B               	movf	rowErase@i+1,w,c
  1963  007420  0A80               	xorlw	128
  1964  007422  0F80               	addlw	-128
  1965  007424  0E19               	movlw	25
  1966  007426  B4D8               	btfsc	status,2,c
  1967  007428  5C2A               	subwf	rowErase@i,w,c
  1968  00742A  B0D8               	btfsc	status,0,c
  1969  00742C  D003               	goto	l1588
  1970  00742E  4A2A               	infsnz	rowErase@i,f,c
  1971  007430  2A2B               	incf	rowErase@i+1,f,c
  1972  007432  D7F5               	goto	L8
  1973  007434                     l1588:
  1974                           
  1975                           ;FlashProg.c: 255: PGC_low();
  1976  007434  ECFE  F035         	call	_PGC_low	;wreg free
  1977                           
  1978                           ;FlashProg.c: 256: for(i = 0; i < 25 ; i++){}
  1979  007438  0E00               	movlw	0
  1980  00743A  6E2B               	movwf	rowErase@i+1,c
  1981  00743C  0E00               	movlw	0
  1982  00743E  6E2A               	movwf	rowErase@i,c
  1983  007440  502B               	movf	rowErase@i+1,w,c
  1984  007442  0A80               	xorlw	128
  1985  007444  0F80               	addlw	-128
  1986  007446  0E19               	movlw	25
  1987  007448  B4D8               	btfsc	status,2,c
  1988  00744A  5C2A               	subwf	rowErase@i,w,c
  1989  00744C  B0D8               	btfsc	status,0,c
  1990  00744E  D003               	goto	l1600
  1991  007450  4A2A               	infsnz	rowErase@i,f,c
  1992  007452  2A2B               	incf	rowErase@i+1,f,c
  1993  007454  D7F5               	goto	L9
  1994  007456                     l1600:
  1995                           
  1996                           ;FlashProg.c: 257: writeBits(0x0, 16);
  1997  007456  0E00               	movlw	0
  1998  007458  6E06               	movwf	writeBits@pattern+1,c
  1999  00745A  0E00               	movlw	0
  2000  00745C  6E05               	movwf	writeBits@pattern,c
  2001  00745E  0E00               	movlw	0
  2002  007460  6E08               	movwf	writeBits@bitsToWrite+1,c
  2003  007462  0E10               	movlw	16
  2004  007464  6E07               	movwf	writeBits@bitsToWrite,c
  2005  007466  ECB4  F036         	call	_writeBits	;wreg free
  2006  00746A  0012               	return	
  2007  00746C                     __end_of_rowErase:
  2008                           	opt stack 0
  2009                           prodl	equ	0xFF3
  2010                           postinc0	equ	0xFEE
  2011                           wreg	equ	0xFE8
  2012                           postinc1	equ	0xFE6
  2013                           postdec1	equ	0xFE5
  2014                           fsr1h	equ	0xFE2
  2015                           fsr1l	equ	0xFE1
  2016                           postinc2	equ	0xFDE
  2017                           postdec2	equ	0xFDD
  2018                           fsr2h	equ	0xFDA
  2019                           fsr2l	equ	0xFD9
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _overwriteBufferData *****************
  2023 ;; Defined at:
  2024 ;;		line 57 in file "../src/PIC18/FlashWrite.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  data            2    8[COMRAM] PTR unsigned int 
  2027 ;;		 -> flashWriteData@newData(64), 
  2028 ;;  sizeToWrite     2   10[COMRAM] unsigned int 
  2029 ;;  bufferStartP    2   12[COMRAM] unsigned int 
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;  i               2   26[COMRAM] int 
  2032 ;;  availableWri    2   24[COMRAM] unsigned int 
  2033 ;;  start           2   22[COMRAM] unsigned int 
  2034 ;;  bytesWritten    2   20[COMRAM] unsigned int 
  2035 ;;  bytesLeft       2   18[COMRAM] unsigned int 
  2036 ;;  j               2   16[COMRAM] int 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  2    8[COMRAM] int 
  2039 ;; Registers used:
  2040 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2046 ;;      Params:         6       0       0       0       0       0       0
  2047 ;;      Locals:        12       0       0       0       0       0       0
  2048 ;;      Temps:          2       0       0       0       0       0       0
  2049 ;;      Totals:        20       0       0       0       0       0       0
  2050 ;;Total ram usage:       20 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    1
  2053 ;; This function calls:
  2054 ;;		_loadHalfBuffer
  2055 ;; This function is called by:
  2056 ;;		_flashWriteData
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           	psect	text4
  2061  00706E                     __ptext4:
  2062                           	opt stack 0
  2063  00706E                     _overwriteBufferData:
  2064                           	opt stack 27
  2065                           
  2066                           ;FlashWrite.c: 58: uint16 bytesWritten, availableWriteSpace = 0, bytesLeft, start;
  2067                           
  2068                           ;incstack = 0
  2069  00706E  0E00               	movlw	0
  2070  007070  6E1A               	movwf	overwriteBufferData@availableWriteSpace+1,c
  2071  007072  0E00               	movlw	0
  2072  007074  6E19               	movwf	overwriteBufferData@availableWriteSpace,c
  2073                           
  2074                           ;FlashWrite.c: 59: int i, j = 16;
  2075  007076  0E00               	movlw	0
  2076  007078  6E12               	movwf	overwriteBufferData@j+1,c
  2077  00707A  0E10               	movlw	16
  2078  00707C  6E11               	movwf	overwriteBufferData@j,c
  2079                           
  2080                           ;FlashWrite.c: 61: start = bufferStartPoint;
  2081  00707E  C00D  F017         	movff	overwriteBufferData@bufferStartPoint,overwriteBufferData@start
  2082  007082  C00E  F018         	movff	overwriteBufferData@bufferStartPoint+1,overwriteBufferData@start+1
  2083                           
  2084                           ;FlashWrite.c: 62: for(i = 0 ; i < sizeToWrite ; i++){
  2085  007086  0E00               	movlw	0
  2086  007088  6E1C               	movwf	overwriteBufferData@i+1,c
  2087  00708A  0E00               	movlw	0
  2088  00708C  6E1B               	movwf	overwriteBufferData@i,c
  2089  00708E  D01E               	goto	l1612
  2090  007090                     l1606:
  2091                           
  2092                           ;FlashWrite.c: 63: blockBuffer[start] = data[i];
  2093  007090  90D8               	bcf	status,0,c
  2094  007092  341B               	rlcf	overwriteBufferData@i,w,c
  2095  007094  6ED9               	movwf	fsr2l,c
  2096  007096  341C               	rlcf	overwriteBufferData@i+1,w,c
  2097  007098  6EDA               	movwf	fsr2h,c
  2098  00709A  5009               	movf	overwriteBufferData@data,w,c
  2099  00709C  26D9               	addwf	fsr2l,f,c
  2100  00709E  500A               	movf	overwriteBufferData@data+1,w,c
  2101  0070A0  22DA               	addwfc	fsr2h,f,c
  2102  0070A2  0E00               	movlw	low _blockBuffer
  2103  0070A4  6E0F               	movwf	??_overwriteBufferData& (0+255),c
  2104  0070A6  0E02               	movlw	high _blockBuffer
  2105  0070A8  6E10               	movwf	(??_overwriteBufferData+1)& (0+255),c
  2106  0070AA  90D8               	bcf	status,0,c
  2107  0070AC  3417               	rlcf	overwriteBufferData@start,w,c
  2108  0070AE  6EE1               	movwf	fsr1l,c
  2109  0070B0  3418               	rlcf	overwriteBufferData@start+1,w,c
  2110  0070B2  6EE2               	movwf	fsr1h,c
  2111  0070B4  500F               	movf	??_overwriteBufferData,w,c
  2112  0070B6  26E1               	addwf	fsr1l,f,c
  2113  0070B8  5010               	movf	??_overwriteBufferData+1,w,c
  2114  0070BA  22E2               	addwfc	fsr1h,f,c
  2115  0070BC  CFDE FFE6          	movff	postinc2,postinc1
  2116  0070C0  CFDD FFE5          	movff	postdec2,postdec1
  2117                           
  2118                           ;FlashWrite.c: 64: start++;
  2119  0070C4  4A17               	infsnz	overwriteBufferData@start,f,c
  2120  0070C6  2A18               	incf	overwriteBufferData@start+1,f,c
  2121  0070C8  4A1B               	infsnz	overwriteBufferData@i,f,c
  2122  0070CA  2A1C               	incf	overwriteBufferData@i+1,f,c
  2123  0070CC                     l1612:
  2124  0070CC  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2125  0070CE  5C1B               	subwf	overwriteBufferData@i,w,c
  2126  0070D0  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2127  0070D2  581C               	subwfb	overwriteBufferData@i+1,w,c
  2128  0070D4  A0D8               	btfss	status,0,c
  2129  0070D6  D7DC               	goto	l1606
  2130                           
  2131                           ;FlashWrite.c: 65: }
  2132                           ;FlashWrite.c: 67: availableWriteSpace = 32 - bufferStartPoint;
  2133  0070D8  C00D  F00F         	movff	overwriteBufferData@bufferStartPoint,??_overwriteBufferData
  2134  0070DC  C00E  F010         	movff	overwriteBufferData@bufferStartPoint+1,??_overwriteBufferData+1
  2135  0070E0  1E0F               	comf	??_overwriteBufferData,f,c
  2136  0070E2  1E10               	comf	??_overwriteBufferData+1,f,c
  2137  0070E4  4A0F               	infsnz	??_overwriteBufferData,f,c
  2138  0070E6  2A10               	incf	??_overwriteBufferData+1,f,c
  2139  0070E8  0E20               	movlw	32
  2140  0070EA  240F               	addwf	??_overwriteBufferData,w,c
  2141  0070EC  6E19               	movwf	overwriteBufferData@availableWriteSpace,c
  2142  0070EE  0E00               	movlw	0
  2143  0070F0  2010               	addwfc	??_overwriteBufferData+1,w,c
  2144  0070F2  6E1A               	movwf	overwriteBufferData@availableWriteSpace+1,c
  2145                           
  2146                           ;FlashWrite.c: 69: if(sizeToWrite > availableWriteSpace){
  2147  0070F4  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2148  0070F6  5C19               	subwf	overwriteBufferData@availableWriteSpace,w,c
  2149  0070F8  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2150  0070FA  581A               	subwfb	overwriteBufferData@availableWriteSpace+1,w,c
  2151  0070FC  B0D8               	btfsc	status,0,c
  2152  0070FE  D01D               	goto	l225
  2153                           
  2154                           ;FlashWrite.c: 70: bytesLeft = sizeToWrite - availableWriteSpace;
  2155  007100  C019  F00F         	movff	overwriteBufferData@availableWriteSpace,??_overwriteBufferData
  2156  007104  C01A  F010         	movff	overwriteBufferData@availableWriteSpace+1,??_overwriteBufferData+1
  2157  007108  1E0F               	comf	??_overwriteBufferData,f,c
  2158  00710A  1E10               	comf	??_overwriteBufferData+1,f,c
  2159  00710C  4A0F               	infsnz	??_overwriteBufferData,f,c
  2160  00710E  2A10               	incf	??_overwriteBufferData+1,f,c
  2161  007110  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2162  007112  240F               	addwf	??_overwriteBufferData,w,c
  2163  007114  6E13               	movwf	overwriteBufferData@bytesLeft,c
  2164  007116  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2165  007118  2010               	addwfc	??_overwriteBufferData+1,w,c
  2166  00711A  6E14               	movwf	overwriteBufferData@bytesLeft+1,c
  2167                           
  2168                           ;FlashWrite.c: 71: bytesWritten = sizeToWrite - bytesLeft;
  2169  00711C  C013  F00F         	movff	overwriteBufferData@bytesLeft,??_overwriteBufferData
  2170  007120  C014  F010         	movff	overwriteBufferData@bytesLeft+1,??_overwriteBufferData+1
  2171  007124  1E0F               	comf	??_overwriteBufferData,f,c
  2172  007126  1E10               	comf	??_overwriteBufferData+1,f,c
  2173  007128  4A0F               	infsnz	??_overwriteBufferData,f,c
  2174  00712A  2A10               	incf	??_overwriteBufferData+1,f,c
  2175  00712C  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2176  00712E  240F               	addwf	??_overwriteBufferData,w,c
  2177  007130  6E15               	movwf	overwriteBufferData@bytesWritten,c
  2178  007132  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2179  007134  2010               	addwfc	??_overwriteBufferData+1,w,c
  2180  007136  6E16               	movwf	overwriteBufferData@bytesWritten+1,c
  2181                           
  2182                           ;FlashWrite.c: 72: }
  2183  007138  D004               	goto	l1618
  2184  00713A                     l225:
  2185                           
  2186                           ;FlashWrite.c: 73: else
  2187                           ;FlashWrite.c: 74: bytesWritten = sizeToWrite;
  2188  00713A  C00B  F015         	movff	overwriteBufferData@sizeToWrite,overwriteBufferData@bytesWritten
  2189  00713E  C00C  F016         	movff	overwriteBufferData@sizeToWrite+1,overwriteBufferData@bytesWritten+1
  2190  007142                     l1618:
  2191                           
  2192                           ;FlashWrite.c: 76: loadHalfBuffer();
  2193  007142  ECD6  F037         	call	_loadHalfBuffer	;wreg free
  2194                           
  2195                           ;FlashWrite.c: 78: return bytesWritten;
  2196  007146  C015  F009         	movff	overwriteBufferData@bytesWritten,?_overwriteBufferData
  2197  00714A  C016  F00A         	movff	overwriteBufferData@bytesWritten+1,?_overwriteBufferData+1
  2198  00714E  0012               	return	
  2199  007150                     __end_of_overwriteBufferData:
  2200                           	opt stack 0
  2201                           prodl	equ	0xFF3
  2202                           postinc0	equ	0xFEE
  2203                           wreg	equ	0xFE8
  2204                           postinc1	equ	0xFE6
  2205                           postdec1	equ	0xFE5
  2206                           fsr1h	equ	0xFE2
  2207                           fsr1l	equ	0xFE1
  2208                           postinc2	equ	0xFDE
  2209                           postdec2	equ	0xFDD
  2210                           fsr2h	equ	0xFDA
  2211                           fsr2l	equ	0xFD9
  2212                           status	equ	0xFD8
  2213                           
  2214 ;; *************** function _loadHalfBuffer *****************
  2215 ;; Defined at:
  2216 ;;		line 82 in file "../src/PIC18/FlashWrite.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;		None
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  i               2    6[COMRAM] int 
  2221 ;;  j               2    4[COMRAM] int 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;		None               void
  2224 ;; Registers used:
  2225 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2231 ;;      Params:         0       0       0       0       0       0       0
  2232 ;;      Locals:         4       0       0       0       0       0       0
  2233 ;;      Temps:          4       0       0       0       0       0       0
  2234 ;;      Totals:         8       0       0       0       0       0       0
  2235 ;;Total ram usage:        8 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; This function calls:
  2238 ;;		Nothing
  2239 ;; This function is called by:
  2240 ;;		_flashWriteData
  2241 ;;		_overwriteBufferData
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text5
  2246  006FAC                     __ptext5:
  2247                           	opt stack 0
  2248  006FAC                     _loadHalfBuffer:
  2249                           	opt stack 27
  2250                           
  2251                           ;FlashWrite.c: 83: int i, j = 16;
  2252                           
  2253                           ;incstack = 0
  2254  006FAC  0E00               	movlw	0
  2255  006FAE  6E06               	movwf	loadHalfBuffer@j+1,c
  2256  006FB0  0E10               	movlw	16
  2257  006FB2  6E05               	movwf	loadHalfBuffer@j,c
  2258                           
  2259                           ;FlashWrite.c: 85: for(i = 0 ; i < 16 ; i++){
  2260  006FB4  0E00               	movlw	0
  2261  006FB6  6E08               	movwf	loadHalfBuffer@i+1,c
  2262  006FB8  0E00               	movlw	0
  2263  006FBA  6E07               	movwf	loadHalfBuffer@i,c
  2264  006FBC  5008               	movf	loadHalfBuffer@i+1,w,c
  2265  006FBE  0A80               	xorlw	128
  2266  006FC0  0F80               	addlw	-128
  2267  006FC2  0E10               	movlw	16
  2268  006FC4  B4D8               	btfsc	status,2,c
  2269  006FC6  5C07               	subwf	loadHalfBuffer@i,w,c
  2270  006FC8  B0D8               	btfsc	status,0,c
  2271  006FCA  D021               	goto	l1500
  2272                           
  2273                           ;FlashWrite.c: 86: halfBuffer1[i] = blockBuffer[i];
  2274  006FCC  0E00               	movlw	low _blockBuffer
  2275  006FCE  6E01               	movwf	??_loadHalfBuffer& (0+255),c
  2276  006FD0  0E02               	movlw	high _blockBuffer
  2277  006FD2  6E02               	movwf	(??_loadHalfBuffer+1)& (0+255),c
  2278  006FD4  90D8               	bcf	status,0,c
  2279  006FD6  3407               	rlcf	loadHalfBuffer@i,w,c
  2280  006FD8  6ED9               	movwf	fsr2l,c
  2281  006FDA  3408               	rlcf	loadHalfBuffer@i+1,w,c
  2282  006FDC  6EDA               	movwf	fsr2h,c
  2283  006FDE  5001               	movf	??_loadHalfBuffer,w,c
  2284  006FE0  26D9               	addwf	fsr2l,f,c
  2285  006FE2  5002               	movf	??_loadHalfBuffer+1,w,c
  2286  006FE4  22DA               	addwfc	fsr2h,f,c
  2287  006FE6  0E5A               	movlw	low _halfBuffer1
  2288  006FE8  6E03               	movwf	(??_loadHalfBuffer+2)& (0+255),c
  2289  006FEA  0E00               	movlw	high _halfBuffer1
  2290  006FEC  6E04               	movwf	(??_loadHalfBuffer+3)& (0+255),c
  2291  006FEE  90D8               	bcf	status,0,c
  2292  006FF0  3407               	rlcf	loadHalfBuffer@i,w,c
  2293  006FF2  6EE1               	movwf	fsr1l,c
  2294  006FF4  3408               	rlcf	loadHalfBuffer@i+1,w,c
  2295  006FF6  6EE2               	movwf	fsr1h,c
  2296  006FF8  5003               	movf	??_loadHalfBuffer+2,w,c
  2297  006FFA  26E1               	addwf	fsr1l,f,c
  2298  006FFC  5004               	movf	??_loadHalfBuffer+3,w,c
  2299  006FFE  22E2               	addwfc	fsr1h,f,c
  2300  007000  CFDE FFE6          	movff	postinc2,postinc1
  2301  007004  CFDD FFE5          	movff	postdec2,postdec1
  2302  007008  4A07               	infsnz	loadHalfBuffer@i,f,c
  2303  00700A  2A08               	incf	loadHalfBuffer@i+1,f,c
  2304  00700C  D7D7               	goto	L10
  2305  00700E                     l1500:
  2306                           
  2307                           ;FlashWrite.c: 87: }
  2308                           ;FlashWrite.c: 88: for(i = 0 ; i < 16 ; i++){
  2309  00700E  0E00               	movlw	0
  2310  007010  6E08               	movwf	loadHalfBuffer@i+1,c
  2311  007012  0E00               	movlw	0
  2312  007014  6E07               	movwf	loadHalfBuffer@i,c
  2313  007016  5008               	movf	loadHalfBuffer@i+1,w,c
  2314  007018  0A80               	xorlw	128
  2315  00701A  0F80               	addlw	-128
  2316  00701C  0E10               	movlw	16
  2317  00701E  B4D8               	btfsc	status,2,c
  2318  007020  5C07               	subwf	loadHalfBuffer@i,w,c
  2319  007022  B0D8               	btfsc	status,0,c
  2320  007024  D023               	goto	l234
  2321                           
  2322                           ;FlashWrite.c: 89: halfBuffer2[i] = blockBuffer[j];
  2323  007026  0E00               	movlw	low _blockBuffer
  2324  007028  6E01               	movwf	??_loadHalfBuffer& (0+255),c
  2325  00702A  0E02               	movlw	high _blockBuffer
  2326  00702C  6E02               	movwf	(??_loadHalfBuffer+1)& (0+255),c
  2327  00702E  90D8               	bcf	status,0,c
  2328  007030  3405               	rlcf	loadHalfBuffer@j,w,c
  2329  007032  6ED9               	movwf	fsr2l,c
  2330  007034  3406               	rlcf	loadHalfBuffer@j+1,w,c
  2331  007036  6EDA               	movwf	fsr2h,c
  2332  007038  5001               	movf	??_loadHalfBuffer,w,c
  2333  00703A  26D9               	addwf	fsr2l,f,c
  2334  00703C  5002               	movf	??_loadHalfBuffer+1,w,c
  2335  00703E  22DA               	addwfc	fsr2h,f,c
  2336  007040  0E40               	movlw	low _halfBuffer2
  2337  007042  6E03               	movwf	(??_loadHalfBuffer+2)& (0+255),c
  2338  007044  0E02               	movlw	high _halfBuffer2
  2339  007046  6E04               	movwf	(??_loadHalfBuffer+3)& (0+255),c
  2340  007048  90D8               	bcf	status,0,c
  2341  00704A  3407               	rlcf	loadHalfBuffer@i,w,c
  2342  00704C  6EE1               	movwf	fsr1l,c
  2343  00704E  3408               	rlcf	loadHalfBuffer@i+1,w,c
  2344  007050  6EE2               	movwf	fsr1h,c
  2345  007052  5003               	movf	??_loadHalfBuffer+2,w,c
  2346  007054  26E1               	addwf	fsr1l,f,c
  2347  007056  5004               	movf	??_loadHalfBuffer+3,w,c
  2348  007058  22E2               	addwfc	fsr1h,f,c
  2349  00705A  CFDE FFE6          	movff	postinc2,postinc1
  2350  00705E  CFDD FFE5          	movff	postdec2,postdec1
  2351                           
  2352                           ;FlashWrite.c: 90: j++;
  2353  007062  4A05               	infsnz	loadHalfBuffer@j,f,c
  2354  007064  2A06               	incf	loadHalfBuffer@j+1,f,c
  2355  007066  4A07               	infsnz	loadHalfBuffer@i,f,c
  2356  007068  2A08               	incf	loadHalfBuffer@i+1,f,c
  2357  00706A  D7D5               	goto	L11
  2358  00706C                     l234:
  2359  00706C  0012               	return	
  2360  00706E                     __end_of_loadHalfBuffer:
  2361                           	opt stack 0
  2362                           prodl	equ	0xFF3
  2363                           postinc0	equ	0xFEE
  2364                           wreg	equ	0xFE8
  2365                           postinc1	equ	0xFE6
  2366                           postdec1	equ	0xFE5
  2367                           fsr1h	equ	0xFE2
  2368                           fsr1l	equ	0xFE1
  2369                           postinc2	equ	0xFDE
  2370                           postdec2	equ	0xFDD
  2371                           fsr2h	equ	0xFDA
  2372                           fsr2l	equ	0xFD9
  2373                           status	equ	0xFD8
  2374                           
  2375 ;; *************** function _flashWriteBlock *****************
  2376 ;; Defined at:
  2377 ;;		line 202 in file "../src/PIC18/FlashProg.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;  firstHalf       2   37[COMRAM] PTR unsigned int 
  2380 ;;		 -> halfBuffer1(32), main@blockWrite2(32), main@blockWrite0(32), 
  2381 ;;  secondHalf      2   39[COMRAM] PTR unsigned int 
  2382 ;;		 -> halfBuffer2(32), main@blockWrite3(32), main@blockWrite1(32), 
  2383 ;;  blockNumber     4   41[COMRAM] unsigned long 
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;  blockSelect     4   49[COMRAM] unsigned long 
  2386 ;;  i               2   53[COMRAM] int 
  2387 ;; Return value:  Size  Location     Type
  2388 ;;		None               void
  2389 ;; Registers used:
  2390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2396 ;;      Params:         8       0       0       0       0       0       0
  2397 ;;      Locals:         6       0       0       0       0       0       0
  2398 ;;      Temps:          4       0       0       0       0       0       0
  2399 ;;      Totals:        18       0       0       0       0       0       0
  2400 ;;Total ram usage:       18 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    5
  2403 ;; This function calls:
  2404 ;;		_flashSetAddress
  2405 ;;		_flashWriteAndProgram
  2406 ;;		_writeToBuffer
  2407 ;; This function is called by:
  2408 ;;		_main
  2409 ;;		_flashWriteData
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text6
  2414  007234                     __ptext6:
  2415                           	opt stack 0
  2416  007234                     _flashWriteBlock:
  2417                           	opt stack 23
  2418                           
  2419                           ;FlashProg.c: 203: int i;
  2420                           ;FlashProg.c: 204: uint32 blockSelect;
  2421                           ;FlashProg.c: 206: blockSelect = (blockNumber-1)*64;
  2422                           
  2423                           ;incstack = 0
  2424  007234  C02A  F02E         	movff	flashWriteBlock@blockNumber,??_flashWriteBlock
  2425  007238  C02B  F02F         	movff	flashWriteBlock@blockNumber+1,??_flashWriteBlock+1
  2426  00723C  C02C  F030         	movff	flashWriteBlock@blockNumber+2,??_flashWriteBlock+2
  2427  007240  C02D  F031         	movff	flashWriteBlock@blockNumber+3,??_flashWriteBlock+3
  2428  007244  0E06               	movlw	6
  2429  007246                     u805:
  2430  007246  90D8               	bcf	status,0,c
  2431  007248  362E               	rlcf	??_flashWriteBlock,f,c
  2432  00724A  362F               	rlcf	??_flashWriteBlock+1,f,c
  2433  00724C  3630               	rlcf	??_flashWriteBlock+2,f,c
  2434  00724E  3631               	rlcf	??_flashWriteBlock+3,f,c
  2435  007250  2EE8               	decfsz	wreg,f,c
  2436  007252  D7F9               	goto	u805
  2437  007254  0EC0               	movlw	192
  2438  007256  242E               	addwf	??_flashWriteBlock,w,c
  2439  007258  6E32               	movwf	flashWriteBlock@blockSelect,c
  2440  00725A  0EFF               	movlw	255
  2441  00725C  202F               	addwfc	??_flashWriteBlock+1,w,c
  2442  00725E  6E33               	movwf	flashWriteBlock@blockSelect+1,c
  2443  007260  0EFF               	movlw	255
  2444  007262  2030               	addwfc	??_flashWriteBlock+2,w,c
  2445  007264  6E34               	movwf	flashWriteBlock@blockSelect+2,c
  2446  007266  0EFF               	movlw	255
  2447  007268  2031               	addwfc	??_flashWriteBlock+3,w,c
  2448  00726A  6E35               	movwf	flashWriteBlock@blockSelect+3,c
  2449                           
  2450                           ;FlashProg.c: 208: flashSetAddress(blockSelect);
  2451  00726C  C032  F012         	movff	flashWriteBlock@blockSelect,flashSetAddress@address
  2452  007270  C033  F013         	movff	flashWriteBlock@blockSelect+1,flashSetAddress@address+1
  2453  007274  C034  F014         	movff	flashWriteBlock@blockSelect+2,flashSetAddress@address+2
  2454  007278  C035  F015         	movff	flashWriteBlock@blockSelect+3,flashSetAddress@address+3
  2455  00727C  ECA8  F038         	call	_flashSetAddress	;wreg free
  2456                           
  2457                           ;FlashProg.c: 209: for(i = 0 ; i < 15 ; i++){
  2458  007280  0E00               	movlw	0
  2459  007282  6E37               	movwf	flashWriteBlock@i+1,c
  2460  007284  0E00               	movlw	0
  2461  007286  6E36               	movwf	flashWriteBlock@i,c
  2462  007288  5037               	movf	flashWriteBlock@i+1,w,c
  2463  00728A  0A80               	xorlw	128
  2464  00728C  0F80               	addlw	-128
  2465  00728E  0E0F               	movlw	15
  2466  007290  B4D8               	btfsc	status,2,c
  2467  007292  5C36               	subwf	flashWriteBlock@i,w,c
  2468  007294  B0D8               	btfsc	status,0,c
  2469  007296  D012               	goto	l1554
  2470                           
  2471                           ;FlashProg.c: 210: writeToBuffer(firstHalf[i]);
  2472  007298  90D8               	bcf	status,0,c
  2473  00729A  3436               	rlcf	flashWriteBlock@i,w,c
  2474  00729C  6ED9               	movwf	fsr2l,c
  2475  00729E  3437               	rlcf	flashWriteBlock@i+1,w,c
  2476  0072A0  6EDA               	movwf	fsr2h,c
  2477  0072A2  5026               	movf	flashWriteBlock@firstHalf,w,c
  2478  0072A4  26D9               	addwf	fsr2l,f,c
  2479  0072A6  5027               	movf	flashWriteBlock@firstHalf+1,w,c
  2480  0072A8  22DA               	addwfc	fsr2h,f,c
  2481  0072AA  CFDE F012          	movff	postinc2,writeToBuffer@data
  2482  0072AE  CFDD F013          	movff	postdec2,writeToBuffer@data+1
  2483  0072B2  EC4A  F036         	call	_writeToBuffer	;wreg free
  2484  0072B6  4A36               	infsnz	flashWriteBlock@i,f,c
  2485  0072B8  2A37               	incf	flashWriteBlock@i+1,f,c
  2486  0072BA  D7E6               	goto	L12
  2487  0072BC                     l1554:
  2488                           
  2489                           ;FlashProg.c: 211: }
  2490                           ;FlashProg.c: 212: flashWriteAndProgram(firstHalf[15]);
  2491  0072BC  EE20 F01E          	lfsr	2,30
  2492  0072C0  5026               	movf	flashWriteBlock@firstHalf,w,c
  2493  0072C2  26D9               	addwf	fsr2l,f,c
  2494  0072C4  5027               	movf	flashWriteBlock@firstHalf+1,w,c
  2495  0072C6  22DA               	addwfc	fsr2h,f,c
  2496  0072C8  CFDE F012          	movff	postinc2,flashWriteAndProgram@data
  2497  0072CC  CFDD F013          	movff	postdec2,flashWriteAndProgram@data+1
  2498  0072D0  EC4B  F037         	call	_flashWriteAndProgram	;wreg free
  2499                           
  2500                           ;FlashProg.c: 214: flashSetAddress(blockSelect+32);
  2501  0072D4  0E20               	movlw	32
  2502  0072D6  2432               	addwf	flashWriteBlock@blockSelect,w,c
  2503  0072D8  6E12               	movwf	flashSetAddress@address,c
  2504  0072DA  0E00               	movlw	0
  2505  0072DC  2033               	addwfc	flashWriteBlock@blockSelect+1,w,c
  2506  0072DE  6E13               	movwf	flashSetAddress@address+1,c
  2507  0072E0  0E00               	movlw	0
  2508  0072E2  2034               	addwfc	flashWriteBlock@blockSelect+2,w,c
  2509  0072E4  6E14               	movwf	flashSetAddress@address+2,c
  2510  0072E6  0E00               	movlw	0
  2511  0072E8  2035               	addwfc	flashWriteBlock@blockSelect+3,w,c
  2512  0072EA  6E15               	movwf	flashSetAddress@address+3,c
  2513  0072EC  ECA8  F038         	call	_flashSetAddress	;wreg free
  2514                           
  2515                           ;FlashProg.c: 215: for(i = 0 ; i < 15 ; i++){
  2516  0072F0  0E00               	movlw	0
  2517  0072F2  6E37               	movwf	flashWriteBlock@i+1,c
  2518  0072F4  0E00               	movlw	0
  2519  0072F6  6E36               	movwf	flashWriteBlock@i,c
  2520  0072F8  5037               	movf	flashWriteBlock@i+1,w,c
  2521  0072FA  0A80               	xorlw	128
  2522  0072FC  0F80               	addlw	-128
  2523  0072FE  0E0F               	movlw	15
  2524  007300  B4D8               	btfsc	status,2,c
  2525  007302  5C36               	subwf	flashWriteBlock@i,w,c
  2526  007304  B0D8               	btfsc	status,0,c
  2527  007306  D012               	goto	l1570
  2528                           
  2529                           ;FlashProg.c: 216: writeToBuffer(secondHalf[i]);
  2530  007308  90D8               	bcf	status,0,c
  2531  00730A  3436               	rlcf	flashWriteBlock@i,w,c
  2532  00730C  6ED9               	movwf	fsr2l,c
  2533  00730E  3437               	rlcf	flashWriteBlock@i+1,w,c
  2534  007310  6EDA               	movwf	fsr2h,c
  2535  007312  5028               	movf	flashWriteBlock@secondHalf,w,c
  2536  007314  26D9               	addwf	fsr2l,f,c
  2537  007316  5029               	movf	flashWriteBlock@secondHalf+1,w,c
  2538  007318  22DA               	addwfc	fsr2h,f,c
  2539  00731A  CFDE F012          	movff	postinc2,writeToBuffer@data
  2540  00731E  CFDD F013          	movff	postdec2,writeToBuffer@data+1
  2541  007322  EC4A  F036         	call	_writeToBuffer	;wreg free
  2542  007326  4A36               	infsnz	flashWriteBlock@i,f,c
  2543  007328  2A37               	incf	flashWriteBlock@i+1,f,c
  2544  00732A  D7E6               	goto	L13
  2545  00732C                     l1570:
  2546                           
  2547                           ;FlashProg.c: 217: }
  2548                           ;FlashProg.c: 218: flashWriteAndProgram(secondHalf[15]);
  2549  00732C  EE20 F01E          	lfsr	2,30
  2550  007330  5028               	movf	flashWriteBlock@secondHalf,w,c
  2551  007332  26D9               	addwf	fsr2l,f,c
  2552  007334  5029               	movf	flashWriteBlock@secondHalf+1,w,c
  2553  007336  22DA               	addwfc	fsr2h,f,c
  2554  007338  CFDE F012          	movff	postinc2,flashWriteAndProgram@data
  2555  00733C  CFDD F013          	movff	postdec2,flashWriteAndProgram@data+1
  2556  007340  EC4B  F037         	call	_flashWriteAndProgram	;wreg free
  2557  007344  0012               	return	
  2558  007346                     __end_of_flashWriteBlock:
  2559                           	opt stack 0
  2560                           prodl	equ	0xFF3
  2561                           postinc0	equ	0xFEE
  2562                           wreg	equ	0xFE8
  2563                           postinc1	equ	0xFE6
  2564                           postdec1	equ	0xFE5
  2565                           fsr1h	equ	0xFE2
  2566                           fsr1l	equ	0xFE1
  2567                           postinc2	equ	0xFDE
  2568                           postdec2	equ	0xFDD
  2569                           fsr2h	equ	0xFDA
  2570                           fsr2l	equ	0xFD9
  2571                           status	equ	0xFD8
  2572                           
  2573 ;; *************** function _writeToBuffer *****************
  2574 ;; Defined at:
  2575 ;;		line 134 in file "../src/PIC18/FlashProg.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  data            2   17[COMRAM] unsigned int 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;		None               void
  2582 ;; Registers used:
  2583 ;;		wreg, status,2, status,0, cstack
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2589 ;;      Params:         2       0       0       0       0       0       0
  2590 ;;      Locals:         0       0       0       0       0       0       0
  2591 ;;      Temps:          0       0       0       0       0       0       0
  2592 ;;      Totals:         2       0       0       0       0       0       0
  2593 ;;Total ram usage:        2 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    4
  2596 ;; This function calls:
  2597 ;;		_writeICSP
  2598 ;; This function is called by:
  2599 ;;		_flashWriteBlock
  2600 ;;		_flashWriteHalfBlock
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           	psect	text7
  2605  006C94                     __ptext7:
  2606                           	opt stack 0
  2607  006C94                     _writeToBuffer:
  2608                           	opt stack 23
  2609                           
  2610                           ;FlashProg.c: 135: writeICSP(0xd, data);
  2611                           
  2612                           ;incstack = 0
  2613  006C94  0E00               	movlw	0
  2614  006C96  6E0F               	movwf	writeICSP@commandByte+1,c
  2615  006C98  0E0D               	movlw	13
  2616  006C9A  6E0E               	movwf	writeICSP@commandByte,c
  2617  006C9C  C012  F010         	movff	writeToBuffer@data,writeICSP@dataBytes
  2618  006CA0  C013  F011         	movff	writeToBuffer@data+1,writeICSP@dataBytes+1
  2619  006CA4  EC73  F036         	call	_writeICSP	;wreg free
  2620  006CA8  0012               	return	
  2621  006CAA                     __end_of_writeToBuffer:
  2622                           	opt stack 0
  2623                           prodl	equ	0xFF3
  2624                           postinc0	equ	0xFEE
  2625                           wreg	equ	0xFE8
  2626                           postinc1	equ	0xFE6
  2627                           postdec1	equ	0xFE5
  2628                           fsr1h	equ	0xFE2
  2629                           fsr1l	equ	0xFE1
  2630                           postinc2	equ	0xFDE
  2631                           postdec2	equ	0xFDD
  2632                           fsr2h	equ	0xFDA
  2633                           fsr2l	equ	0xFD9
  2634                           status	equ	0xFD8
  2635                           
  2636 ;; *************** function _flashWriteAndProgram *****************
  2637 ;; Defined at:
  2638 ;;		line 138 in file "../src/PIC18/FlashProg.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;  data            2   17[COMRAM] unsigned int 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  i               2   19[COMRAM] int 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;		None               void
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2652 ;;      Params:         2       0       0       0       0       0       0
  2653 ;;      Locals:         2       0       0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0
  2655 ;;      Totals:         4       0       0       0       0       0       0
  2656 ;;Total ram usage:        4 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    4
  2659 ;; This function calls:
  2660 ;;		_PGC_high
  2661 ;;		_PGC_low
  2662 ;;		_PGD_low
  2663 ;;		_writeBits
  2664 ;;		_writeICSP
  2665 ;; This function is called by:
  2666 ;;		_flashWriteBlock
  2667 ;;		_flashWriteHalfBlock
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           	psect	text8
  2672  006E96                     __ptext8:
  2673                           	opt stack 0
  2674  006E96                     _flashWriteAndProgram:
  2675                           	opt stack 23
  2676                           
  2677                           ;FlashProg.c: 139: int i;
  2678                           ;FlashProg.c: 142: writeICSP(0xf, data);
  2679                           
  2680                           ;incstack = 0
  2681  006E96  0E00               	movlw	0
  2682  006E98  6E0F               	movwf	writeICSP@commandByte+1,c
  2683  006E9A  0E0F               	movlw	15
  2684  006E9C  6E0E               	movwf	writeICSP@commandByte,c
  2685  006E9E  C012  F010         	movff	flashWriteAndProgram@data,writeICSP@dataBytes
  2686  006EA2  C013  F011         	movff	flashWriteAndProgram@data+1,writeICSP@dataBytes+1
  2687  006EA6  EC73  F036         	call	_writeICSP	;wreg free
  2688                           
  2689                           ;FlashProg.c: 144: writeBits(0x0, 3);
  2690  006EAA  0E00               	movlw	0
  2691  006EAC  6E06               	movwf	writeBits@pattern+1,c
  2692  006EAE  0E00               	movlw	0
  2693  006EB0  6E05               	movwf	writeBits@pattern,c
  2694  006EB2  0E00               	movlw	0
  2695  006EB4  6E08               	movwf	writeBits@bitsToWrite+1,c
  2696  006EB6  0E03               	movlw	3
  2697  006EB8  6E07               	movwf	writeBits@bitsToWrite,c
  2698  006EBA  ECB4  F036         	call	_writeBits	;wreg free
  2699                           
  2700                           ;FlashProg.c: 145: PGC_high();
  2701  006EBE  ECFC  F035         	call	_PGC_high	;wreg free
  2702                           
  2703                           ;FlashProg.c: 146: PGD_low();
  2704  006EC2  EC11  F036         	call	_PGD_low	;wreg free
  2705                           
  2706                           ;FlashProg.c: 147: for(i = 0; i < 25 ; i++){}
  2707  006EC6  0E00               	movlw	0
  2708  006EC8  6E15               	movwf	flashWriteAndProgram@i+1,c
  2709  006ECA  0E00               	movlw	0
  2710  006ECC  6E14               	movwf	flashWriteAndProgram@i,c
  2711  006ECE  5015               	movf	flashWriteAndProgram@i+1,w,c
  2712  006ED0  0A80               	xorlw	128
  2713  006ED2  0F80               	addlw	-128
  2714  006ED4  0E19               	movlw	25
  2715  006ED6  B4D8               	btfsc	status,2,c
  2716  006ED8  5C14               	subwf	flashWriteAndProgram@i,w,c
  2717  006EDA  B0D8               	btfsc	status,0,c
  2718  006EDC  D003               	goto	l1466
  2719  006EDE  4A14               	infsnz	flashWriteAndProgram@i,f,c
  2720  006EE0  2A15               	incf	flashWriteAndProgram@i+1,f,c
  2721  006EE2  D7F5               	goto	L14
  2722  006EE4                     l1466:
  2723                           
  2724                           ;FlashProg.c: 148: PGC_low();
  2725  006EE4  ECFE  F035         	call	_PGC_low	;wreg free
  2726                           
  2727                           ;FlashProg.c: 149: for(i = 0; i < 25 ; i++){}
  2728  006EE8  0E00               	movlw	0
  2729  006EEA  6E15               	movwf	flashWriteAndProgram@i+1,c
  2730  006EEC  0E00               	movlw	0
  2731  006EEE  6E14               	movwf	flashWriteAndProgram@i,c
  2732  006EF0  5015               	movf	flashWriteAndProgram@i+1,w,c
  2733  006EF2  0A80               	xorlw	128
  2734  006EF4  0F80               	addlw	-128
  2735  006EF6  0E19               	movlw	25
  2736  006EF8  B4D8               	btfsc	status,2,c
  2737  006EFA  5C14               	subwf	flashWriteAndProgram@i,w,c
  2738  006EFC  B0D8               	btfsc	status,0,c
  2739  006EFE  D003               	goto	l1478
  2740  006F00  4A14               	infsnz	flashWriteAndProgram@i,f,c
  2741  006F02  2A15               	incf	flashWriteAndProgram@i+1,f,c
  2742  006F04  D7F5               	goto	L15
  2743  006F06                     l1478:
  2744                           
  2745                           ;FlashProg.c: 150: writeBits(0x0, 16);
  2746  006F06  0E00               	movlw	0
  2747  006F08  6E06               	movwf	writeBits@pattern+1,c
  2748  006F0A  0E00               	movlw	0
  2749  006F0C  6E05               	movwf	writeBits@pattern,c
  2750  006F0E  0E00               	movlw	0
  2751  006F10  6E08               	movwf	writeBits@bitsToWrite+1,c
  2752  006F12  0E10               	movlw	16
  2753  006F14  6E07               	movwf	writeBits@bitsToWrite,c
  2754  006F16  ECB4  F036         	call	_writeBits	;wreg free
  2755  006F1A  0012               	return	
  2756  006F1C                     __end_of_flashWriteAndProgram:
  2757                           	opt stack 0
  2758                           prodl	equ	0xFF3
  2759                           postinc0	equ	0xFEE
  2760                           wreg	equ	0xFE8
  2761                           postinc1	equ	0xFE6
  2762                           postdec1	equ	0xFE5
  2763                           fsr1h	equ	0xFE2
  2764                           fsr1l	equ	0xFE1
  2765                           postinc2	equ	0xFDE
  2766                           postdec2	equ	0xFDD
  2767                           fsr2h	equ	0xFDA
  2768                           fsr2l	equ	0xFD9
  2769                           status	equ	0xFD8
  2770                           
  2771 ;; *************** function _flashReadBlock *****************
  2772 ;; Defined at:
  2773 ;;		line 190 in file "../src/PIC18/FlashProg.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;  data            2   37[COMRAM] PTR unsigned int 
  2776 ;;		 -> blockBuffer(64), main@blockRead(64), 
  2777 ;;  size            2   39[COMRAM] unsigned int 
  2778 ;;  blockNumber     4   41[COMRAM] unsigned long 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;  blockSelect     4   49[COMRAM] unsigned long 
  2781 ;;  i               2   53[COMRAM] int 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;		None               void
  2784 ;; Registers used:
  2785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2791 ;;      Params:         8       0       0       0       0       0       0
  2792 ;;      Locals:         6       0       0       0       0       0       0
  2793 ;;      Temps:          4       0       0       0       0       0       0
  2794 ;;      Totals:        18       0       0       0       0       0       0
  2795 ;;Total ram usage:       18 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    5
  2798 ;; This function calls:
  2799 ;;		_flashRead16Bits
  2800 ;;		_flashSetAddress
  2801 ;; This function is called by:
  2802 ;;		_main
  2803 ;;		_flashWriteData
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           	psect	text9
  2808  006F1C                     __ptext9:
  2809                           	opt stack 0
  2810  006F1C                     _flashReadBlock:
  2811                           	opt stack 23
  2812                           
  2813                           ;FlashProg.c: 191: int i;
  2814                           ;FlashProg.c: 192: uint32 blockSelect;
  2815                           ;FlashProg.c: 194: blockSelect = (blockNumber-1)*64;
  2816                           
  2817                           ;incstack = 0
  2818  006F1C  C02A  F02E         	movff	flashReadBlock@blockNumber,??_flashReadBlock
  2819  006F20  C02B  F02F         	movff	flashReadBlock@blockNumber+1,??_flashReadBlock+1
  2820  006F24  C02C  F030         	movff	flashReadBlock@blockNumber+2,??_flashReadBlock+2
  2821  006F28  C02D  F031         	movff	flashReadBlock@blockNumber+3,??_flashReadBlock+3
  2822  006F2C  0E06               	movlw	6
  2823  006F2E                     u785:
  2824  006F2E  90D8               	bcf	status,0,c
  2825  006F30  362E               	rlcf	??_flashReadBlock,f,c
  2826  006F32  362F               	rlcf	??_flashReadBlock+1,f,c
  2827  006F34  3630               	rlcf	??_flashReadBlock+2,f,c
  2828  006F36  3631               	rlcf	??_flashReadBlock+3,f,c
  2829  006F38  2EE8               	decfsz	wreg,f,c
  2830  006F3A  D7F9               	goto	u785
  2831  006F3C  0EC0               	movlw	192
  2832  006F3E  242E               	addwf	??_flashReadBlock,w,c
  2833  006F40  6E32               	movwf	flashReadBlock@blockSelect,c
  2834  006F42  0EFF               	movlw	255
  2835  006F44  202F               	addwfc	??_flashReadBlock+1,w,c
  2836  006F46  6E33               	movwf	flashReadBlock@blockSelect+1,c
  2837  006F48  0EFF               	movlw	255
  2838  006F4A  2030               	addwfc	??_flashReadBlock+2,w,c
  2839  006F4C  6E34               	movwf	flashReadBlock@blockSelect+2,c
  2840  006F4E  0EFF               	movlw	255
  2841  006F50  2031               	addwfc	??_flashReadBlock+3,w,c
  2842  006F52  6E35               	movwf	flashReadBlock@blockSelect+3,c
  2843                           
  2844                           ;FlashProg.c: 196: flashSetAddress(blockSelect);
  2845  006F54  C032  F012         	movff	flashReadBlock@blockSelect,flashSetAddress@address
  2846  006F58  C033  F013         	movff	flashReadBlock@blockSelect+1,flashSetAddress@address+1
  2847  006F5C  C034  F014         	movff	flashReadBlock@blockSelect+2,flashSetAddress@address+2
  2848  006F60  C035  F015         	movff	flashReadBlock@blockSelect+3,flashSetAddress@address+3
  2849  006F64  ECA8  F038         	call	_flashSetAddress	;wreg free
  2850                           
  2851                           ;FlashProg.c: 197: for(i = 0; i < size/2 ; i++){
  2852  006F68  0E00               	movlw	0
  2853  006F6A  6E37               	movwf	flashReadBlock@i+1,c
  2854  006F6C  0E00               	movlw	0
  2855  006F6E  6E36               	movwf	flashReadBlock@i,c
  2856  006F70  D011               	goto	l1536
  2857  006F72                     l1532:
  2858                           
  2859                           ;FlashProg.c: 198: data[i] = flashRead16Bits();
  2860  006F72  EC9D  F036         	call	_flashRead16Bits	;wreg free
  2861  006F76  90D8               	bcf	status,0,c
  2862  006F78  3436               	rlcf	flashReadBlock@i,w,c
  2863  006F7A  6ED9               	movwf	fsr2l,c
  2864  006F7C  3437               	rlcf	flashReadBlock@i+1,w,c
  2865  006F7E  6EDA               	movwf	fsr2h,c
  2866  006F80  5026               	movf	flashReadBlock@data,w,c
  2867  006F82  26D9               	addwf	fsr2l,f,c
  2868  006F84  5027               	movf	flashReadBlock@data+1,w,c
  2869  006F86  22DA               	addwfc	fsr2h,f,c
  2870  006F88  C013  FFDE         	movff	?_flashRead16Bits,postinc2
  2871  006F8C  C014  FFDD         	movff	?_flashRead16Bits+1,postdec2
  2872  006F90  4A36               	infsnz	flashReadBlock@i,f,c
  2873  006F92  2A37               	incf	flashReadBlock@i+1,f,c
  2874  006F94                     l1536:
  2875  006F94  90D8               	bcf	status,0,c
  2876  006F96  3029               	rrcf	flashReadBlock@size+1,w,c
  2877  006F98  6E2F               	movwf	(??_flashReadBlock+1)& (0+255),c
  2878  006F9A  3028               	rrcf	flashReadBlock@size,w,c
  2879  006F9C  6E2E               	movwf	??_flashReadBlock& (0+255),c
  2880  006F9E  502E               	movf	??_flashReadBlock,w,c
  2881  006FA0  5C36               	subwf	flashReadBlock@i,w,c
  2882  006FA2  502F               	movf	??_flashReadBlock+1,w,c
  2883  006FA4  5837               	subwfb	flashReadBlock@i+1,w,c
  2884  006FA6  B0D8               	btfsc	status,0,c
  2885  006FA8  0012               	return	
  2886  006FAA  D7E3               	goto	l1532
  2887  006FAC                     __end_of_flashReadBlock:
  2888                           	opt stack 0
  2889                           prodl	equ	0xFF3
  2890                           postinc0	equ	0xFEE
  2891                           wreg	equ	0xFE8
  2892                           postinc1	equ	0xFE6
  2893                           postdec1	equ	0xFE5
  2894                           fsr1h	equ	0xFE2
  2895                           fsr1l	equ	0xFE1
  2896                           postinc2	equ	0xFDE
  2897                           postdec2	equ	0xFDD
  2898                           fsr2h	equ	0xFDA
  2899                           fsr2l	equ	0xFD9
  2900                           status	equ	0xFD8
  2901                           
  2902 ;; *************** function _flashSetAddress *****************
  2903 ;; Defined at:
  2904 ;;		line 117 in file "../src/PIC18/FlashProg.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;  address         4   17[COMRAM] unsigned long 
  2907 ;; Auto vars:     Size  Location     Type
  2908 ;;  lowAddr         4   33[COMRAM] unsigned long 
  2909 ;;  highAddr        4   29[COMRAM] unsigned long 
  2910 ;;  upperAddr       4   25[COMRAM] unsigned long 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;		None               void
  2913 ;; Registers used:
  2914 ;;		wreg, status,2, status,0, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2920 ;;      Params:         4       0       0       0       0       0       0
  2921 ;;      Locals:        12       0       0       0       0       0       0
  2922 ;;      Temps:          4       0       0       0       0       0       0
  2923 ;;      Totals:        20       0       0       0       0       0       0
  2924 ;;Total ram usage:       20 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    4
  2927 ;; This function calls:
  2928 ;;		_writeICSP
  2929 ;; This function is called by:
  2930 ;;		_flashReadBlock
  2931 ;;		_flashWriteBlock
  2932 ;;		_rowErase
  2933 ;;		_flashWriteData
  2934 ;;		_flashWriteHalfBlock
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text10
  2939  007150                     __ptext10:
  2940                           	opt stack 0
  2941  007150                     _flashSetAddress:
  2942                           	opt stack 23
  2943                           
  2944                           ;FlashProg.c: 118: uint32 upperAddr;
  2945                           ;FlashProg.c: 119: uint32 highAddr;
  2946                           ;FlashProg.c: 120: uint32 lowAddr;
  2947                           ;FlashProg.c: 122: lowAddr = (address&0x0000ff);
  2948                           
  2949                           ;incstack = 0
  2950  007150  5012               	movf	flashSetAddress@address,w,c
  2951  007152  6E22               	movwf	flashSetAddress@lowAddr,c
  2952  007154  6A23               	clrf	flashSetAddress@lowAddr+1,c
  2953  007156  6A24               	clrf	flashSetAddress@lowAddr+2,c
  2954  007158  6A25               	clrf	flashSetAddress@lowAddr+3,c
  2955                           
  2956                           ;FlashProg.c: 123: highAddr = ((address>>8)&0x0000ff);
  2957  00715A  C012  F016         	movff	flashSetAddress@address,??_flashSetAddress
  2958  00715E  C013  F017         	movff	flashSetAddress@address+1,??_flashSetAddress+1
  2959  007162  C014  F018         	movff	flashSetAddress@address+2,??_flashSetAddress+2
  2960  007166  C015  F019         	movff	flashSetAddress@address+3,??_flashSetAddress+3
  2961  00716A  C017  F016         	movff	??_flashSetAddress+1,??_flashSetAddress
  2962  00716E  C018  F017         	movff	??_flashSetAddress+2,??_flashSetAddress+1
  2963  007172  C019  F018         	movff	??_flashSetAddress+3,??_flashSetAddress+2
  2964  007176  6A19               	clrf	??_flashSetAddress+3,c
  2965  007178  5016               	movf	??_flashSetAddress,w,c
  2966  00717A  6E1E               	movwf	flashSetAddress@highAddr,c
  2967  00717C  6A1F               	clrf	flashSetAddress@highAddr+1,c
  2968  00717E  6A20               	clrf	flashSetAddress@highAddr+2,c
  2969  007180  6A21               	clrf	flashSetAddress@highAddr+3,c
  2970                           
  2971                           ;FlashProg.c: 124: upperAddr = ((address>>16)&0x0000ff);
  2972  007182  C012  F016         	movff	flashSetAddress@address,??_flashSetAddress
  2973  007186  C013  F017         	movff	flashSetAddress@address+1,??_flashSetAddress+1
  2974  00718A  C014  F018         	movff	flashSetAddress@address+2,??_flashSetAddress+2
  2975  00718E  C015  F019         	movff	flashSetAddress@address+3,??_flashSetAddress+3
  2976  007192  0E11               	movlw	17
  2977  007194  D005               	goto	u690
  2978  007196                     u695:
  2979  007196  90D8               	bcf	status,0,c
  2980  007198  3219               	rrcf	??_flashSetAddress+3,f,c
  2981  00719A  3218               	rrcf	??_flashSetAddress+2,f,c
  2982  00719C  3217               	rrcf	??_flashSetAddress+1,f,c
  2983  00719E  3216               	rrcf	??_flashSetAddress,f,c
  2984  0071A0                     u690:
  2985  0071A0  2EE8               	decfsz	wreg,f,c
  2986  0071A2  D7F9               	goto	u695
  2987  0071A4  5016               	movf	??_flashSetAddress,w,c
  2988  0071A6  6E1A               	movwf	flashSetAddress@upperAddr,c
  2989  0071A8  6A1B               	clrf	flashSetAddress@upperAddr+1,c
  2990  0071AA  6A1C               	clrf	flashSetAddress@upperAddr+2,c
  2991  0071AC  6A1D               	clrf	flashSetAddress@upperAddr+3,c
  2992                           
  2993                           ;FlashProg.c: 126: writeICSP(0x0, 0x0e00|upperAddr);
  2994  0071AE  0E00               	movlw	0
  2995  0071B0  6E0F               	movwf	writeICSP@commandByte+1,c
  2996  0071B2  0E00               	movlw	0
  2997  0071B4  6E0E               	movwf	writeICSP@commandByte,c
  2998  0071B6  0E00               	movlw	0
  2999  0071B8  101A               	iorwf	flashSetAddress@upperAddr,w,c
  3000  0071BA  6E10               	movwf	writeICSP@dataBytes,c
  3001  0071BC  0E0E               	movlw	14
  3002  0071BE  101B               	iorwf	flashSetAddress@upperAddr+1,w,c
  3003  0071C0  6E11               	movwf	writeICSP@dataBytes+1,c
  3004  0071C2  EC73  F036         	call	_writeICSP	;wreg free
  3005                           
  3006                           ;FlashProg.c: 127: writeICSP(0x0, 0x6ef8);
  3007  0071C6  0E00               	movlw	0
  3008  0071C8  6E0F               	movwf	writeICSP@commandByte+1,c
  3009  0071CA  0E00               	movlw	0
  3010  0071CC  6E0E               	movwf	writeICSP@commandByte,c
  3011  0071CE  0E6E               	movlw	110
  3012  0071D0  6E11               	movwf	writeICSP@dataBytes+1,c
  3013  0071D2  0EF8               	movlw	248
  3014  0071D4  6E10               	movwf	writeICSP@dataBytes,c
  3015  0071D6  EC73  F036         	call	_writeICSP	;wreg free
  3016                           
  3017                           ;FlashProg.c: 128: writeICSP(0x0, 0x0e00|highAddr);
  3018  0071DA  0E00               	movlw	0
  3019  0071DC  6E0F               	movwf	writeICSP@commandByte+1,c
  3020  0071DE  0E00               	movlw	0
  3021  0071E0  6E0E               	movwf	writeICSP@commandByte,c
  3022  0071E2  0E00               	movlw	0
  3023  0071E4  101E               	iorwf	flashSetAddress@highAddr,w,c
  3024  0071E6  6E10               	movwf	writeICSP@dataBytes,c
  3025  0071E8  0E0E               	movlw	14
  3026  0071EA  101F               	iorwf	flashSetAddress@highAddr+1,w,c
  3027  0071EC  6E11               	movwf	writeICSP@dataBytes+1,c
  3028  0071EE  EC73  F036         	call	_writeICSP	;wreg free
  3029                           
  3030                           ;FlashProg.c: 129: writeICSP(0x0, 0x6ef7);
  3031  0071F2  0E00               	movlw	0
  3032  0071F4  6E0F               	movwf	writeICSP@commandByte+1,c
  3033  0071F6  0E00               	movlw	0
  3034  0071F8  6E0E               	movwf	writeICSP@commandByte,c
  3035  0071FA  0E6E               	movlw	110
  3036  0071FC  6E11               	movwf	writeICSP@dataBytes+1,c
  3037  0071FE  0EF7               	movlw	247
  3038  007200  6E10               	movwf	writeICSP@dataBytes,c
  3039  007202  EC73  F036         	call	_writeICSP	;wreg free
  3040                           
  3041                           ;FlashProg.c: 130: writeICSP(0x0, 0x0e00|lowAddr);
  3042  007206  0E00               	movlw	0
  3043  007208  6E0F               	movwf	writeICSP@commandByte+1,c
  3044  00720A  0E00               	movlw	0
  3045  00720C  6E0E               	movwf	writeICSP@commandByte,c
  3046  00720E  0E00               	movlw	0
  3047  007210  1022               	iorwf	flashSetAddress@lowAddr,w,c
  3048  007212  6E10               	movwf	writeICSP@dataBytes,c
  3049  007214  0E0E               	movlw	14
  3050  007216  1023               	iorwf	flashSetAddress@lowAddr+1,w,c
  3051  007218  6E11               	movwf	writeICSP@dataBytes+1,c
  3052  00721A  EC73  F036         	call	_writeICSP	;wreg free
  3053                           
  3054                           ;FlashProg.c: 131: writeICSP(0x0, 0x6ef6);
  3055  00721E  0E00               	movlw	0
  3056  007220  6E0F               	movwf	writeICSP@commandByte+1,c
  3057  007222  0E00               	movlw	0
  3058  007224  6E0E               	movwf	writeICSP@commandByte,c
  3059  007226  0E6E               	movlw	110
  3060  007228  6E11               	movwf	writeICSP@dataBytes+1,c
  3061  00722A  0EF6               	movlw	246
  3062  00722C  6E10               	movwf	writeICSP@dataBytes,c
  3063  00722E  EC73  F036         	call	_writeICSP	;wreg free
  3064  007232  0012               	return	
  3065  007234                     __end_of_flashSetAddress:
  3066                           	opt stack 0
  3067                           prodl	equ	0xFF3
  3068                           postinc0	equ	0xFEE
  3069                           wreg	equ	0xFE8
  3070                           postinc1	equ	0xFE6
  3071                           postdec1	equ	0xFE5
  3072                           fsr1h	equ	0xFE2
  3073                           fsr1l	equ	0xFE1
  3074                           postinc2	equ	0xFDE
  3075                           postdec2	equ	0xFDD
  3076                           fsr2h	equ	0xFDA
  3077                           fsr2l	equ	0xFD9
  3078                           status	equ	0xFD8
  3079                           
  3080 ;; *************** function _flashRead16Bits *****************
  3081 ;; Defined at:
  3082 ;;		line 169 in file "../src/PIC18/FlashProg.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;		None
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  data            2   22[COMRAM] unsigned int 
  3087 ;;  firstData       2   20[COMRAM] unsigned int 
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  2   18[COMRAM] unsigned int 
  3090 ;; Registers used:
  3091 ;;		wreg, status,2, status,0, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3097 ;;      Params:         2       0       0       0       0       0       0
  3098 ;;      Locals:         4       0       0       0       0       0       0
  3099 ;;      Temps:          0       0       0       0       0       0       0
  3100 ;;      Totals:         6       0       0       0       0       0       0
  3101 ;;Total ram usage:        6 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    4
  3104 ;; This function calls:
  3105 ;;		_readFirstByte
  3106 ;;		_readICSP
  3107 ;; This function is called by:
  3108 ;;		_flashReadBlock
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112                           	psect	text11
  3113  006D3A                     __ptext11:
  3114                           	opt stack 0
  3115  006D3A                     _flashRead16Bits:
  3116                           	opt stack 23
  3117                           
  3118                           ;FlashProg.c: 170: uint16 data;
  3119                           ;FlashProg.c: 171: uint16 firstData;
  3120                           ;FlashProg.c: 173: data = readICSP();
  3121                           
  3122                           ;incstack = 0
  3123  006D3A  ECD6  F036         	call	_readICSP	;wreg free
  3124  006D3E  C00F  F017         	movff	?_readICSP,flashRead16Bits@data
  3125  006D42  C010  F018         	movff	?_readICSP+1,flashRead16Bits@data+1
  3126                           
  3127                           ;FlashProg.c: 174: firstData = readFirstByte();
  3128  006D46  ECF9  F036         	call	_readFirstByte	;wreg free
  3129  006D4A  C00F  F015         	movff	?_readFirstByte,flashRead16Bits@firstData
  3130  006D4E  C010  F016         	movff	?_readFirstByte+1,flashRead16Bits@firstData+1
  3131                           
  3132                           ;FlashProg.c: 176: data = firstData|data;
  3133  006D52  5017               	movf	flashRead16Bits@data,w,c
  3134  006D54  1015               	iorwf	flashRead16Bits@firstData,w,c
  3135  006D56  6E17               	movwf	flashRead16Bits@data,c
  3136  006D58  5018               	movf	flashRead16Bits@data+1,w,c
  3137  006D5A  1016               	iorwf	flashRead16Bits@firstData+1,w,c
  3138  006D5C  6E18               	movwf	flashRead16Bits@data+1,c
  3139                           
  3140                           ;FlashProg.c: 178: return data;
  3141  006D5E  C017  F013         	movff	flashRead16Bits@data,?_flashRead16Bits
  3142  006D62  C018  F014         	movff	flashRead16Bits@data+1,?_flashRead16Bits+1
  3143  006D66  0012               	return	
  3144  006D68                     __end_of_flashRead16Bits:
  3145                           	opt stack 0
  3146                           prodl	equ	0xFF3
  3147                           postinc0	equ	0xFEE
  3148                           wreg	equ	0xFE8
  3149                           postinc1	equ	0xFE6
  3150                           postdec1	equ	0xFE5
  3151                           fsr1h	equ	0xFE2
  3152                           fsr1l	equ	0xFE1
  3153                           postinc2	equ	0xFDE
  3154                           postdec2	equ	0xFDD
  3155                           fsr2h	equ	0xFDA
  3156                           fsr2l	equ	0xFD9
  3157                           status	equ	0xFD8
  3158                           
  3159 ;; *************** function _readICSP *****************
  3160 ;; Defined at:
  3161 ;;		line 25 in file "../src/PIC18/ICSP.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  data            2   16[COMRAM] unsigned int 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  2   14[COMRAM] unsigned int 
  3168 ;; Registers used:
  3169 ;;		wreg, status,2, status,0, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3175 ;;      Params:         2       0       0       0       0       0       0
  3176 ;;      Locals:         2       0       0       0       0       0       0
  3177 ;;      Temps:          0       0       0       0       0       0       0
  3178 ;;      Totals:         4       0       0       0       0       0       0
  3179 ;;Total ram usage:        4 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    3
  3182 ;; This function calls:
  3183 ;;		_readBits
  3184 ;;		_writeBits
  3185 ;; This function is called by:
  3186 ;;		_flashRead16Bits
  3187 ;;		_readDeviceID1
  3188 ;;		_readDeviceID2
  3189 ;;		_flashRead8Bits
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text12
  3194  006DAC                     __ptext12:
  3195                           	opt stack 0
  3196  006DAC                     _readICSP:
  3197                           	opt stack 23
  3198                           
  3199                           ;ICSP.c: 26: uint16 data;
  3200                           ;ICSP.c: 27: writeBits(9, 4);
  3201                           
  3202                           ;incstack = 0
  3203  006DAC  0E00               	movlw	0
  3204  006DAE  6E06               	movwf	writeBits@pattern+1,c
  3205  006DB0  0E09               	movlw	9
  3206  006DB2  6E05               	movwf	writeBits@pattern,c
  3207  006DB4  0E00               	movlw	0
  3208  006DB6  6E08               	movwf	writeBits@bitsToWrite+1,c
  3209  006DB8  0E04               	movlw	4
  3210  006DBA  6E07               	movwf	writeBits@bitsToWrite,c
  3211  006DBC  ECB4  F036         	call	_writeBits	;wreg free
  3212                           
  3213                           ;ICSP.c: 28: writeBits(0, 8);
  3214  006DC0  0E00               	movlw	0
  3215  006DC2  6E06               	movwf	writeBits@pattern+1,c
  3216  006DC4  0E00               	movlw	0
  3217  006DC6  6E05               	movwf	writeBits@pattern,c
  3218  006DC8  0E00               	movlw	0
  3219  006DCA  6E08               	movwf	writeBits@bitsToWrite+1,c
  3220  006DCC  0E08               	movlw	8
  3221  006DCE  6E07               	movwf	writeBits@bitsToWrite,c
  3222  006DD0  ECB4  F036         	call	_writeBits	;wreg free
  3223                           
  3224                           ;ICSP.c: 29: data = readBits(8);
  3225  006DD4  0E00               	movlw	0
  3226  006DD6  6E09               	movwf	readBits@bitsToRead+1,c
  3227  006DD8  0E08               	movlw	8
  3228  006DDA  6E08               	movwf	readBits@bitsToRead,c
  3229  006DDC  EC1F  F037         	call	_readBits	;wreg free
  3230  006DE0  C008  F011         	movff	?_readBits,readICSP@data
  3231  006DE4  C009  F012         	movff	?_readBits+1,readICSP@data+1
  3232                           
  3233                           ;ICSP.c: 31: return data;
  3234  006DE8  C011  F00F         	movff	readICSP@data,?_readICSP
  3235  006DEC  C012  F010         	movff	readICSP@data+1,?_readICSP+1
  3236  006DF0  0012               	return	
  3237  006DF2                     __end_of_readICSP:
  3238                           	opt stack 0
  3239                           prodl	equ	0xFF3
  3240                           postinc0	equ	0xFEE
  3241                           wreg	equ	0xFE8
  3242                           postinc1	equ	0xFE6
  3243                           postdec1	equ	0xFE5
  3244                           fsr1h	equ	0xFE2
  3245                           fsr1l	equ	0xFE1
  3246                           postinc2	equ	0xFDE
  3247                           postdec2	equ	0xFDD
  3248                           fsr2h	equ	0xFDA
  3249                           fsr2l	equ	0xFD9
  3250                           status	equ	0xFD8
  3251                           
  3252 ;; *************** function _readFirstByte *****************
  3253 ;; Defined at:
  3254 ;;		line 34 in file "../src/PIC18/ICSP.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;		None
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  data            2   16[COMRAM] unsigned int 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  2   14[COMRAM] unsigned int 
  3261 ;; Registers used:
  3262 ;;		wreg, status,2, status,0, cstack
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3268 ;;      Params:         2       0       0       0       0       0       0
  3269 ;;      Locals:         2       0       0       0       0       0       0
  3270 ;;      Temps:          0       0       0       0       0       0       0
  3271 ;;      Totals:         4       0       0       0       0       0       0
  3272 ;;Total ram usage:        4 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    3
  3275 ;; This function calls:
  3276 ;;		_readBits
  3277 ;;		_writeBits
  3278 ;; This function is called by:
  3279 ;;		_flashRead16Bits
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	text13
  3284  006DF2                     __ptext13:
  3285                           	opt stack 0
  3286  006DF2                     _readFirstByte:
  3287                           	opt stack 23
  3288                           
  3289                           ;ICSP.c: 35: uint16 data;
  3290                           ;ICSP.c: 36: writeBits(9, 4);
  3291                           
  3292                           ;incstack = 0
  3293  006DF2  0E00               	movlw	0
  3294  006DF4  6E06               	movwf	writeBits@pattern+1,c
  3295  006DF6  0E09               	movlw	9
  3296  006DF8  6E05               	movwf	writeBits@pattern,c
  3297  006DFA  0E00               	movlw	0
  3298  006DFC  6E08               	movwf	writeBits@bitsToWrite+1,c
  3299  006DFE  0E04               	movlw	4
  3300  006E00  6E07               	movwf	writeBits@bitsToWrite,c
  3301  006E02  ECB4  F036         	call	_writeBits	;wreg free
  3302                           
  3303                           ;ICSP.c: 37: writeBits(0, 8);
  3304  006E06  0E00               	movlw	0
  3305  006E08  6E06               	movwf	writeBits@pattern+1,c
  3306  006E0A  0E00               	movlw	0
  3307  006E0C  6E05               	movwf	writeBits@pattern,c
  3308  006E0E  0E00               	movlw	0
  3309  006E10  6E08               	movwf	writeBits@bitsToWrite+1,c
  3310  006E12  0E08               	movlw	8
  3311  006E14  6E07               	movwf	writeBits@bitsToWrite,c
  3312  006E16  ECB4  F036         	call	_writeBits	;wreg free
  3313                           
  3314                           ;ICSP.c: 38: data = readBits(8);
  3315  006E1A  0E00               	movlw	0
  3316  006E1C  6E09               	movwf	readBits@bitsToRead+1,c
  3317  006E1E  0E08               	movlw	8
  3318  006E20  6E08               	movwf	readBits@bitsToRead,c
  3319  006E22  EC1F  F037         	call	_readBits	;wreg free
  3320  006E26  C008  F011         	movff	?_readBits,readFirstByte@data
  3321  006E2A  C009  F012         	movff	?_readBits+1,readFirstByte@data+1
  3322                           
  3323                           ;ICSP.c: 39: data = data<<8;
  3324  006E2E  5011               	movf	readFirstByte@data,w,c
  3325  006E30  6E12               	movwf	readFirstByte@data+1,c
  3326  006E32  6A11               	clrf	readFirstByte@data,c
  3327                           
  3328                           ;ICSP.c: 40: return data;
  3329  006E34  C011  F00F         	movff	readFirstByte@data,?_readFirstByte
  3330  006E38  C012  F010         	movff	readFirstByte@data+1,?_readFirstByte+1
  3331  006E3C  0012               	return	
  3332  006E3E                     __end_of_readFirstByte:
  3333                           	opt stack 0
  3334                           prodl	equ	0xFF3
  3335                           postinc0	equ	0xFEE
  3336                           wreg	equ	0xFE8
  3337                           postinc1	equ	0xFE6
  3338                           postdec1	equ	0xFE5
  3339                           fsr1h	equ	0xFE2
  3340                           fsr1l	equ	0xFE1
  3341                           postinc2	equ	0xFDE
  3342                           postdec2	equ	0xFDD
  3343                           fsr2h	equ	0xFDA
  3344                           fsr2l	equ	0xFD9
  3345                           status	equ	0xFD8
  3346                           
  3347 ;; *************** function _readBits *****************
  3348 ;; Defined at:
  3349 ;;		line 52 in file "../src/PIC18/ICSP.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;  bitsToRead      2    7[COMRAM] int 
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;  data            2   12[COMRAM] unsigned int 
  3354 ;;  i               2   10[COMRAM] int 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  2    7[COMRAM] unsigned int 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3364 ;;      Params:         2       0       0       0       0       0       0
  3365 ;;      Locals:         4       0       0       0       0       0       0
  3366 ;;      Temps:          1       0       0       0       0       0       0
  3367 ;;      Totals:         7       0       0       0       0       0       0
  3368 ;;Total ram usage:        7 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    2
  3371 ;; This function calls:
  3372 ;;		_readBit
  3373 ;; This function is called by:
  3374 ;;		_readICSP
  3375 ;;		_readFirstByte
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text14
  3380  006E3E                     __ptext14:
  3381                           	opt stack 0
  3382  006E3E                     _readBits:
  3383                           	opt stack 23
  3384                           
  3385                           ;ICSP.c: 53: int i=0;
  3386                           
  3387                           ;incstack = 0
  3388  006E3E  0E00               	movlw	0
  3389  006E40  6E0C               	movwf	readBits@i+1,c
  3390  006E42  0E00               	movlw	0
  3391  006E44  6E0B               	movwf	readBits@i,c
  3392                           
  3393                           ;ICSP.c: 54: uint16 data = 0;
  3394  006E46  0E00               	movlw	0
  3395  006E48  6E0E               	movwf	readBits@data+1,c
  3396  006E4A  0E00               	movlw	0
  3397  006E4C  6E0D               	movwf	readBits@data,c
  3398                           
  3399                           ;ICSP.c: 56: (TRISDbits.TRISD4 = 1);
  3400  006E4E  8895               	bsf	3989,4,c	;volatile
  3401                           
  3402                           ;ICSP.c: 58: while(i < bitsToRead){
  3403  006E50  D013               	goto	l1412
  3404  006E52                     l1408:
  3405                           
  3406                           ;ICSP.c: 59: data = (readBit()<< i)|data;
  3407  006E52  C00B  F00A         	movff	readBits@i,??_readBits
  3408  006E56  EC55  F036         	call	_readBit	;wreg free
  3409  006E5A  2A0A               	incf	??_readBits,f,c
  3410  006E5C  D003               	goto	u674
  3411  006E5E                     u675:
  3412  006E5E  90D8               	bcf	status,0,c
  3413  006E60  3604               	rlcf	?_readBit,f,c
  3414  006E62  3605               	rlcf	?_readBit+1,f,c
  3415  006E64                     u674:
  3416  006E64  2E0A               	decfsz	??_readBits,f,c
  3417  006E66  D7FB               	goto	u675
  3418  006E68  500D               	movf	readBits@data,w,c
  3419  006E6A  1004               	iorwf	?_readBit,w,c
  3420  006E6C  6E0D               	movwf	readBits@data,c
  3421  006E6E  500E               	movf	readBits@data+1,w,c
  3422  006E70  1005               	iorwf	?_readBit+1,w,c
  3423  006E72  6E0E               	movwf	readBits@data+1,c
  3424                           
  3425                           ;ICSP.c: 60: i++;
  3426  006E74  4A0B               	infsnz	readBits@i,f,c
  3427  006E76  2A0C               	incf	readBits@i+1,f,c
  3428  006E78                     l1412:
  3429  006E78  500C               	movf	readBits@i+1,w,c
  3430  006E7A  0A80               	xorlw	128
  3431  006E7C  6E0A               	movwf	??_readBits& (0+255),c
  3432  006E7E  5008               	movf	readBits@bitsToRead,w,c
  3433  006E80  5C0B               	subwf	readBits@i,w,c
  3434  006E82  5009               	movf	readBits@bitsToRead+1,w,c
  3435  006E84  0A80               	xorlw	128
  3436  006E86  580A               	subwfb	??_readBits& (0+255),w,c
  3437  006E88  A0D8               	btfss	status,0,c
  3438  006E8A  D7E3               	goto	l1408
  3439                           
  3440                           ;ICSP.c: 61: }
  3441                           ;ICSP.c: 62: return data;
  3442  006E8C  C00D  F008         	movff	readBits@data,?_readBits
  3443  006E90  C00E  F009         	movff	readBits@data+1,?_readBits+1
  3444  006E94  0012               	return	
  3445  006E96                     __end_of_readBits:
  3446                           	opt stack 0
  3447                           prodl	equ	0xFF3
  3448                           postinc0	equ	0xFEE
  3449                           wreg	equ	0xFE8
  3450                           postinc1	equ	0xFE6
  3451                           postdec1	equ	0xFE5
  3452                           fsr1h	equ	0xFE2
  3453                           fsr1l	equ	0xFE1
  3454                           postinc2	equ	0xFDE
  3455                           postdec2	equ	0xFDD
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _readBit *****************
  3461 ;; Defined at:
  3462 ;;		line 44 in file "../src/PIC18/ICSP.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;		None
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;  data            2    5[COMRAM] unsigned int 
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  2    3[COMRAM] unsigned int 
  3469 ;; Registers used:
  3470 ;;		wreg, status,2, cstack
  3471 ;; Tracked objects:
  3472 ;;		On entry : 0/0
  3473 ;;		On exit  : 0/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3476 ;;      Params:         2       0       0       0       0       0       0
  3477 ;;      Locals:         2       0       0       0       0       0       0
  3478 ;;      Temps:          0       0       0       0       0       0       0
  3479 ;;      Totals:         4       0       0       0       0       0       0
  3480 ;;Total ram usage:        4 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; Hardware stack levels required when called:    1
  3483 ;; This function calls:
  3484 ;;		_PGC_high
  3485 ;;		_PGC_low
  3486 ;;		_readPGD
  3487 ;; This function is called by:
  3488 ;;		_readBits
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text15
  3493  006CAA                     __ptext15:
  3494                           	opt stack 0
  3495  006CAA                     _readBit:
  3496                           	opt stack 23
  3497                           
  3498                           ;ICSP.c: 45: uint16 data;
  3499                           ;ICSP.c: 46: PGC_high();
  3500                           
  3501                           ;incstack = 0
  3502  006CAA  ECFC  F035         	call	_PGC_high	;wreg free
  3503                           
  3504                           ;ICSP.c: 47: data = readPGD();
  3505  006CAE  EC2A  F036         	call	_readPGD	;wreg free
  3506  006CB2  C001  F006         	movff	?_readPGD,readBit@data
  3507  006CB6  C002  F007         	movff	?_readPGD+1,readBit@data+1
  3508                           
  3509                           ;ICSP.c: 48: PGC_low();
  3510  006CBA  ECFE  F035         	call	_PGC_low	;wreg free
  3511                           
  3512                           ;ICSP.c: 49: return data;
  3513  006CBE  C006  F004         	movff	readBit@data,?_readBit
  3514  006CC2  C007  F005         	movff	readBit@data+1,?_readBit+1
  3515  006CC6  0012               	return	
  3516  006CC8                     __end_of_readBit:
  3517                           	opt stack 0
  3518                           prodl	equ	0xFF3
  3519                           postinc0	equ	0xFEE
  3520                           wreg	equ	0xFE8
  3521                           postinc1	equ	0xFE6
  3522                           postdec1	equ	0xFE5
  3523                           fsr1h	equ	0xFE2
  3524                           fsr1l	equ	0xFE1
  3525                           postinc2	equ	0xFDE
  3526                           postdec2	equ	0xFDD
  3527                           fsr2h	equ	0xFDA
  3528                           fsr2l	equ	0xFD9
  3529                           status	equ	0xFD8
  3530                           
  3531 ;; *************** function _readPGD *****************
  3532 ;; Defined at:
  3533 ;;		line 6 in file "../src/PIC18/FlashProg.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;		None
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;		None
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  2    0[COMRAM] unsigned int 
  3540 ;; Registers used:
  3541 ;;		wreg, status,2
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3547 ;;      Params:         2       0       0       0       0       0       0
  3548 ;;      Locals:         0       0       0       0       0       0       0
  3549 ;;      Temps:          1       0       0       0       0       0       0
  3550 ;;      Totals:         3       0       0       0       0       0       0
  3551 ;;Total ram usage:        3 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; This function calls:
  3554 ;;		Nothing
  3555 ;; This function is called by:
  3556 ;;		_readBit
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text16
  3561  006C54                     __ptext16:
  3562                           	opt stack 0
  3563  006C54                     _readPGD:
  3564                           	opt stack 23
  3565                           
  3566                           ;FlashProg.c: 7: return PORTDbits.RD4;
  3567                           
  3568                           ;incstack = 0
  3569  006C54  A883               	btfss	3971,4,c	;volatile
  3570  006C56  D003               	goto	u630
  3571  006C58  6A03               	clrf	??_readPGD& (0+255),c
  3572  006C5A  2A03               	incf	??_readPGD& (0+255),f,c
  3573  006C5C  D001               	goto	u638
  3574  006C5E                     u630:
  3575  006C5E  6A03               	clrf	??_readPGD& (0+255),c
  3576  006C60                     u638:
  3577  006C60  5003               	movf	??_readPGD,w,c
  3578  006C62  6E01               	movwf	?_readPGD,c
  3579  006C64  6A02               	clrf	?_readPGD+1,c
  3580  006C66  0012               	return	
  3581  006C68                     __end_of_readPGD:
  3582                           	opt stack 0
  3583                           prodl	equ	0xFF3
  3584                           postinc0	equ	0xFEE
  3585                           wreg	equ	0xFE8
  3586                           postinc1	equ	0xFE6
  3587                           postdec1	equ	0xFE5
  3588                           fsr1h	equ	0xFE2
  3589                           fsr1l	equ	0xFE1
  3590                           postinc2	equ	0xFDE
  3591                           postdec2	equ	0xFDD
  3592                           fsr2h	equ	0xFDA
  3593                           fsr2l	equ	0xFD9
  3594                           status	equ	0xFD8
  3595                           
  3596 ;; *************** function _exit_HVP *****************
  3597 ;; Defined at:
  3598 ;;		line 57 in file "../src/PIC18/FlashProg.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;		None
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;		None
  3603 ;; Return value:  Size  Location     Type
  3604 ;;		None               void
  3605 ;; Registers used:
  3606 ;;		wreg, status,2, cstack
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3612 ;;      Params:         0       0       0       0       0       0       0
  3613 ;;      Locals:         0       0       0       0       0       0       0
  3614 ;;      Temps:          0       0       0       0       0       0       0
  3615 ;;      Totals:         0       0       0       0       0       0       0
  3616 ;;Total ram usage:        0 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    2
  3619 ;; This function calls:
  3620 ;;		_MCLR_low
  3621 ;;		_PGC_low
  3622 ;;		_PGD_low
  3623 ;;		_PGM_low
  3624 ;; This function is called by:
  3625 ;;		_main
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text17
  3630  006C42                     __ptext17:
  3631                           	opt stack 0
  3632  006C42                     _exit_HVP:
  3633                           	opt stack 27
  3634                           
  3635                           ;FlashProg.c: 58: PGC_low();
  3636                           
  3637                           ;incstack = 0
  3638  006C42  ECFE  F035         	call	_PGC_low	;wreg free
  3639                           
  3640                           ;FlashProg.c: 59: PGD_low();
  3641  006C46  EC11  F036         	call	_PGD_low	;wreg free
  3642                           
  3643                           ;FlashProg.c: 60: PGM_low();
  3644  006C4A  EC04  F036         	call	_PGM_low	;wreg free
  3645                           
  3646                           ;FlashProg.c: 61: MCLR_low();
  3647  006C4E  EC18  F036         	call	_MCLR_low	;wreg free
  3648  006C52  0012               	return	
  3649  006C54                     __end_of_exit_HVP:
  3650                           	opt stack 0
  3651                           prodl	equ	0xFF3
  3652                           postinc0	equ	0xFEE
  3653                           wreg	equ	0xFE8
  3654                           postinc1	equ	0xFE6
  3655                           postdec1	equ	0xFE5
  3656                           fsr1h	equ	0xFE2
  3657                           fsr1l	equ	0xFE1
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           fsr2h	equ	0xFDA
  3661                           fsr2l	equ	0xFD9
  3662                           status	equ	0xFD8
  3663                           
  3664 ;; *************** function _PGM_low *****************
  3665 ;; Defined at:
  3666 ;;		line 30 in file "../src/PIC18/FlashProg.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;		None
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;		None
  3671 ;; Return value:  Size  Location     Type
  3672 ;;		None               void
  3673 ;; Registers used:
  3674 ;;		None
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3680 ;;      Params:         0       0       0       0       0       0       0
  3681 ;;      Locals:         0       0       0       0       0       0       0
  3682 ;;      Temps:          0       0       0       0       0       0       0
  3683 ;;      Totals:         0       0       0       0       0       0       0
  3684 ;;Total ram usage:        0 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; This function calls:
  3687 ;;		Nothing
  3688 ;; This function is called by:
  3689 ;;		_exit_HVP
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693                           	psect	text18
  3694  006C08                     __ptext18:
  3695                           	opt stack 0
  3696  006C08                     _PGM_low:
  3697                           	opt stack 28
  3698                           
  3699                           ;FlashProg.c: 31: PORTDbits.RD6 = 0;
  3700                           
  3701                           ;incstack = 0
  3702  006C08  9C83               	bcf	3971,6,c	;volatile
  3703  006C0A  0012               	return	
  3704  006C0C                     __end_of_PGM_low:
  3705                           	opt stack 0
  3706                           prodl	equ	0xFF3
  3707                           postinc0	equ	0xFEE
  3708                           wreg	equ	0xFE8
  3709                           postinc1	equ	0xFE6
  3710                           postdec1	equ	0xFE5
  3711                           fsr1h	equ	0xFE2
  3712                           fsr1l	equ	0xFE1
  3713                           postinc2	equ	0xFDE
  3714                           postdec2	equ	0xFDD
  3715                           fsr2h	equ	0xFDA
  3716                           fsr2l	equ	0xFD9
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function _enter_HVP *****************
  3720 ;; Defined at:
  3721 ;;		line 49 in file "../src/PIC18/FlashProg.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;		None
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;		None
  3726 ;; Return value:  Size  Location     Type
  3727 ;;		None               void
  3728 ;; Registers used:
  3729 ;;		wreg, status,2, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3735 ;;      Params:         0       0       0       0       0       0       0
  3736 ;;      Locals:         0       0       0       0       0       0       0
  3737 ;;      Temps:          0       0       0       0       0       0       0
  3738 ;;      Totals:         0       0       0       0       0       0       0
  3739 ;;Total ram usage:        0 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    2
  3742 ;; This function calls:
  3743 ;;		_MCLR_high
  3744 ;;		_MCLR_low
  3745 ;;		_PGC_low
  3746 ;;		_PGD_low
  3747 ;;		_PGM_high
  3748 ;; This function is called by:
  3749 ;;		_main
  3750 ;; This function uses a non-reentrant model
  3751 ;;
  3752                           
  3753                           	psect	text19
  3754  006C7E                     __ptext19:
  3755                           	opt stack 0
  3756  006C7E                     _enter_HVP:
  3757                           	opt stack 27
  3758                           
  3759                           ;FlashProg.c: 50: MCLR_low();
  3760                           
  3761                           ;incstack = 0
  3762  006C7E  EC18  F036         	call	_MCLR_low	;wreg free
  3763                           
  3764                           ;FlashProg.c: 51: PGC_low();
  3765  006C82  ECFE  F035         	call	_PGC_low	;wreg free
  3766                           
  3767                           ;FlashProg.c: 52: PGD_low();
  3768  006C86  EC11  F036         	call	_PGD_low	;wreg free
  3769                           
  3770                           ;FlashProg.c: 53: PGM_high();
  3771  006C8A  EC02  F036         	call	_PGM_high	;wreg free
  3772                           
  3773                           ;FlashProg.c: 54: MCLR_high();
  3774  006C8E  EC00  F036         	call	_MCLR_high	;wreg free
  3775  006C92  0012               	return	
  3776  006C94                     __end_of_enter_HVP:
  3777                           	opt stack 0
  3778                           prodl	equ	0xFF3
  3779                           postinc0	equ	0xFEE
  3780                           wreg	equ	0xFE8
  3781                           postinc1	equ	0xFE6
  3782                           postdec1	equ	0xFE5
  3783                           fsr1h	equ	0xFE2
  3784                           fsr1l	equ	0xFE1
  3785                           postinc2	equ	0xFDE
  3786                           postdec2	equ	0xFDD
  3787                           fsr2h	equ	0xFDA
  3788                           fsr2l	equ	0xFD9
  3789                           status	equ	0xFD8
  3790                           
  3791 ;; *************** function _PGM_high *****************
  3792 ;; Defined at:
  3793 ;;		line 34 in file "../src/PIC18/FlashProg.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;		None
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;		None
  3798 ;; Return value:  Size  Location     Type
  3799 ;;		None               void
  3800 ;; Registers used:
  3801 ;;		None
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3807 ;;      Params:         0       0       0       0       0       0       0
  3808 ;;      Locals:         0       0       0       0       0       0       0
  3809 ;;      Temps:          0       0       0       0       0       0       0
  3810 ;;      Totals:         0       0       0       0       0       0       0
  3811 ;;Total ram usage:        0 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; This function calls:
  3814 ;;		Nothing
  3815 ;; This function is called by:
  3816 ;;		_enter_HVP
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           	psect	text20
  3821  006C04                     __ptext20:
  3822                           	opt stack 0
  3823  006C04                     _PGM_high:
  3824                           	opt stack 28
  3825                           
  3826                           ;FlashProg.c: 35: PORTDbits.RD6 = 1;
  3827                           
  3828                           ;incstack = 0
  3829  006C04  8C83               	bsf	3971,6,c	;volatile
  3830  006C06  0012               	return	
  3831  006C08                     __end_of_PGM_high:
  3832                           	opt stack 0
  3833                           prodl	equ	0xFF3
  3834                           postinc0	equ	0xFEE
  3835                           wreg	equ	0xFE8
  3836                           postinc1	equ	0xFE6
  3837                           postdec1	equ	0xFE5
  3838                           fsr1h	equ	0xFE2
  3839                           fsr1l	equ	0xFE1
  3840                           postinc2	equ	0xFDE
  3841                           postdec2	equ	0xFDD
  3842                           fsr2h	equ	0xFDA
  3843                           fsr2l	equ	0xFD9
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function _PGD_low *****************
  3847 ;; Defined at:
  3848 ;;		line 18 in file "../src/PIC18/FlashProg.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;		None
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;		None
  3853 ;; Return value:  Size  Location     Type
  3854 ;;		None               void
  3855 ;; Registers used:
  3856 ;;		wreg, status,2, cstack
  3857 ;; Tracked objects:
  3858 ;;		On entry : 0/0
  3859 ;;		On exit  : 0/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3862 ;;      Params:         0       0       0       0       0       0       0
  3863 ;;      Locals:         0       0       0       0       0       0       0
  3864 ;;      Temps:          0       0       0       0       0       0       0
  3865 ;;      Totals:         0       0       0       0       0       0       0
  3866 ;;Total ram usage:        0 bytes
  3867 ;; Hardware stack levels used:    1
  3868 ;; Hardware stack levels required when called:    1
  3869 ;; This function calls:
  3870 ;;		_writePGD
  3871 ;; This function is called by:
  3872 ;;		_enter_HVP
  3873 ;;		_exit_HVP
  3874 ;;		_flashWriteAndProgram
  3875 ;;		_rowErase
  3876 ;;		_flashWrite8Bits
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text21
  3881  006C22                     __ptext21:
  3882                           	opt stack 0
  3883  006C22                     _PGD_low:
  3884                           	opt stack 26
  3885                           
  3886                           ;FlashProg.c: 19: writePGD(0);
  3887                           
  3888                           ;incstack = 0
  3889  006C22  0E00               	movlw	0
  3890  006C24  6E02               	movwf	writePGD@data+1,c
  3891  006C26  0E00               	movlw	0
  3892  006C28  6E01               	movwf	writePGD@data,c
  3893  006C2A  EC0B  F036         	call	_writePGD	;wreg free
  3894  006C2E  0012               	return	
  3895  006C30                     __end_of_PGD_low:
  3896                           	opt stack 0
  3897                           prodl	equ	0xFF3
  3898                           postinc0	equ	0xFEE
  3899                           wreg	equ	0xFE8
  3900                           postinc1	equ	0xFE6
  3901                           postdec1	equ	0xFE5
  3902                           fsr1h	equ	0xFE2
  3903                           fsr1l	equ	0xFE1
  3904                           postinc2	equ	0xFDE
  3905                           postdec2	equ	0xFDD
  3906                           fsr2h	equ	0xFDA
  3907                           fsr2l	equ	0xFD9
  3908                           status	equ	0xFD8
  3909                           
  3910 ;; *************** function _MCLR_low *****************
  3911 ;; Defined at:
  3912 ;;		line 38 in file "../src/PIC18/FlashProg.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;		None
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;		None
  3917 ;; Return value:  Size  Location     Type
  3918 ;;		None               void
  3919 ;; Registers used:
  3920 ;;		wreg, status,2, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3926 ;;      Params:         0       0       0       0       0       0       0
  3927 ;;      Locals:         0       0       0       0       0       0       0
  3928 ;;      Temps:          0       0       0       0       0       0       0
  3929 ;;      Totals:         0       0       0       0       0       0       0
  3930 ;;Total ram usage:        0 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    1
  3933 ;; This function calls:
  3934 ;;		_writePGD
  3935 ;; This function is called by:
  3936 ;;		_enter_HVP
  3937 ;;		_exit_HVP
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text22
  3942  006C30                     __ptext22:
  3943                           	opt stack 0
  3944  006C30                     _MCLR_low:
  3945                           	opt stack 27
  3946                           
  3947                           ;FlashProg.c: 39: PORTDbits.RD7 = 0;
  3948                           
  3949                           ;incstack = 0
  3950  006C30  9E83               	bcf	3971,7,c	;volatile
  3951                           
  3952                           ;FlashProg.c: 41: writePGD(0);
  3953  006C32  0E00               	movlw	0
  3954  006C34  6E02               	movwf	writePGD@data+1,c
  3955  006C36  0E00               	movlw	0
  3956  006C38  6E01               	movwf	writePGD@data,c
  3957  006C3A  EC0B  F036         	call	_writePGD	;wreg free
  3958                           
  3959                           ;FlashProg.c: 42: PORTDbits.RD5 = 0;
  3960  006C3E  9A83               	bcf	3971,5,c	;volatile
  3961  006C40  0012               	return	
  3962  006C42                     __end_of_MCLR_low:
  3963                           	opt stack 0
  3964                           prodl	equ	0xFF3
  3965                           postinc0	equ	0xFEE
  3966                           wreg	equ	0xFE8
  3967                           postinc1	equ	0xFE6
  3968                           postdec1	equ	0xFE5
  3969                           fsr1h	equ	0xFE2
  3970                           fsr1l	equ	0xFE1
  3971                           postinc2	equ	0xFDE
  3972                           postdec2	equ	0xFDD
  3973                           fsr2h	equ	0xFDA
  3974                           fsr2l	equ	0xFD9
  3975                           status	equ	0xFD8
  3976                           
  3977 ;; *************** function _MCLR_high *****************
  3978 ;; Defined at:
  3979 ;;		line 45 in file "../src/PIC18/FlashProg.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;		None
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;		None               void
  3986 ;; Registers used:
  3987 ;;		None
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3993 ;;      Params:         0       0       0       0       0       0       0
  3994 ;;      Locals:         0       0       0       0       0       0       0
  3995 ;;      Temps:          0       0       0       0       0       0       0
  3996 ;;      Totals:         0       0       0       0       0       0       0
  3997 ;;Total ram usage:        0 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; This function calls:
  4000 ;;		Nothing
  4001 ;; This function is called by:
  4002 ;;		_enter_HVP
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text23
  4007  006C00                     __ptext23:
  4008                           	opt stack 0
  4009  006C00                     _MCLR_high:
  4010                           	opt stack 28
  4011                           
  4012                           ;FlashProg.c: 46: PORTDbits.RD7 = 1;
  4013                           
  4014                           ;incstack = 0
  4015  006C00  8E83               	bsf	3971,7,c	;volatile
  4016  006C02  0012               	return	
  4017  006C04                     __end_of_MCLR_high:
  4018                           	opt stack 0
  4019                           prodl	equ	0xFF3
  4020                           postinc0	equ	0xFEE
  4021                           wreg	equ	0xFE8
  4022                           postinc1	equ	0xFE6
  4023                           postdec1	equ	0xFE5
  4024                           fsr1h	equ	0xFE2
  4025                           fsr1l	equ	0xFE1
  4026                           postinc2	equ	0xFDE
  4027                           postdec2	equ	0xFDD
  4028                           fsr2h	equ	0xFDA
  4029                           fsr2l	equ	0xFD9
  4030                           status	equ	0xFD8
  4031                           
  4032 ;; *************** function _enableWrite *****************
  4033 ;; Defined at:
  4034 ;;		line 112 in file "../src/PIC18/FlashProg.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;		None
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;		None
  4039 ;; Return value:  Size  Location     Type
  4040 ;;		None               void
  4041 ;; Registers used:
  4042 ;;		wreg, status,2, status,0, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4048 ;;      Params:         0       0       0       0       0       0       0
  4049 ;;      Locals:         0       0       0       0       0       0       0
  4050 ;;      Temps:          0       0       0       0       0       0       0
  4051 ;;      Totals:         0       0       0       0       0       0       0
  4052 ;;Total ram usage:        0 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    4
  4055 ;; This function calls:
  4056 ;;		_writeICSP
  4057 ;; This function is called by:
  4058 ;;		_main
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text24
  4063  006D10                     __ptext24:
  4064                           	opt stack 0
  4065  006D10                     _enableWrite:
  4066                           	opt stack 25
  4067                           
  4068                           ;FlashProg.c: 113: writeICSP(0x0, 0x8ea6);
  4069                           
  4070                           ;incstack = 0
  4071  006D10  0E00               	movlw	0
  4072  006D12  6E0F               	movwf	writeICSP@commandByte+1,c
  4073  006D14  0E00               	movlw	0
  4074  006D16  6E0E               	movwf	writeICSP@commandByte,c
  4075  006D18  0E8E               	movlw	142
  4076  006D1A  6E11               	movwf	writeICSP@dataBytes+1,c
  4077  006D1C  0EA6               	movlw	166
  4078  006D1E  6E10               	movwf	writeICSP@dataBytes,c
  4079  006D20  EC73  F036         	call	_writeICSP	;wreg free
  4080                           
  4081                           ;FlashProg.c: 114: writeICSP(0x0, 0x9ca6);
  4082  006D24  0E00               	movlw	0
  4083  006D26  6E0F               	movwf	writeICSP@commandByte+1,c
  4084  006D28  0E00               	movlw	0
  4085  006D2A  6E0E               	movwf	writeICSP@commandByte,c
  4086  006D2C  0E9C               	movlw	156
  4087  006D2E  6E11               	movwf	writeICSP@dataBytes+1,c
  4088  006D30  0EA6               	movlw	166
  4089  006D32  6E10               	movwf	writeICSP@dataBytes,c
  4090  006D34  EC73  F036         	call	_writeICSP	;wreg free
  4091  006D38  0012               	return	
  4092  006D3A                     __end_of_enableWrite:
  4093                           	opt stack 0
  4094                           prodl	equ	0xFF3
  4095                           postinc0	equ	0xFEE
  4096                           wreg	equ	0xFE8
  4097                           postinc1	equ	0xFE6
  4098                           postdec1	equ	0xFE5
  4099                           fsr1h	equ	0xFE2
  4100                           fsr1l	equ	0xFE1
  4101                           postinc2	equ	0xFDE
  4102                           postdec2	equ	0xFDD
  4103                           fsr2h	equ	0xFDA
  4104                           fsr2l	equ	0xFD9
  4105                           status	equ	0xFD8
  4106                           
  4107 ;; *************** function _bulkErase *****************
  4108 ;; Defined at:
  4109 ;;		line 65 in file "../src/PIC18/FlashProg.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;		None
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  i               2   17[COMRAM] int 
  4114 ;; Return value:  Size  Location     Type
  4115 ;;		None               void
  4116 ;; Registers used:
  4117 ;;		wreg, status,2, status,0, cstack
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4123 ;;      Params:         0       0       0       0       0       0       0
  4124 ;;      Locals:         2       0       0       0       0       0       0
  4125 ;;      Temps:          0       0       0       0       0       0       0
  4126 ;;      Totals:         2       0       0       0       0       0       0
  4127 ;;Total ram usage:        2 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    4
  4130 ;; This function calls:
  4131 ;;		_writeBits
  4132 ;;		_writeICSP
  4133 ;; This function is called by:
  4134 ;;		_main
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           	psect	text25
  4139  00746C                     __ptext25:
  4140                           	opt stack 0
  4141  00746C                     _bulkErase:
  4142                           	opt stack 25
  4143                           
  4144                           ;FlashProg.c: 66: int i = 0;
  4145                           
  4146                           ;incstack = 0
  4147  00746C  0E00               	movlw	0
  4148  00746E  6E13               	movwf	bulkErase@i+1,c
  4149  007470  0E00               	movlw	0
  4150  007472  6E12               	movwf	bulkErase@i,c
  4151                           
  4152                           ;FlashProg.c: 67: writeICSP(0x0, 0x0e3c);
  4153  007474  0E00               	movlw	0
  4154  007476  6E0F               	movwf	writeICSP@commandByte+1,c
  4155  007478  0E00               	movlw	0
  4156  00747A  6E0E               	movwf	writeICSP@commandByte,c
  4157  00747C  0E0E               	movlw	14
  4158  00747E  6E11               	movwf	writeICSP@dataBytes+1,c
  4159  007480  0E3C               	movlw	60
  4160  007482  6E10               	movwf	writeICSP@dataBytes,c
  4161  007484  EC73  F036         	call	_writeICSP	;wreg free
  4162                           
  4163                           ;FlashProg.c: 68: writeICSP(0x0, 0x6ef8);
  4164  007488  0E00               	movlw	0
  4165  00748A  6E0F               	movwf	writeICSP@commandByte+1,c
  4166  00748C  0E00               	movlw	0
  4167  00748E  6E0E               	movwf	writeICSP@commandByte,c
  4168  007490  0E6E               	movlw	110
  4169  007492  6E11               	movwf	writeICSP@dataBytes+1,c
  4170  007494  0EF8               	movlw	248
  4171  007496  6E10               	movwf	writeICSP@dataBytes,c
  4172  007498  EC73  F036         	call	_writeICSP	;wreg free
  4173                           
  4174                           ;FlashProg.c: 69: writeICSP(0x0, 0x0e00);
  4175  00749C  0E00               	movlw	0
  4176  00749E  6E0F               	movwf	writeICSP@commandByte+1,c
  4177  0074A0  0E00               	movlw	0
  4178  0074A2  6E0E               	movwf	writeICSP@commandByte,c
  4179  0074A4  0E0E               	movlw	14
  4180  0074A6  6E11               	movwf	writeICSP@dataBytes+1,c
  4181  0074A8  0E00               	movlw	0
  4182  0074AA  6E10               	movwf	writeICSP@dataBytes,c
  4183  0074AC  EC73  F036         	call	_writeICSP	;wreg free
  4184                           
  4185                           ;FlashProg.c: 70: writeICSP(0x0, 0x6ef7);
  4186  0074B0  0E00               	movlw	0
  4187  0074B2  6E0F               	movwf	writeICSP@commandByte+1,c
  4188  0074B4  0E00               	movlw	0
  4189  0074B6  6E0E               	movwf	writeICSP@commandByte,c
  4190  0074B8  0E6E               	movlw	110
  4191  0074BA  6E11               	movwf	writeICSP@dataBytes+1,c
  4192  0074BC  0EF7               	movlw	247
  4193  0074BE  6E10               	movwf	writeICSP@dataBytes,c
  4194  0074C0  EC73  F036         	call	_writeICSP	;wreg free
  4195                           
  4196                           ;FlashProg.c: 71: writeICSP(0x0, 0x0e05);
  4197  0074C4  0E00               	movlw	0
  4198  0074C6  6E0F               	movwf	writeICSP@commandByte+1,c
  4199  0074C8  0E00               	movlw	0
  4200  0074CA  6E0E               	movwf	writeICSP@commandByte,c
  4201  0074CC  0E0E               	movlw	14
  4202  0074CE  6E11               	movwf	writeICSP@dataBytes+1,c
  4203  0074D0  0E05               	movlw	5
  4204  0074D2  6E10               	movwf	writeICSP@dataBytes,c
  4205  0074D4  EC73  F036         	call	_writeICSP	;wreg free
  4206                           
  4207                           ;FlashProg.c: 72: writeICSP(0x0, 0x6ef6);
  4208  0074D8  0E00               	movlw	0
  4209  0074DA  6E0F               	movwf	writeICSP@commandByte+1,c
  4210  0074DC  0E00               	movlw	0
  4211  0074DE  6E0E               	movwf	writeICSP@commandByte,c
  4212  0074E0  0E6E               	movlw	110
  4213  0074E2  6E11               	movwf	writeICSP@dataBytes+1,c
  4214  0074E4  0EF6               	movlw	246
  4215  0074E6  6E10               	movwf	writeICSP@dataBytes,c
  4216  0074E8  EC73  F036         	call	_writeICSP	;wreg free
  4217                           
  4218                           ;FlashProg.c: 73: writeICSP(0xc, 0x3f3f);
  4219  0074EC  0E00               	movlw	0
  4220  0074EE  6E0F               	movwf	writeICSP@commandByte+1,c
  4221  0074F0  0E0C               	movlw	12
  4222  0074F2  6E0E               	movwf	writeICSP@commandByte,c
  4223  0074F4  0E3F               	movlw	63
  4224  0074F6  6E11               	movwf	writeICSP@dataBytes+1,c
  4225  0074F8  0E3F               	movlw	63
  4226  0074FA  6E10               	movwf	writeICSP@dataBytes,c
  4227  0074FC  EC73  F036         	call	_writeICSP	;wreg free
  4228                           
  4229                           ;FlashProg.c: 74: writeICSP(0x0, 0x0e3c);
  4230  007500  0E00               	movlw	0
  4231  007502  6E0F               	movwf	writeICSP@commandByte+1,c
  4232  007504  0E00               	movlw	0
  4233  007506  6E0E               	movwf	writeICSP@commandByte,c
  4234  007508  0E0E               	movlw	14
  4235  00750A  6E11               	movwf	writeICSP@dataBytes+1,c
  4236  00750C  0E3C               	movlw	60
  4237  00750E  6E10               	movwf	writeICSP@dataBytes,c
  4238  007510  EC73  F036         	call	_writeICSP	;wreg free
  4239                           
  4240                           ;FlashProg.c: 75: writeICSP(0x0, 0x6ef8);
  4241  007514  0E00               	movlw	0
  4242  007516  6E0F               	movwf	writeICSP@commandByte+1,c
  4243  007518  0E00               	movlw	0
  4244  00751A  6E0E               	movwf	writeICSP@commandByte,c
  4245  00751C  0E6E               	movlw	110
  4246  00751E  6E11               	movwf	writeICSP@dataBytes+1,c
  4247  007520  0EF8               	movlw	248
  4248  007522  6E10               	movwf	writeICSP@dataBytes,c
  4249  007524  EC73  F036         	call	_writeICSP	;wreg free
  4250                           
  4251                           ;FlashProg.c: 76: writeICSP(0x0, 0x0e00);
  4252  007528  0E00               	movlw	0
  4253  00752A  6E0F               	movwf	writeICSP@commandByte+1,c
  4254  00752C  0E00               	movlw	0
  4255  00752E  6E0E               	movwf	writeICSP@commandByte,c
  4256  007530  0E0E               	movlw	14
  4257  007532  6E11               	movwf	writeICSP@dataBytes+1,c
  4258  007534  0E00               	movlw	0
  4259  007536  6E10               	movwf	writeICSP@dataBytes,c
  4260  007538  EC73  F036         	call	_writeICSP	;wreg free
  4261                           
  4262                           ;FlashProg.c: 77: writeICSP(0x0, 0x6ef7);
  4263  00753C  0E00               	movlw	0
  4264  00753E  6E0F               	movwf	writeICSP@commandByte+1,c
  4265  007540  0E00               	movlw	0
  4266  007542  6E0E               	movwf	writeICSP@commandByte,c
  4267  007544  0E6E               	movlw	110
  4268  007546  6E11               	movwf	writeICSP@dataBytes+1,c
  4269  007548  0EF7               	movlw	247
  4270  00754A  6E10               	movwf	writeICSP@dataBytes,c
  4271  00754C  EC73  F036         	call	_writeICSP	;wreg free
  4272                           
  4273                           ;FlashProg.c: 78: writeICSP(0x0, 0x0e04);
  4274  007550  0E00               	movlw	0
  4275  007552  6E0F               	movwf	writeICSP@commandByte+1,c
  4276  007554  0E00               	movlw	0
  4277  007556  6E0E               	movwf	writeICSP@commandByte,c
  4278  007558  0E0E               	movlw	14
  4279  00755A  6E11               	movwf	writeICSP@dataBytes+1,c
  4280  00755C  0E04               	movlw	4
  4281  00755E  6E10               	movwf	writeICSP@dataBytes,c
  4282  007560  EC73  F036         	call	_writeICSP	;wreg free
  4283                           
  4284                           ;FlashProg.c: 79: writeICSP(0x0, 0x6ef6);
  4285  007564  0E00               	movlw	0
  4286  007566  6E0F               	movwf	writeICSP@commandByte+1,c
  4287  007568  0E00               	movlw	0
  4288  00756A  6E0E               	movwf	writeICSP@commandByte,c
  4289  00756C  0E6E               	movlw	110
  4290  00756E  6E11               	movwf	writeICSP@dataBytes+1,c
  4291  007570  0EF6               	movlw	246
  4292  007572  6E10               	movwf	writeICSP@dataBytes,c
  4293  007574  EC73  F036         	call	_writeICSP	;wreg free
  4294                           
  4295                           ;FlashProg.c: 80: writeICSP(0xc, 0x8f8f);
  4296  007578  0E00               	movlw	0
  4297  00757A  6E0F               	movwf	writeICSP@commandByte+1,c
  4298  00757C  0E0C               	movlw	12
  4299  00757E  6E0E               	movwf	writeICSP@commandByte,c
  4300  007580  0E8F               	movlw	143
  4301  007582  6E11               	movwf	writeICSP@dataBytes+1,c
  4302  007584  0E8F               	movlw	143
  4303  007586  6E10               	movwf	writeICSP@dataBytes,c
  4304  007588  EC73  F036         	call	_writeICSP	;wreg free
  4305                           
  4306                           ;FlashProg.c: 81: writeICSP(0x0, 0);
  4307  00758C  0E00               	movlw	0
  4308  00758E  6E0F               	movwf	writeICSP@commandByte+1,c
  4309  007590  0E00               	movlw	0
  4310  007592  6E0E               	movwf	writeICSP@commandByte,c
  4311  007594  0E00               	movlw	0
  4312  007596  6E11               	movwf	writeICSP@dataBytes+1,c
  4313  007598  0E00               	movlw	0
  4314  00759A  6E10               	movwf	writeICSP@dataBytes,c
  4315  00759C  EC73  F036         	call	_writeICSP	;wreg free
  4316                           
  4317                           ;FlashProg.c: 82: writeBits(0, 4);
  4318  0075A0  0E00               	movlw	0
  4319  0075A2  6E06               	movwf	writeBits@pattern+1,c
  4320  0075A4  0E00               	movlw	0
  4321  0075A6  6E05               	movwf	writeBits@pattern,c
  4322  0075A8  0E00               	movlw	0
  4323  0075AA  6E08               	movwf	writeBits@bitsToWrite+1,c
  4324  0075AC  0E04               	movlw	4
  4325  0075AE  6E07               	movwf	writeBits@bitsToWrite,c
  4326  0075B0  ECB4  F036         	call	_writeBits	;wreg free
  4327                           
  4328                           ;FlashProg.c: 83: for(i = 0; i < 200 ; i++){}
  4329  0075B4  0E00               	movlw	0
  4330  0075B6  6E13               	movwf	bulkErase@i+1,c
  4331  0075B8  0E00               	movlw	0
  4332  0075BA  6E12               	movwf	bulkErase@i,c
  4333  0075BC  5013               	movf	bulkErase@i+1,w,c
  4334  0075BE  0A80               	xorlw	128
  4335  0075C0  0F80               	addlw	-128
  4336  0075C2  0EC8               	movlw	200
  4337  0075C4  B4D8               	btfsc	status,2,c
  4338  0075C6  5C12               	subwf	bulkErase@i,w,c
  4339  0075C8  B0D8               	btfsc	status,0,c
  4340  0075CA  D003               	goto	l1678
  4341  0075CC  4A12               	infsnz	bulkErase@i,f,c
  4342  0075CE  2A13               	incf	bulkErase@i+1,f,c
  4343  0075D0  D7F5               	goto	L16
  4344  0075D2                     l1678:
  4345                           
  4346                           ;FlashProg.c: 84: writeBits(0, 16);
  4347  0075D2  0E00               	movlw	0
  4348  0075D4  6E06               	movwf	writeBits@pattern+1,c
  4349  0075D6  0E00               	movlw	0
  4350  0075D8  6E05               	movwf	writeBits@pattern,c
  4351  0075DA  0E00               	movlw	0
  4352  0075DC  6E08               	movwf	writeBits@bitsToWrite+1,c
  4353  0075DE  0E10               	movlw	16
  4354  0075E0  6E07               	movwf	writeBits@bitsToWrite,c
  4355  0075E2  ECB4  F036         	call	_writeBits	;wreg free
  4356  0075E6  0012               	return	
  4357  0075E8                     __end_of_bulkErase:
  4358                           	opt stack 0
  4359                           prodl	equ	0xFF3
  4360                           postinc0	equ	0xFEE
  4361                           wreg	equ	0xFE8
  4362                           postinc1	equ	0xFE6
  4363                           postdec1	equ	0xFE5
  4364                           fsr1h	equ	0xFE2
  4365                           fsr1l	equ	0xFE1
  4366                           postinc2	equ	0xFDE
  4367                           postdec2	equ	0xFDD
  4368                           fsr2h	equ	0xFDA
  4369                           fsr2l	equ	0xFD9
  4370                           status	equ	0xFD8
  4371                           
  4372 ;; *************** function _writeICSP *****************
  4373 ;; Defined at:
  4374 ;;		line 5 in file "../src/PIC18/ICSP.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;  commandByte     2   13[COMRAM] unsigned int 
  4377 ;;  dataBytes       2   15[COMRAM] unsigned int 
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;		None
  4380 ;; Return value:  Size  Location     Type
  4381 ;;		None               void
  4382 ;; Registers used:
  4383 ;;		wreg, status,2, status,0, cstack
  4384 ;; Tracked objects:
  4385 ;;		On entry : 0/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4389 ;;      Params:         4       0       0       0       0       0       0
  4390 ;;      Locals:         0       0       0       0       0       0       0
  4391 ;;      Temps:          0       0       0       0       0       0       0
  4392 ;;      Totals:         4       0       0       0       0       0       0
  4393 ;;Total ram usage:        4 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    3
  4396 ;; This function calls:
  4397 ;;		_writeBits
  4398 ;; This function is called by:
  4399 ;;		_bulkErase
  4400 ;;		_enableWrite
  4401 ;;		_flashSetAddress
  4402 ;;		_writeToBuffer
  4403 ;;		_flashWriteAndProgram
  4404 ;;		_rowErase
  4405 ;;		_readDeviceID1
  4406 ;;		_readDeviceID2
  4407 ;;		_flashWrite8Bits
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text26
  4412  006CE6                     __ptext26:
  4413                           	opt stack 0
  4414  006CE6                     _writeICSP:
  4415                           	opt stack 24
  4416                           
  4417                           ;ICSP.c: 6: writeBits(commandByte, 4);
  4418                           
  4419                           ;incstack = 0
  4420  006CE6  C00E  F005         	movff	writeICSP@commandByte,writeBits@pattern
  4421  006CEA  C00F  F006         	movff	writeICSP@commandByte+1,writeBits@pattern+1
  4422  006CEE  0E00               	movlw	0
  4423  006CF0  6E08               	movwf	writeBits@bitsToWrite+1,c
  4424  006CF2  0E04               	movlw	4
  4425  006CF4  6E07               	movwf	writeBits@bitsToWrite,c
  4426  006CF6  ECB4  F036         	call	_writeBits	;wreg free
  4427                           
  4428                           ;ICSP.c: 7: writeBits(dataBytes, 16);
  4429  006CFA  C010  F005         	movff	writeICSP@dataBytes,writeBits@pattern
  4430  006CFE  C011  F006         	movff	writeICSP@dataBytes+1,writeBits@pattern+1
  4431  006D02  0E00               	movlw	0
  4432  006D04  6E08               	movwf	writeBits@bitsToWrite+1,c
  4433  006D06  0E10               	movlw	16
  4434  006D08  6E07               	movwf	writeBits@bitsToWrite,c
  4435  006D0A  ECB4  F036         	call	_writeBits	;wreg free
  4436  006D0E  0012               	return	
  4437  006D10                     __end_of_writeICSP:
  4438                           	opt stack 0
  4439                           prodl	equ	0xFF3
  4440                           postinc0	equ	0xFEE
  4441                           wreg	equ	0xFE8
  4442                           postinc1	equ	0xFE6
  4443                           postdec1	equ	0xFE5
  4444                           fsr1h	equ	0xFE2
  4445                           fsr1l	equ	0xFE1
  4446                           postinc2	equ	0xFDE
  4447                           postdec2	equ	0xFDD
  4448                           fsr2h	equ	0xFDA
  4449                           fsr2l	equ	0xFD9
  4450                           status	equ	0xFD8
  4451                           
  4452 ;; *************** function _writeBits *****************
  4453 ;; Defined at:
  4454 ;;		line 16 in file "../src/PIC18/ICSP.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;  pattern         2    4[COMRAM] unsigned int 
  4457 ;;  bitsToWrite     2    6[COMRAM] unsigned int 
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  i               2   11[COMRAM] int 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;		None               void
  4462 ;; Registers used:
  4463 ;;		wreg, status,2, status,0, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4469 ;;      Params:         4       0       0       0       0       0       0
  4470 ;;      Locals:         2       0       0       0       0       0       0
  4471 ;;      Temps:          3       0       0       0       0       0       0
  4472 ;;      Totals:         9       0       0       0       0       0       0
  4473 ;;Total ram usage:        9 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:    2
  4476 ;; This function calls:
  4477 ;;		_writeBit
  4478 ;; This function is called by:
  4479 ;;		_bulkErase
  4480 ;;		_flashWriteAndProgram
  4481 ;;		_rowErase
  4482 ;;		_writeICSP
  4483 ;;		_readICSP
  4484 ;;		_readFirstByte
  4485 ;;		_flashWrite8Bits
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text27
  4490  006D68                     __ptext27:
  4491                           	opt stack 0
  4492  006D68                     _writeBits:
  4493                           	opt stack 24
  4494                           
  4495                           ;ICSP.c: 17: int i=0;
  4496                           
  4497                           ;incstack = 0
  4498  006D68  0E00               	movlw	0
  4499  006D6A  6E0D               	movwf	writeBits@i+1,c
  4500  006D6C  0E00               	movlw	0
  4501  006D6E  6E0C               	movwf	writeBits@i,c
  4502                           
  4503                           ;ICSP.c: 18: (TRISDbits.TRISD4 = 0);
  4504  006D70  9895               	bcf	3989,4,c	;volatile
  4505                           
  4506                           ;ICSP.c: 19: while(i < bitsToWrite){
  4507  006D72  D015               	goto	l1402
  4508  006D74                     l1398:
  4509                           
  4510                           ;ICSP.c: 20: writeBit(((pattern>>i)&0x1));
  4511  006D74  C00C  F009         	movff	writeBits@i,??_writeBits
  4512  006D78  C005  F00A         	movff	writeBits@pattern,??_writeBits+1
  4513  006D7C  C006  F00B         	movff	writeBits@pattern+1,??_writeBits+2
  4514  006D80  2A09               	incf	??_writeBits,f,c
  4515  006D82  D003               	goto	u654
  4516  006D84                     u655:
  4517  006D84  90D8               	bcf	status,0,c
  4518  006D86  320B               	rrcf	??_writeBits+2,f,c
  4519  006D88  320A               	rrcf	??_writeBits+1,f,c
  4520  006D8A                     u654:
  4521  006D8A  2E09               	decfsz	??_writeBits,f,c
  4522  006D8C  D7FB               	goto	u655
  4523  006D8E  0E01               	movlw	1
  4524  006D90  140A               	andwf	??_writeBits+1,w,c
  4525  006D92  6E03               	movwf	writeBit@bitToWrite,c
  4526  006D94  6A04               	clrf	writeBit@bitToWrite+1,c
  4527  006D96  EC34  F036         	call	_writeBit	;wreg free
  4528                           
  4529                           ;ICSP.c: 21: i++;
  4530  006D9A  4A0C               	infsnz	writeBits@i,f,c
  4531  006D9C  2A0D               	incf	writeBits@i+1,f,c
  4532  006D9E                     l1402:
  4533  006D9E  5007               	movf	writeBits@bitsToWrite,w,c
  4534  006DA0  5C0C               	subwf	writeBits@i,w,c
  4535  006DA2  5008               	movf	writeBits@bitsToWrite+1,w,c
  4536  006DA4  580D               	subwfb	writeBits@i+1,w,c
  4537  006DA6  B0D8               	btfsc	status,0,c
  4538  006DA8  0012               	return	
  4539  006DAA  D7E4               	goto	l1398
  4540  006DAC                     __end_of_writeBits:
  4541                           	opt stack 0
  4542                           prodl	equ	0xFF3
  4543                           postinc0	equ	0xFEE
  4544                           wreg	equ	0xFE8
  4545                           postinc1	equ	0xFE6
  4546                           postdec1	equ	0xFE5
  4547                           fsr1h	equ	0xFE2
  4548                           fsr1l	equ	0xFE1
  4549                           postinc2	equ	0xFDE
  4550                           postdec2	equ	0xFDD
  4551                           fsr2h	equ	0xFDA
  4552                           fsr2l	equ	0xFD9
  4553                           status	equ	0xFD8
  4554                           
  4555 ;; *************** function _writeBit *****************
  4556 ;; Defined at:
  4557 ;;		line 10 in file "../src/PIC18/ICSP.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  bitToWrite      2    2[COMRAM] unsigned int 
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;		None
  4562 ;; Return value:  Size  Location     Type
  4563 ;;		None               void
  4564 ;; Registers used:
  4565 ;;		cstack
  4566 ;; Tracked objects:
  4567 ;;		On entry : 0/0
  4568 ;;		On exit  : 0/0
  4569 ;;		Unchanged: 0/0
  4570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4571 ;;      Params:         2       0       0       0       0       0       0
  4572 ;;      Locals:         0       0       0       0       0       0       0
  4573 ;;      Temps:          0       0       0       0       0       0       0
  4574 ;;      Totals:         2       0       0       0       0       0       0
  4575 ;;Total ram usage:        2 bytes
  4576 ;; Hardware stack levels used:    1
  4577 ;; Hardware stack levels required when called:    1
  4578 ;; This function calls:
  4579 ;;		_PGC_high
  4580 ;;		_PGC_low
  4581 ;;		_writePGD
  4582 ;; This function is called by:
  4583 ;;		_writeBits
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text28
  4588  006C68                     __ptext28:
  4589                           	opt stack 0
  4590  006C68                     _writeBit:
  4591                           	opt stack 24
  4592                           
  4593                           ;ICSP.c: 11: PGC_high();
  4594                           
  4595                           ;incstack = 0
  4596  006C68  ECFC  F035         	call	_PGC_high	;wreg free
  4597                           
  4598                           ;ICSP.c: 12: writePGD(bitToWrite);
  4599  006C6C  C003  F001         	movff	writeBit@bitToWrite,writePGD@data
  4600  006C70  C004  F002         	movff	writeBit@bitToWrite+1,writePGD@data+1
  4601  006C74  EC0B  F036         	call	_writePGD	;wreg free
  4602                           
  4603                           ;ICSP.c: 13: PGC_low();
  4604  006C78  ECFE  F035         	call	_PGC_low	;wreg free
  4605  006C7C  0012               	return	
  4606  006C7E                     __end_of_writeBit:
  4607                           	opt stack 0
  4608                           prodl	equ	0xFF3
  4609                           postinc0	equ	0xFEE
  4610                           wreg	equ	0xFE8
  4611                           postinc1	equ	0xFE6
  4612                           postdec1	equ	0xFE5
  4613                           fsr1h	equ	0xFE2
  4614                           fsr1l	equ	0xFE1
  4615                           postinc2	equ	0xFDE
  4616                           postdec2	equ	0xFDD
  4617                           fsr2h	equ	0xFDA
  4618                           fsr2l	equ	0xFD9
  4619                           status	equ	0xFD8
  4620                           
  4621 ;; *************** function _writePGD *****************
  4622 ;; Defined at:
  4623 ;;		line 10 in file "../src/PIC18/FlashProg.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;  data            2    0[COMRAM] int 
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;		None
  4628 ;; Return value:  Size  Location     Type
  4629 ;;		None               void
  4630 ;; Registers used:
  4631 ;;		None
  4632 ;; Tracked objects:
  4633 ;;		On entry : 0/0
  4634 ;;		On exit  : 0/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4637 ;;      Params:         2       0       0       0       0       0       0
  4638 ;;      Locals:         0       0       0       0       0       0       0
  4639 ;;      Temps:          0       0       0       0       0       0       0
  4640 ;;      Totals:         2       0       0       0       0       0       0
  4641 ;;Total ram usage:        2 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; This function calls:
  4644 ;;		Nothing
  4645 ;; This function is called by:
  4646 ;;		_PGD_low
  4647 ;;		_MCLR_low
  4648 ;;		_writeBit
  4649 ;;		_PGD_high
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           	psect	text29
  4654  006C16                     __ptext29:
  4655                           	opt stack 0
  4656  006C16                     _writePGD:
  4657                           	opt stack 24
  4658                           
  4659                           ;FlashProg.c: 11: PORTDbits.RD4 = data;
  4660                           
  4661                           ;incstack = 0
  4662  006C16  B001               	btfsc	writePGD@data,0,c
  4663  006C18  D002               	bra	u645
  4664  006C1A  9883               	bcf	3971,4,c	;volatile
  4665  006C1C  D001               	bra	u646
  4666  006C1E                     u645:
  4667  006C1E  8883               	bsf	3971,4,c	;volatile
  4668  006C20                     u646:
  4669  006C20  0012               	return	
  4670  006C22                     __end_of_writePGD:
  4671                           	opt stack 0
  4672                           prodl	equ	0xFF3
  4673                           postinc0	equ	0xFEE
  4674                           wreg	equ	0xFE8
  4675                           postinc1	equ	0xFE6
  4676                           postdec1	equ	0xFE5
  4677                           fsr1h	equ	0xFE2
  4678                           fsr1l	equ	0xFE1
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function _PGC_low *****************
  4686 ;; Defined at:
  4687 ;;		line 26 in file "../src/PIC18/FlashProg.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;		None
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;		None
  4692 ;; Return value:  Size  Location     Type
  4693 ;;		None               void
  4694 ;; Registers used:
  4695 ;;		None
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4701 ;;      Params:         0       0       0       0       0       0       0
  4702 ;;      Locals:         0       0       0       0       0       0       0
  4703 ;;      Temps:          0       0       0       0       0       0       0
  4704 ;;      Totals:         0       0       0       0       0       0       0
  4705 ;;Total ram usage:        0 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; This function calls:
  4708 ;;		Nothing
  4709 ;; This function is called by:
  4710 ;;		_enter_HVP
  4711 ;;		_exit_HVP
  4712 ;;		_flashWriteAndProgram
  4713 ;;		_rowErase
  4714 ;;		_writeBit
  4715 ;;		_readBit
  4716 ;;		_flashWrite8Bits
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text30
  4721  006BFC                     __ptext30:
  4722                           	opt stack 0
  4723  006BFC                     _PGC_low:
  4724                           	opt stack 24
  4725                           
  4726                           ;FlashProg.c: 27: PORTDbits.RD5 = 0;
  4727                           
  4728                           ;incstack = 0
  4729  006BFC  9A83               	bcf	3971,5,c	;volatile
  4730  006BFE  0012               	return	
  4731  006C00                     __end_of_PGC_low:
  4732                           	opt stack 0
  4733                           prodl	equ	0xFF3
  4734                           postinc0	equ	0xFEE
  4735                           wreg	equ	0xFE8
  4736                           postinc1	equ	0xFE6
  4737                           postdec1	equ	0xFE5
  4738                           fsr1h	equ	0xFE2
  4739                           fsr1l	equ	0xFE1
  4740                           postinc2	equ	0xFDE
  4741                           postdec2	equ	0xFDD
  4742                           fsr2h	equ	0xFDA
  4743                           fsr2l	equ	0xFD9
  4744                           status	equ	0xFD8
  4745                           
  4746 ;; *************** function _PGC_high *****************
  4747 ;; Defined at:
  4748 ;;		line 22 in file "../src/PIC18/FlashProg.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;		None
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;		None
  4753 ;; Return value:  Size  Location     Type
  4754 ;;		None               void
  4755 ;; Registers used:
  4756 ;;		None
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4762 ;;      Params:         0       0       0       0       0       0       0
  4763 ;;      Locals:         0       0       0       0       0       0       0
  4764 ;;      Temps:          0       0       0       0       0       0       0
  4765 ;;      Totals:         0       0       0       0       0       0       0
  4766 ;;Total ram usage:        0 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; This function calls:
  4769 ;;		Nothing
  4770 ;; This function is called by:
  4771 ;;		_flashWriteAndProgram
  4772 ;;		_rowErase
  4773 ;;		_writeBit
  4774 ;;		_readBit
  4775 ;;		_flashWrite8Bits
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           	psect	text31
  4780  006BF8                     __ptext31:
  4781                           	opt stack 0
  4782  006BF8                     _PGC_high:
  4783                           	opt stack 24
  4784                           
  4785                           ;FlashProg.c: 23: PORTDbits.RD5 = 1;
  4786                           
  4787                           ;incstack = 0
  4788  006BF8  8A83               	bsf	3971,5,c	;volatile
  4789  006BFA  0012               	return	
  4790  006BFC                     __end_of_PGC_high:
  4791                           	opt stack 0
  4792  0000                     prodl	equ	0xFF3
  4793                           postinc0	equ	0xFEE
  4794                           wreg	equ	0xFE8
  4795                           postinc1	equ	0xFE6
  4796                           postdec1	equ	0xFE5
  4797                           fsr1h	equ	0xFE2
  4798                           fsr1l	equ	0xFE1
  4799                           postinc2	equ	0xFDE
  4800                           postdec2	equ	0xFDD
  4801                           fsr2h	equ	0xFDA
  4802                           fsr2l	equ	0xFD9
  4803                           status	equ	0xFD8
  4804                           prodl	equ	0xFF3
  4805                           postinc0	equ	0xFEE
  4806                           wreg	equ	0xFE8
  4807                           postinc1	equ	0xFE6
  4808                           postdec1	equ	0xFE5
  4809                           fsr1h	equ	0xFE2
  4810                           fsr1l	equ	0xFE1
  4811                           postinc2	equ	0xFDE
  4812                           postdec2	equ	0xFDD
  4813                           fsr2h	equ	0xFDA
  4814                           fsr2l	equ	0xFD9
  4815                           status	equ	0xFD8
  4816                           
  4817                           	psect	rparam
  4818  0000                     prodl	equ	0xFF3
  4819                           postinc0	equ	0xFEE
  4820                           wreg	equ	0xFE8
  4821                           postinc1	equ	0xFE6
  4822                           postdec1	equ	0xFE5
  4823                           fsr1h	equ	0xFE2
  4824                           fsr1l	equ	0xFE1
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     89     121
    BANK0           128    120     120
    BANK1           256    256     256
    BANK2           256     32     128
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    overwriteBufferData@data	PTR unsigned int  size(2) Largest target is 64
		 -> flashWriteData@newData(BANK0[64]), 

    flashWriteData@data	PTR unsigned int  size(2) Largest target is 128
		 -> main@blockWrite5(BANK1[128]), 

    flashWriteBlock@secondHalf	PTR unsigned int  size(2) Largest target is 32
		 -> halfBuffer2(BANK2[32]), main@blockWrite3(BANK2[32]), main@blockWrite1(BANK1[32]), 

    flashWriteBlock@firstHalf	PTR unsigned int  size(2) Largest target is 32
		 -> halfBuffer1(COMRAM[32]), main@blockWrite2(BANK1[32]), main@blockWrite0(BANK0[32]), 

    flashReadBlock@data	PTR unsigned int  size(2) Largest target is 64
		 -> blockBuffer(BANK2[64]), main@blockRead(BANK1[64]), 


Critical Paths under _main in COMRAM

    _main->_flashWriteData
    _flashWriteData->_flashReadBlock
    _flashWriteData->_flashWriteBlock
    _rowErase->_flashSetAddress
    _overwriteBufferData->_loadHalfBuffer
    _flashWriteBlock->_flashSetAddress
    _writeToBuffer->_writeICSP
    _flashWriteAndProgram->_writeICSP
    _flashReadBlock->_flashSetAddress
    _flashSetAddress->_writeICSP
    _flashRead16Bits->_readFirstByte
    _flashRead16Bits->_readICSP
    _readICSP->_readBits
    _readFirstByte->_readBits
    _readBits->_readBit
    _readBit->_readPGD
    _PGD_low->_writePGD
    _MCLR_low->_writePGD
    _enableWrite->_writeICSP
    _bulkErase->_writeICSP
    _writeICSP->_writeBits
    _writeBits->_writeBit
    _writeBit->_writePGD

Critical Paths under _main in BANK0

    _main->_flashWriteData

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               348   348      0  138548
                                             71 COMRAM    18    18      0
                                             86 BANK0     34    34      0
                                              0 BANK1    256   256      0
                                              0 BANK2     32    32      0
                          _bulkErase
                        _enableWrite
                          _enter_HVP
                           _exit_HVP
                     _flashReadBlock
                    _flashWriteBlock
                     _flashWriteData
                           _trisInit
 ---------------------------------------------------------------------------------
 (1) _trisInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flashWriteData                                     104    96      8   74080
                                             55 COMRAM    16     8      8
                                              0 BANK0     86    86      0
                     _flashReadBlock
                    _flashSetAddress
                    _flashWriteBlock
                     _loadHalfBuffer
                _overwriteBufferData
                           _rowErase
 ---------------------------------------------------------------------------------
 (2) _rowErase                                             6     2      4   19577
                                             37 COMRAM     6     2      4
                           _PGC_high
                            _PGC_low
                            _PGD_low
                    _flashSetAddress
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (2) _overwriteBufferData                                 20    14      6     714
                                              8 COMRAM    20    14      6
                     _loadHalfBuffer
 ---------------------------------------------------------------------------------
 (3) _loadHalfBuffer                                       8     8      0     182
                                              0 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (2) _flashWriteBlock                                     18    10      8   28964
                                             37 COMRAM    18    10      8
                    _flashSetAddress
               _flashWriteAndProgram
                      _writeToBuffer
 ---------------------------------------------------------------------------------
 (3) _writeToBuffer                                        2     0      2    8392
                                             17 COMRAM     2     0      2
                          _writeICSP
 ---------------------------------------------------------------------------------
 (3) _flashWriteAndProgram                                 4     2      2   11008
                                             17 COMRAM     4     2      2
                           _PGC_high
                            _PGC_low
                            _PGD_low
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (2) _flashReadBlock                                      18    10      8   14952
                                             37 COMRAM    18    10      8
                    _flashRead16Bits
                    _flashSetAddress
 ---------------------------------------------------------------------------------
 (3) _flashSetAddress                                     20    16      4    8697
                                             17 COMRAM    20    16      4
                          _writeICSP
 ---------------------------------------------------------------------------------
 (3) _flashRead16Bits                                      6     4      2    5160
                                             18 COMRAM     6     4      2
                      _readFirstByte
                           _readICSP
 ---------------------------------------------------------------------------------
 (4) _readICSP                                             4     2      2    2534
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (4) _readFirstByte                                        4     2      2    2557
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (5) _readBits                                             7     5      2     265
                                              7 COMRAM     7     5      2
                            _readBit
 ---------------------------------------------------------------------------------
 (6) _readBit                                              4     2      2      23
                                              3 COMRAM     4     2      2
                           _PGC_high
                            _PGC_low
                            _readPGD
 ---------------------------------------------------------------------------------
 (7) _readPGD                                              3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _exit_HVP                                             0     0      0     556
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                            _PGM_low
 ---------------------------------------------------------------------------------
 (2) _PGM_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enter_HVP                                            0     0      0     556
                          _MCLR_high
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                           _PGM_high
 ---------------------------------------------------------------------------------
 (2) _PGM_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PGD_low                                              0     0      0     278
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_low                                             0     0      0     278
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_high                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableWrite                                          0     0      0    8178
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _bulkErase                                            2     2      0   10471
                                             17 COMRAM     2     2      0
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (3) _writeICSP                                            4     0      4    8178
                                             13 COMRAM     4     0      4
                          _writeBits
 ---------------------------------------------------------------------------------
 (4) _writeBits                                            9     5      4    2246
                                              4 COMRAM     9     5      4
                           _writeBit
 ---------------------------------------------------------------------------------
 (5) _writeBit                                             2     0      2     364
                                              2 COMRAM     2     0      2
                           _PGC_high
                            _PGC_low
                           _writePGD
 ---------------------------------------------------------------------------------
 (6) _writePGD                                             2     0      2     278
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _PGC_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PGC_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bulkErase
     _writeBits
       _writeBit
         _PGC_high
         _PGC_low
         _writePGD
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enableWrite
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enter_HVP
     _MCLR_high
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_high
   _exit_HVP
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_low
   _flashReadBlock
     _flashRead16Bits
       _readFirstByte
         _readBits
           _readBit
             _PGC_high
             _PGC_low
             _readPGD
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
       _readICSP
         _readBits
           _readBit
             _PGC_high
             _PGC_low
             _readPGD
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _flashSetAddress
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
   _flashWriteBlock
     _flashSetAddress
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _flashWriteAndProgram
       _PGC_high
       _PGC_low
       _PGD_low
         _writePGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _writeToBuffer
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
   _flashWriteData
     _flashReadBlock
       _flashRead16Bits
         _readFirstByte
           _readBits
             _readBit
               _PGC_high
               _PGC_low
               _readPGD
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
         _readICSP
           _readBits
             _readBit
               _PGC_high
               _PGC_low
               _readPGD
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _flashSetAddress
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
     _flashSetAddress
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _flashWriteBlock
       _flashSetAddress
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _flashWriteAndProgram
         _PGC_high
         _PGC_low
         _PGD_low
           _writePGD
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _writeToBuffer
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
     _loadHalfBuffer
     _overwriteBufferData
       _loadHalfBuffer
     _rowErase
       _PGC_high
       _PGC_low
       _PGD_low
         _writePGD
       _flashSetAddress
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
   _trisInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     20      80       8       50.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100    100     100       6      100.0%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80     78      78       4       93.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     59      79       1       95.3%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     271      14        0.0%
DATA                 0      0     271      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Dec 12 01:17:58 2014

            flashWriteBlock@blockSelect 0032              flashWriteBlock@blockNumber 002A  
                                   l225 713A                                     l234 706C  
                                   l185 78EC                                     u630 6C5E  
                                   u645 6C1E                                     u805 7246  
                                   u646 6C20                                     u654 6D8A  
                                   u638 6C60                                     u655 6D84  
                                   u674 6E64                                     u690 71A0  
                                   u930 7960                                     u675 6E5E  
                                   u695 7196                                     u935 7956  
                                   u785 6F2E                                     u945 7966  
                                   u990 7ABE                                     u995 7AB4  
                  _flashWriteAndProgram 6E96                                     wreg 000FE8  
                  overwriteBufferData@i 001B                    overwriteBufferData@j 0011  
                           main@address 004A                __size_of_flashRead16Bits 002E  
                          __CFG_LVP$OFF 000000                            __CFG_WDT$OFF 000000  
                                  l1402 6D9E                                    l1412 6E78  
                                  l1500 700E                                    l1408 6E52  
                                  l1600 7456                                    l1532 6F72  
                                  l1612 70CC                                    l1606 7090  
                                  l1536 6F94                                    l1720 7A98  
                                  l1704 7A22                                    l1466 6EE4  
                                  l1570 732C                                    l1554 72BC  
                                  l1618 7142                                    l1706 7A30  
                                  l1740 7CE2                                    l1398 6D74  
                                  l1478 6F06                                    l1738 7CDC  
                                  l1588 7434                                    l1852 76C8  
                                  l1678 75D2                                    l1838 7678  
                                  l1880 7768                                    l1698 79F2  
                                  l1866 7718                                    l1894 77B8  
                                  u1000 7B58                                    u1020 7BA6  
                                  u1005 7B4E                                    u1015 7B5E  
                                  u1025 7B9C                                    u1035 7BAC  
                                  u1060 7C84                                    u1055 7C1C  
                                  u1065 7C7A                                    u1075 7C8A  
                         __CFG_DEBUG$ON 000000                         __end_of_PGC_low 6C00  
                          __CFG_PWRT$ON 000000                         __end_of_PGD_low 6C30  
                       __end_of_PGM_low 6C0C                                    _main 75E8  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  fsr1l 000FE1                                    fsr2l 000FD9  
                                  prodl 000FF3                                    start 0002  
                    __size_of_MCLR_high 0004                        __end_of_MCLR_low 6C42  
                                 ?_main 0001                   ?_flashWriteAndProgram 0012  
              __size_of_flashSetAddress 00E4                        __end_of_PGC_high 6BFC  
               __size_of_loadHalfBuffer 00C2                        __end_of_PGM_high 6C08  
                       __end_of_readPGD 6C68                         __end_of_readBit 6CC8  
                      ??_flashReadBlock 002E                                   main@i 00F6  
                   _overwriteBufferData 706E                                   status 000FD8  
                       __initialization 6CC8                            __end_of_main 78EE  
                  ?_overwriteBufferData 0009                  __size_of_readFirstByte 004C  
                    flashWriteData@data 0038                           main@blockRead 0180  
                                ??_main 0048                      flashWriteData@size 003A  
                         __activetblptr 000000                               ??_PGC_low 0001  
                             ??_PGD_low 0003                       __end_of_MCLR_high 6C04  
                           readBit@data 0006                    __size_of_enableWrite 002A  
                             ??_PGM_low 0001                        ??_flashWriteData 0040  
                     ??_flashRead16Bits 0015                       readFirstByte@data 0011  
              __size_of_flashWriteBlock 0112                        __end_of_readICSP 6DF2  
             flashWriteData@memoryBlock 00C8                   flashWriteData@address 003C  
                 ??_overwriteBufferData 000F                        __end_of_readBits 6E96  
                      __end_of_exit_HVP 6C54                                  clear_0 6CCE  
                                clear_1 6CDA                  ??_flashWriteAndProgram 0014  
                 flashWriteData@newData 0080                               ??_readPGD 0003  
                             ??_readBit 0006                   flashWriteData@newSize 00C2  
                      __end_of_rowErase 746C               flashWriteData@nextDataSet 00C6  
                      __end_of_trisInit 6C16                       ??_flashSetAddress 0016  
                 flashWriteAndProgram@i 0014                        __end_of_writePGD 6C22  
                      __end_of_writeBit 6C7E                 overwriteBufferData@data 0009  
                         _readFirstByte 6DF2                              __accesstop 0080  
               __end_of__initialization 6CE0                            readICSP@data 0011  
            flashWriteData@timesToWrite 00C4                               ?_MCLR_low 0001  
                __size_of_writeToBuffer 0016                               ?_PGC_high 0001  
                       loadHalfBuffer@i 0007                         loadHalfBuffer@j 0005  
                        __pcstackCOMRAM 0001                         flashWriteData@i 00CE  
                       flashWriteData@j 00C0                         flashWriteData@k 00CA  
                             ?_PGM_high 0001          overwriteBufferData@sizeToWrite 000B  
             flashReadBlock@blockSelect 0032               flashReadBlock@blockNumber 002A  
                        _loadHalfBuffer 6FAC                      __size_of_bulkErase 017C  
                        ?_readFirstByte 000F               flashWriteBlock@secondHalf 0028  
                            __pbssBANK2 0200                      __size_of_enter_HVP 0016  
                            ??_MCLR_low 0003                              ??_PGC_high 0001  
                            ??_PGM_high 0001                       ??_flashWriteBlock 002E  
                          readBits@data 000D                  __end_of_loadHalfBuffer 706E  
                         _writeToBuffer 6C94                                 _PGC_low 6BFC  
                               _PGD_low 6C22                                 _PGM_low 6C08  
                             ?_readICSP 000F                               ?_readBits 0008  
                             ?_exit_HVP 0001                      __size_of_writeICSP 002A  
                    __size_of_writeBits 0044                                 __Hparam 0000  
                               __Lparam 0000         flashWriteData@currentStartPoint 00CC  
                             ?_rowErase 0026                       __end_of_bulkErase 75E8  
                    writeBit@bitToWrite 0003                               ?_trisInit 0001  
                     __end_of_enter_HVP 6C94                                 __pcinit 6CC8  
                               __ramtop 0600                               ?_writePGD 0001  
                             ?_writeBit 0003                                 __ptext0 75E8  
                               __ptext1 6C0C                                 __ptext2 78EE  
                               __ptext3 7346                                 __ptext4 706E  
                               __ptext5 6FAC                                 __ptext6 7234  
                               __ptext7 6C94                                 __ptext8 6E96  
                               __ptext9 6F1C                          ?_writeToBuffer 0012  
                       ?_loadHalfBuffer 0001                                 _readPGD 6C54  
                               _readBit 6CAA                            writePGD@data 0001  
                       _flashRead16Bits 6D3A                         ??_readFirstByte 0011  
                  end_of_initialization 6CE0                              ??_readICSP 0011  
                             _MCLR_high 6C00                              ??_readBits 000A  
                            ??_exit_HVP 0003                  flashSetAddress@address 0012  
                            ??_rowErase 002A                                 postdec1 000FE5  
                               postdec2 000FDD                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                flashSetAddress@lowAddr 0022                              ??_trisInit 0001  
                            ??_writePGD 0003                              ??_writeBit 0005  
                       _flashSetAddress 7150                               _PORTDbits 000F83  
                     __end_of_writeICSP 6D10                       __end_of_writeBits 6DAC  
                         ??_enableWrite 0012                overwriteBufferData@start 0017  
                             _TRISDbits 000F95                        writeBits@pattern 0005  
                            ?_MCLR_high 0001                              bulkErase@i 0012  
   overwriteBufferData@bufferStartPoint 000D             __end_of_overwriteBufferData 7150  
               __size_of_flashReadBlock 0090                       __size_of_MCLR_low 0012  
                      flashWriteBlock@i 0036                       __size_of_PGC_high 0004  
               __end_of_flashRead16Bits 6D68                         ??_writeToBuffer 0014  
                     __size_of_PGM_high 0004           __size_of_flashWriteAndProgram 0086  
                  writeICSP@commandByte 000E                     start_initialization 6CC8  
                   __end_of_enableWrite 6D3A            overwriteBufferData@bytesLeft 0013  
                      __CFG_OSC$INTIO67 000000                         _flashWriteBlock 7234  
               __size_of_flashWriteData 0412                 __end_of_flashSetAddress 7234  
                    writeICSP@dataBytes 0010                         main@blockWrite0 00D6  
                       main@blockWrite1 01C0                         main@blockWrite2 01E0  
                       main@blockWrite3 0260                         main@blockWrite5 0100  
                           __pbssCOMRAM 005A                           __pcstackBANK0 0080  
                         __pcstackBANK1 0100                           __pcstackBANK2 0260  
                              ?_PGC_low 0001                                ?_PGD_low 0001  
                              ?_PGM_low 0001                             ??_MCLR_high 0001  
                           _halfBuffer1 005A                             _halfBuffer2 0240  
                     __size_of_readICSP 0046                       __size_of_readBits 0058  
                     __size_of_exit_HVP 0012  overwriteBufferData@availableWriteSpace 0019  
                           _blockBuffer 0200                        ??_loadHalfBuffer 0001  
                     __size_of_rowErase 0126                        ?_flashRead16Bits 0013  
                             _bulkErase 746C                       __size_of_trisInit 000A  
                              ?_readPGD 0001                                ?_readBit 0004  
              flashRead16Bits@firstData 0015                               _enter_HVP 6C7E  
                     __size_of_writePGD 000C                             _enableWrite 6D10  
                     __size_of_writeBit 0016                 __end_of_flashWriteBlock 7346  
                              _MCLR_low 6C30                       writeToBuffer@data 0012  
                        _flashReadBlock 6F1C                                _PGC_high 6BF8  
                      ?_flashSetAddress 0012                                _PGM_high 6C04  
                            ?_bulkErase 0001                               main@data0 0050  
                             main@data1 0052                               main@data2 0054  
                             main@data3 0056                               main@data4 004E  
                             main@data5 0058                              ?_enter_HVP 0001  
                             _writeICSP 6CE6                               _writeBits 6D68  
                      __size_of_PGC_low 0004                        __size_of_PGD_low 000E  
                    readBits@bitsToRead 0008                        __size_of_PGM_low 0004  
                 __end_of_readFirstByte 6E3E                flashWriteData@newAddress 00D2  
                __end_of_flashReadBlock 6FAC                               readBits@i 000B  
                              __Hrparam 0000                          _flashWriteData 78EE  
                              __Lrparam 0000                        __size_of_readPGD 0014  
                      __size_of_readBit 001E                flashWriteBlock@firstHalf 0026  
                            ?_writeICSP 000E                                __ptext10 7150  
                              __ptext11 6D3A                                __ptext20 6C04  
                              __ptext12 6DAC                                __ptext21 6C22  
                              __ptext13 6DF2                                __ptext30 6BFC  
                              __ptext22 6C30                                __ptext14 6E3E  
                              __ptext31 6BF8                                __ptext23 6C00  
                              __ptext15 6CAA                                __ptext24 6D10  
                              __ptext16 6C54                                __ptext25 746C  
                              __ptext17 6C42                                __ptext26 6CE6  
                              __ptext18 6C08                                __ptext27 6D68  
                              __ptext19 6C7E                                __ptext28 6C68  
                              __ptext29 6C16                              ?_writeBits 0005  
       overwriteBufferData@bytesWritten 0015                        ?_flashWriteBlock 0026  
                              _readICSP 6DAC                                _readBits 6E3E  
                       rowErase@address 0026                                _exit_HVP 6C42  
                         __size_of_main 0306                         ?_flashReadBlock 0026  
          __end_of_flashWriteAndProgram 6F1C                  __end_of_flashWriteData 7D00  
                  writeBits@bitsToWrite 0007                              writeBits@i 000C  
                              _rowErase 7346                               rowErase@i 002A  
                              _trisInit 6C0C            __size_of_overwriteBufferData 00E2  
                           ??_bulkErase 0012                                _writePGD 6C16  
                              _writeBit 6C68                   __end_of_writeToBuffer 6CAA  
                           ??_enter_HVP 0003                         ?_flashWriteData 0038  
               flashSetAddress@highAddr 001E                      flashReadBlock@data 0026  
                    flashReadBlock@size 0028                flashWriteAndProgram@data 0012  
              flashSetAddress@upperAddr 001A                            ?_enableWrite 0001  
                           ??_writeICSP 0012                             ??_writeBits 0009  
            flashWriteData@bytesWritten 00D0                     flashRead16Bits@data 0017  
                       flashReadBlock@i 0036  
