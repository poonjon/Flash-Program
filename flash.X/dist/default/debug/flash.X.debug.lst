

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Nov 14 18:53:30 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1
    19                           	psect	text12,global,reloc=2,class=CODE,delta=1
    20                           	psect	text13,global,reloc=2,class=CODE,delta=1
    21                           	psect	text14,global,reloc=2,class=CODE,delta=1
    22                           	psect	text15,global,reloc=2,class=CODE,delta=1
    23                           	psect	text16,global,reloc=2,class=CODE,delta=1
    24                           	psect	text17,global,reloc=2,class=CODE,delta=1
    25                           	psect	text18,global,reloc=2,class=CODE,delta=1
    26                           	psect	text19,global,reloc=2,class=CODE,delta=1
    27                           	psect	text20,global,reloc=2,class=CODE,delta=1
    28                           	psect	text21,global,reloc=2,class=CODE,delta=1
    29                           	psect	text22,global,reloc=2,class=CODE,delta=1
    30                           	psect	text23,global,reloc=2,class=CODE,delta=1
    31                           	psect	text24,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    34  0000                     _PORTDbits	set	3971
    35  0000                     _TRISDbits	set	3989
    36                           
    37 ;;
    38 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    39 ;;
    40 ;; *************** function _main *****************
    41 ;; Defined at:
    42 ;;		line 28 in file "../src/PIC18/Main.c"
    43 ;; Parameters:    Size  Location     Type
    44 ;;		None
    45 ;; Auto vars:     Size  Location     Type
    46 ;;  d               2   45[COMRAM] unsigned int 
    47 ;;  c               2   43[COMRAM] unsigned int 
    48 ;;  b               2   41[COMRAM] unsigned int 
    49 ;;  a               2   39[COMRAM] unsigned int 
    50 ;;  i               2   37[COMRAM] unsigned int 
    51 ;; Return value:  Size  Location     Type
    52 ;;		None               void
    53 ;; Registers used:
    54 ;;		wreg, status,2, status,0, cstack
    55 ;; Tracked objects:
    56 ;;		On entry : 0/0
    57 ;;		On exit  : 0/0
    58 ;;		Unchanged: 0/0
    59 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
    60 ;;      Params:         0       0       0       0       0       0       0
    61 ;;      Locals:        10       0       0       0       0       0       0
    62 ;;      Temps:          0       0       0       0       0       0       0
    63 ;;      Totals:        10       0       0       0       0       0       0
    64 ;;Total ram usage:       10 bytes
    65 ;; Hardware stack levels required when called:    5
    66 ;; This function calls:
    67 ;;		_bulkErase
    68 ;;		_enableWrite
    69 ;;		_enter_HVP
    70 ;;		_exit_HVP
    71 ;;		_read2Byte
    72 ;;		_tableSelect
    73 ;;		_trisInit
    74 ;;		_writeTableThenIncremeant
    75 ;; This function is called by:
    76 ;;		Startup code after reset
    77 ;; This function uses a non-reentrant model
    78 ;;
    79                           
    80                           	psect	text0
    81  0079E4                     __ptext0:
    82                           	opt stack 0
    83  0079E4                     _main:
    84                           	opt stack 25
    85                           
    86                           ;Main.c: 29: uint16 i = 0;
    87                           
    88                           ;incstack = 0
    89  0079E4  0E00               	movlw	0
    90  0079E6  6E27               	movwf	main@i+1,c
    91  0079E8  0E00               	movlw	0
    92  0079EA  6E26               	movwf	main@i,c
    93                           
    94                           ;Main.c: 30: uint16 a = 0;
    95  0079EC  0E00               	movlw	0
    96  0079EE  6E29               	movwf	main@a+1,c
    97  0079F0  0E00               	movlw	0
    98  0079F2  6E28               	movwf	main@a,c
    99                           
   100                           ;Main.c: 31: uint16 b = 0;
   101  0079F4  0E00               	movlw	0
   102  0079F6  6E2B               	movwf	main@b+1,c
   103  0079F8  0E00               	movlw	0
   104  0079FA  6E2A               	movwf	main@b,c
   105                           
   106                           ;Main.c: 32: uint16 c = 0;
   107  0079FC  0E00               	movlw	0
   108  0079FE  6E2D               	movwf	main@c+1,c
   109  007A00  0E00               	movlw	0
   110  007A02  6E2C               	movwf	main@c,c
   111                           
   112                           ;Main.c: 33: uint16 d = 0;
   113  007A04  0E00               	movlw	0
   114  007A06  6E2F               	movwf	main@d+1,c
   115  007A08  0E00               	movlw	0
   116  007A0A  6E2E               	movwf	main@d,c
   117                           
   118                           ;Main.c: 34: trisInit();
   119  007A0C  EC7A  F03B         	call	_trisInit	;wreg free
   120                           
   121                           ;Main.c: 36: enter_HVP();
   122  007A10  ECB3  F03B         	call	_enter_HVP	;wreg free
   123                           
   124                           ;Main.c: 38: bulkErase();
   125  007A14  ECC2  F03D         	call	_bulkErase	;wreg free
   126                           
   127                           ;Main.c: 39: tableSelect(0x001232);
   128  007A18  0E32               	movlw	50
   129  007A1A  6E12               	movwf	tableSelect@address,c
   130  007A1C  0E12               	movlw	18
   131  007A1E  6E13               	movwf	tableSelect@address+1,c
   132  007A20  0E00               	movlw	0
   133  007A22  6E14               	movwf	tableSelect@address+2,c
   134  007A24  0E00               	movlw	0
   135  007A26  6E15               	movwf	tableSelect@address+3,c
   136  007A28  EC50  F03D         	call	_tableSelect	;wreg free
   137                           
   138                           ;Main.c: 40: enableWrite();
   139  007A2C  ECE2  F03B         	call	_enableWrite	;wreg free
   140                           
   141                           ;Main.c: 41: writeTableThenIncremeant(0x25d6, 0x58a6);
   142  007A30  0E25               	movlw	37
   143  007A32  6E13               	movwf	writeTableThenIncremeant@first2Byte+1,c
   144  007A34  0ED6               	movlw	214
   145  007A36  6E12               	movwf	writeTableThenIncremeant@first2Byte,c
   146  007A38  0E58               	movlw	88
   147  007A3A  6E15               	movwf	writeTableThenIncremeant@second2Byte+1,c
   148  007A3C  0EA6               	movlw	166
   149  007A3E  6E14               	movwf	writeTableThenIncremeant@second2Byte,c
   150  007A40  ECA5  F03C         	call	_writeTableThenIncremeant	;wreg free
   151                           
   152                           ;Main.c: 42: writeTableThenIncremeant(0x2fdf, 0x58ff);
   153  007A44  0E2F               	movlw	47
   154  007A46  6E13               	movwf	writeTableThenIncremeant@first2Byte+1,c
   155  007A48  0EDF               	movlw	223
   156  007A4A  6E12               	movwf	writeTableThenIncremeant@first2Byte,c
   157  007A4C  0E58               	movlw	88
   158  007A4E  6E15               	movwf	writeTableThenIncremeant@second2Byte+1,c
   159  007A50  6814               	setf	writeTableThenIncremeant@second2Byte,c
   160  007A52  ECA5  F03C         	call	_writeTableThenIncremeant	;wreg free
   161                           
   162                           ;Main.c: 43: tableSelect(0x001232);
   163  007A56  0E32               	movlw	50
   164  007A58  6E12               	movwf	tableSelect@address,c
   165  007A5A  0E12               	movlw	18
   166  007A5C  6E13               	movwf	tableSelect@address+1,c
   167  007A5E  0E00               	movlw	0
   168  007A60  6E14               	movwf	tableSelect@address+2,c
   169  007A62  0E00               	movlw	0
   170  007A64  6E15               	movwf	tableSelect@address+3,c
   171  007A66  EC50  F03D         	call	_tableSelect	;wreg free
   172                           
   173                           ;Main.c: 44: a = read2Byte();
   174  007A6A  ECF7  F03B         	call	_read2Byte	;wreg free
   175  007A6E  C013  F028         	movff	?_read2Byte,main@a
   176  007A72  C014  F029         	movff	?_read2Byte+1,main@a+1
   177                           
   178                           ;Main.c: 45: b = read2Byte();
   179  007A76  ECF7  F03B         	call	_read2Byte	;wreg free
   180  007A7A  C013  F02A         	movff	?_read2Byte,main@b
   181  007A7E  C014  F02B         	movff	?_read2Byte+1,main@b+1
   182                           
   183                           ;Main.c: 46: c = read2Byte();
   184  007A82  ECF7  F03B         	call	_read2Byte	;wreg free
   185  007A86  C013  F02C         	movff	?_read2Byte,main@c
   186  007A8A  C014  F02D         	movff	?_read2Byte+1,main@c+1
   187                           
   188                           ;Main.c: 47: d = read2Byte();
   189  007A8E  ECF7  F03B         	call	_read2Byte	;wreg free
   190  007A92  C013  F02E         	movff	?_read2Byte,main@d
   191  007A96  C014  F02F         	movff	?_read2Byte+1,main@d+1
   192                           
   193                           ;Main.c: 51: exit_HVP();
   194  007A9A  EC95  F03B         	call	_exit_HVP	;wreg free
   195  007A9E                     l136:
   196  007A9E  D7FF               	goto	l136
   197  007AA0                     __end_of_main:
   198                           	opt stack 0
   199                           
   200                           	psect	cinit
   201  0076EE                     __pcinit:
   202                           	opt stack 0
   203  0076EE                     start_initialization:
   204                           	opt stack 0
   205  0076EE                     __initialization:
   206                           	opt stack 0
   207  0076EE                     end_of_initialization:
   208                           	opt stack 0
   209  0076EE                     __end_of__initialization:
   210                           	opt stack 0
   211  0076EE  0100               	movlb	0
   212  0076F0  EFF2  F03C         	goto	_main	;jump to C main() function
   213                           
   214                           	psect	cstackCOMRAM
   215  000001                     __pcstackCOMRAM:
   216                           	opt stack 0
   217  000001                     ?_readPGD:
   218                           	opt stack 0
   219  000001                     writePGD@data:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x0
   223  000001                     	ds	2
   224  000003                     ??_readPGD:
   225  000003                     writeBit@bitToWrite:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x2
   229  000003                     	ds	1
   230  000004                     ?_readBit:
   231                           	opt stack 0
   232                           
   233                           ; 2 bytes @ 0x3
   234  000004                     	ds	1
   235  000005                     writeBits@pattern:
   236                           	opt stack 0
   237                           
   238                           ; 2 bytes @ 0x4
   239  000005                     	ds	1
   240  000006                     readBit@data:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x5
   244  000006                     	ds	1
   245  000007                     writeBits@bitsToWrite:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x6
   249  000007                     	ds	1
   250  000008                     ?_readBits:
   251                           	opt stack 0
   252  000008                     readBits@bitsToRead:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x7
   256  000008                     	ds	1
   257  000009                     ??_writeBits:
   258                           
   259                           ; 0 bytes @ 0x8
   260  000009                     	ds	1
   261  00000A                     ??_readBits:
   262                           
   263                           ; 0 bytes @ 0x9
   264  00000A                     	ds	1
   265  00000B                     readBits@i:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0xA
   269  00000B                     	ds	1
   270  00000C                     writeBits@i:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0xB
   274  00000C                     	ds	1
   275  00000D                     readBits@data:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0xC
   279  00000D                     	ds	1
   280  00000E                     writeICSP@commandByte:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0xD
   284  00000E                     	ds	1
   285  00000F                     ?_readICSP:
   286                           	opt stack 0
   287  00000F                     ?_readFirstByte:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0xE
   291  00000F                     	ds	1
   292  000010                     writeICSP@dataBytes:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0xF
   296  000010                     	ds	1
   297  000011                     readICSP@data:
   298                           	opt stack 0
   299  000011                     readFirstByte@data:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x10
   303  000011                     	ds	1
   304  000012                     bulkErase@i:
   305                           	opt stack 0
   306  000012                     writeTableThenIncremeant@first2Byte:
   307                           	opt stack 0
   308  000012                     tableSelect@address:
   309                           	opt stack 0
   310                           
   311                           ; 4 bytes @ 0x11
   312  000012                     	ds	1
   313  000013                     ?_read2Byte:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x12
   317  000013                     	ds	1
   318  000014                     writeTableThenIncremeant@second2Byte:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x13
   322  000014                     	ds	1
   323  000015                     read2Byte@firstData:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x14
   327  000015                     	ds	1
   328  000016                     ??_tableSelect:
   329  000016                     writeTableThenIncremeant@i:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x15
   333  000016                     	ds	1
   334  000017                     read2Byte@data:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x16
   338  000017                     	ds	3
   339  00001A                     tableSelect@upperAddr:
   340                           	opt stack 0
   341                           
   342                           ; 4 bytes @ 0x19
   343  00001A                     	ds	4
   344  00001E                     tableSelect@highAddr:
   345                           	opt stack 0
   346                           
   347                           ; 4 bytes @ 0x1D
   348  00001E                     	ds	4
   349  000022                     tableSelect@lowAddr:
   350                           	opt stack 0
   351                           
   352                           ; 4 bytes @ 0x21
   353  000022                     	ds	4
   354  000026                     main@i:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x25
   358  000026                     	ds	2
   359  000028                     main@a:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x27
   363  000028                     	ds	2
   364  00002A                     main@b:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x29
   368  00002A                     	ds	2
   369  00002C                     main@c:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x2B
   373  00002C                     	ds	2
   374  00002E                     main@d:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x2D
   378  00002E                     	ds	2
   379                           
   380 ;; *************** function _writeTableThenIncremeant *****************
   381 ;; Defined at:
   382 ;;		line 136 in file "../src/PIC18/FlashProg.c"
   383 ;; Parameters:    Size  Location     Type
   384 ;;  first2Byte      2   17[COMRAM] unsigned int 
   385 ;;  second2Byte     2   19[COMRAM] unsigned int 
   386 ;; Auto vars:     Size  Location     Type
   387 ;;  i               2   21[COMRAM] int 
   388 ;; Return value:  Size  Location     Type
   389 ;;		None               void
   390 ;; Registers used:
   391 ;;		wreg, status,2, status,0, cstack
   392 ;; Tracked objects:
   393 ;;		On entry : 0/0
   394 ;;		On exit  : 0/0
   395 ;;		Unchanged: 0/0
   396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   397 ;;      Params:         4       0       0       0       0       0       0
   398 ;;      Locals:         2       0       0       0       0       0       0
   399 ;;      Temps:          0       0       0       0       0       0       0
   400 ;;      Totals:         6       0       0       0       0       0       0
   401 ;;Total ram usage:        6 bytes
   402 ;; Hardware stack levels used:    1
   403 ;; Hardware stack levels required when called:    4
   404 ;; This function calls:
   405 ;;		_PGC_high
   406 ;;		_PGC_low
   407 ;;		_PGD_low
   408 ;;		_writeBits
   409 ;;		_writeICSP
   410 ;; This function is called by:
   411 ;;		_main
   412 ;; This function uses a non-reentrant model
   413 ;;
   414                           
   415                           	psect	text1
   416  00794A                     __ptext1:
   417                           	opt stack 0
   418  00794A                     _writeTableThenIncremeant:
   419                           	opt stack 25
   420                           
   421                           ;FlashProg.c: 137: int i;
   422                           ;FlashProg.c: 139: writeICSP(0xd, first2Byte);
   423                           
   424                           ;incstack = 0
   425  00794A  0E00               	movlw	0
   426  00794C  6E0F               	movwf	writeICSP@commandByte+1,c
   427  00794E  0E0D               	movlw	13
   428  007950  6E0E               	movwf	writeICSP@commandByte,c
   429  007952  C012  F010         	movff	writeTableThenIncremeant@first2Byte,writeICSP@dataBytes
   430  007956  C013  F011         	movff	writeTableThenIncremeant@first2Byte+1,writeICSP@dataBytes+1
   431  00795A  ECCD  F03B         	call	_writeICSP	;wreg free
   432                           
   433                           ;FlashProg.c: 140: writeICSP(0xe, second2Byte);
   434  00795E  0E00               	movlw	0
   435  007960  6E0F               	movwf	writeICSP@commandByte+1,c
   436  007962  0E0E               	movlw	14
   437  007964  6E0E               	movwf	writeICSP@commandByte,c
   438  007966  C014  F010         	movff	writeTableThenIncremeant@second2Byte,writeICSP@dataBytes
   439  00796A  C015  F011         	movff	writeTableThenIncremeant@second2Byte+1,writeICSP@dataBytes+1
   440  00796E  ECCD  F03B         	call	_writeICSP	;wreg free
   441                           
   442                           ;FlashProg.c: 142: writeBits(0x0, 3);
   443  007972  0E00               	movlw	0
   444  007974  6E06               	movwf	writeBits@pattern+1,c
   445  007976  0E00               	movlw	0
   446  007978  6E05               	movwf	writeBits@pattern,c
   447  00797A  0E00               	movlw	0
   448  00797C  6E08               	movwf	writeBits@bitsToWrite+1,c
   449  00797E  0E03               	movlw	3
   450  007980  6E07               	movwf	writeBits@bitsToWrite,c
   451  007982  EC0E  F03C         	call	_writeBits	;wreg free
   452                           
   453                           ;FlashProg.c: 143: PGC_high();
   454  007986  EC6D  F03B         	call	_PGC_high	;wreg free
   455                           
   456                           ;FlashProg.c: 144: PGD_low();
   457  00798A  EC85  F03B         	call	_PGD_low	;wreg free
   458                           
   459                           ;FlashProg.c: 145: for(i = 0; i < 25 ; i++){}
   460  00798E  0E00               	movlw	0
   461  007990  6E17               	movwf	writeTableThenIncremeant@i+1,c
   462  007992  0E00               	movlw	0
   463  007994  6E16               	movwf	writeTableThenIncremeant@i,c
   464  007996  5017               	movf	writeTableThenIncremeant@i+1,w,c
   465  007998  0A80               	xorlw	128
   466  00799A  0F80               	addlw	-128
   467  00799C  0E19               	movlw	25
   468  00799E  B4D8               	btfsc	status,2,c
   469  0079A0  5C16               	subwf	writeTableThenIncremeant@i,w,c
   470  0079A2  B0D8               	btfsc	status,0,c
   471  0079A4  D003               	goto	l877
   472  0079A6  4A16               	infsnz	writeTableThenIncremeant@i,f,c
   473  0079A8  2A17               	incf	writeTableThenIncremeant@i+1,f,c
   474  0079AA  D7F5               	goto	L1
   475  0079AC                     l877:
   476                           
   477                           ;FlashProg.c: 146: PGC_low();
   478  0079AC  EC6F  F03B         	call	_PGC_low	;wreg free
   479                           
   480                           ;FlashProg.c: 147: for(i = 0; i < 25 ; i++){}
   481  0079B0  0E00               	movlw	0
   482  0079B2  6E17               	movwf	writeTableThenIncremeant@i+1,c
   483  0079B4  0E00               	movlw	0
   484  0079B6  6E16               	movwf	writeTableThenIncremeant@i,c
   485  0079B8  5017               	movf	writeTableThenIncremeant@i+1,w,c
   486  0079BA  0A80               	xorlw	128
   487  0079BC  0F80               	addlw	-128
   488  0079BE  0E19               	movlw	25
   489  0079C0  B4D8               	btfsc	status,2,c
   490  0079C2  5C16               	subwf	writeTableThenIncremeant@i,w,c
   491  0079C4  B0D8               	btfsc	status,0,c
   492  0079C6  D003               	goto	l889
   493  0079C8  4A16               	infsnz	writeTableThenIncremeant@i,f,c
   494  0079CA  2A17               	incf	writeTableThenIncremeant@i+1,f,c
   495  0079CC  D7F5               	goto	L2
   496  0079CE                     l889:
   497                           
   498                           ;FlashProg.c: 149: writeBits(0x0, 16);
   499  0079CE  0E00               	movlw	0
   500  0079D0  6E06               	movwf	writeBits@pattern+1,c
   501  0079D2  0E00               	movlw	0
   502  0079D4  6E05               	movwf	writeBits@pattern,c
   503  0079D6  0E00               	movlw	0
   504  0079D8  6E08               	movwf	writeBits@bitsToWrite+1,c
   505  0079DA  0E10               	movlw	16
   506  0079DC  6E07               	movwf	writeBits@bitsToWrite,c
   507  0079DE  EC0E  F03C         	call	_writeBits	;wreg free
   508  0079E2  0012               	return	
   509  0079E4                     __end_of_writeTableThenIncremeant:
   510                           	opt stack 0
   511                           status	equ	0xFD8
   512                           
   513 ;; *************** function _trisInit *****************
   514 ;; Defined at:
   515 ;;		line 21 in file "../src/PIC18/Main.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;		None
   518 ;; Auto vars:     Size  Location     Type
   519 ;;		None
   520 ;; Return value:  Size  Location     Type
   521 ;;		None               void
   522 ;; Registers used:
   523 ;;		None
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   529 ;;      Params:         0       0       0       0       0       0       0
   530 ;;      Locals:         0       0       0       0       0       0       0
   531 ;;      Temps:          0       0       0       0       0       0       0
   532 ;;      Totals:         0       0       0       0       0       0       0
   533 ;;Total ram usage:        0 bytes
   534 ;; Hardware stack levels used:    1
   535 ;; This function calls:
   536 ;;		Nothing
   537 ;; This function is called by:
   538 ;;		_main
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           	psect	text2
   543  0076F4                     __ptext2:
   544                           	opt stack 0
   545  0076F4                     _trisInit:
   546                           	opt stack 29
   547                           
   548                           ;Main.c: 22: TRISDbits.TRISD4 = 0;
   549                           
   550                           ;incstack = 0
   551  0076F4  9895               	bcf	3989,4,c	;volatile
   552                           
   553                           ;Main.c: 23: TRISDbits.TRISD5 = 0;
   554  0076F6  9A95               	bcf	3989,5,c	;volatile
   555                           
   556                           ;Main.c: 24: TRISDbits.TRISD6 = 0;
   557  0076F8  9C95               	bcf	3989,6,c	;volatile
   558                           
   559                           ;Main.c: 25: TRISDbits.TRISD7 = 0;
   560  0076FA  9E95               	bcf	3989,7,c	;volatile
   561  0076FC  0012               	return	
   562  0076FE                     __end_of_trisInit:
   563                           	opt stack 0
   564                           status	equ	0xFD8
   565                           
   566 ;; *************** function _tableSelect *****************
   567 ;; Defined at:
   568 ;;		line 119 in file "../src/PIC18/FlashProg.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;  address         4   17[COMRAM] unsigned long 
   571 ;; Auto vars:     Size  Location     Type
   572 ;;  lowAddr         4   33[COMRAM] unsigned long 
   573 ;;  highAddr        4   29[COMRAM] unsigned long 
   574 ;;  upperAddr       4   25[COMRAM] unsigned long 
   575 ;; Return value:  Size  Location     Type
   576 ;;		None               void
   577 ;; Registers used:
   578 ;;		wreg, status,2, status,0, cstack
   579 ;; Tracked objects:
   580 ;;		On entry : 0/0
   581 ;;		On exit  : 0/0
   582 ;;		Unchanged: 0/0
   583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   584 ;;      Params:         4       0       0       0       0       0       0
   585 ;;      Locals:        12       0       0       0       0       0       0
   586 ;;      Temps:          4       0       0       0       0       0       0
   587 ;;      Totals:        20       0       0       0       0       0       0
   588 ;;Total ram usage:       20 bytes
   589 ;; Hardware stack levels used:    1
   590 ;; Hardware stack levels required when called:    4
   591 ;; This function calls:
   592 ;;		_writeICSP
   593 ;; This function is called by:
   594 ;;		_main
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           	psect	text3
   599  007AA0                     __ptext3:
   600                           	opt stack 0
   601  007AA0                     _tableSelect:
   602                           	opt stack 25
   603                           
   604                           ;FlashProg.c: 120: uint32 upperAddr;
   605                           ;FlashProg.c: 121: uint32 highAddr;
   606                           ;FlashProg.c: 122: uint32 lowAddr;
   607                           ;FlashProg.c: 124: lowAddr = (address&0x0000ff);
   608                           
   609                           ;incstack = 0
   610  007AA0  5012               	movf	tableSelect@address,w,c
   611  007AA2  6E22               	movwf	tableSelect@lowAddr,c
   612  007AA4  6A23               	clrf	tableSelect@lowAddr+1,c
   613  007AA6  6A24               	clrf	tableSelect@lowAddr+2,c
   614  007AA8  6A25               	clrf	tableSelect@lowAddr+3,c
   615                           
   616                           ;FlashProg.c: 125: highAddr = ((address>>8)&0x0000ff);
   617  007AAA  C012  F016         	movff	tableSelect@address,??_tableSelect
   618  007AAE  C013  F017         	movff	tableSelect@address+1,??_tableSelect+1
   619  007AB2  C014  F018         	movff	tableSelect@address+2,??_tableSelect+2
   620  007AB6  C015  F019         	movff	tableSelect@address+3,??_tableSelect+3
   621  007ABA  C017  F016         	movff	??_tableSelect+1,??_tableSelect
   622  007ABE  C018  F017         	movff	??_tableSelect+2,??_tableSelect+1
   623  007AC2  C019  F018         	movff	??_tableSelect+3,??_tableSelect+2
   624  007AC6  6A19               	clrf	??_tableSelect+3,c
   625  007AC8  5016               	movf	??_tableSelect,w,c
   626  007ACA  6E1E               	movwf	tableSelect@highAddr,c
   627  007ACC  6A1F               	clrf	tableSelect@highAddr+1,c
   628  007ACE  6A20               	clrf	tableSelect@highAddr+2,c
   629  007AD0  6A21               	clrf	tableSelect@highAddr+3,c
   630                           
   631                           ;FlashProg.c: 126: upperAddr = ((address>>16)&0x0000ff);
   632  007AD2  C012  F016         	movff	tableSelect@address,??_tableSelect
   633  007AD6  C013  F017         	movff	tableSelect@address+1,??_tableSelect+1
   634  007ADA  C014  F018         	movff	tableSelect@address+2,??_tableSelect+2
   635  007ADE  C015  F019         	movff	tableSelect@address+3,??_tableSelect+3
   636  007AE2  0E11               	movlw	17
   637  007AE4  D005               	goto	u90
   638  007AE6                     u95:
   639  007AE6  90D8               	bcf	status,0,c
   640  007AE8  3219               	rrcf	??_tableSelect+3,f,c
   641  007AEA  3218               	rrcf	??_tableSelect+2,f,c
   642  007AEC  3217               	rrcf	??_tableSelect+1,f,c
   643  007AEE  3216               	rrcf	??_tableSelect,f,c
   644  007AF0                     u90:
   645  007AF0  2EE8               	decfsz	wreg,f,c
   646  007AF2  D7F9               	goto	u95
   647  007AF4  5016               	movf	??_tableSelect,w,c
   648  007AF6  6E1A               	movwf	tableSelect@upperAddr,c
   649  007AF8  6A1B               	clrf	tableSelect@upperAddr+1,c
   650  007AFA  6A1C               	clrf	tableSelect@upperAddr+2,c
   651  007AFC  6A1D               	clrf	tableSelect@upperAddr+3,c
   652                           
   653                           ;FlashProg.c: 128: writeICSP(0x0, 0x0e00|upperAddr);
   654  007AFE  0E00               	movlw	0
   655  007B00  6E0F               	movwf	writeICSP@commandByte+1,c
   656  007B02  0E00               	movlw	0
   657  007B04  6E0E               	movwf	writeICSP@commandByte,c
   658  007B06  0E00               	movlw	0
   659  007B08  101A               	iorwf	tableSelect@upperAddr,w,c
   660  007B0A  6E10               	movwf	writeICSP@dataBytes,c
   661  007B0C  0E0E               	movlw	14
   662  007B0E  101B               	iorwf	tableSelect@upperAddr+1,w,c
   663  007B10  6E11               	movwf	writeICSP@dataBytes+1,c
   664  007B12  ECCD  F03B         	call	_writeICSP	;wreg free
   665                           
   666                           ;FlashProg.c: 129: writeICSP(0x0, 0x6ef8);
   667  007B16  0E00               	movlw	0
   668  007B18  6E0F               	movwf	writeICSP@commandByte+1,c
   669  007B1A  0E00               	movlw	0
   670  007B1C  6E0E               	movwf	writeICSP@commandByte,c
   671  007B1E  0E6E               	movlw	110
   672  007B20  6E11               	movwf	writeICSP@dataBytes+1,c
   673  007B22  0EF8               	movlw	248
   674  007B24  6E10               	movwf	writeICSP@dataBytes,c
   675  007B26  ECCD  F03B         	call	_writeICSP	;wreg free
   676                           
   677                           ;FlashProg.c: 130: writeICSP(0x0, 0x0e00|highAddr);
   678  007B2A  0E00               	movlw	0
   679  007B2C  6E0F               	movwf	writeICSP@commandByte+1,c
   680  007B2E  0E00               	movlw	0
   681  007B30  6E0E               	movwf	writeICSP@commandByte,c
   682  007B32  0E00               	movlw	0
   683  007B34  101E               	iorwf	tableSelect@highAddr,w,c
   684  007B36  6E10               	movwf	writeICSP@dataBytes,c
   685  007B38  0E0E               	movlw	14
   686  007B3A  101F               	iorwf	tableSelect@highAddr+1,w,c
   687  007B3C  6E11               	movwf	writeICSP@dataBytes+1,c
   688  007B3E  ECCD  F03B         	call	_writeICSP	;wreg free
   689                           
   690                           ;FlashProg.c: 131: writeICSP(0x0, 0x6ef7);
   691  007B42  0E00               	movlw	0
   692  007B44  6E0F               	movwf	writeICSP@commandByte+1,c
   693  007B46  0E00               	movlw	0
   694  007B48  6E0E               	movwf	writeICSP@commandByte,c
   695  007B4A  0E6E               	movlw	110
   696  007B4C  6E11               	movwf	writeICSP@dataBytes+1,c
   697  007B4E  0EF7               	movlw	247
   698  007B50  6E10               	movwf	writeICSP@dataBytes,c
   699  007B52  ECCD  F03B         	call	_writeICSP	;wreg free
   700                           
   701                           ;FlashProg.c: 132: writeICSP(0x0, 0x0e00|lowAddr);
   702  007B56  0E00               	movlw	0
   703  007B58  6E0F               	movwf	writeICSP@commandByte+1,c
   704  007B5A  0E00               	movlw	0
   705  007B5C  6E0E               	movwf	writeICSP@commandByte,c
   706  007B5E  0E00               	movlw	0
   707  007B60  1022               	iorwf	tableSelect@lowAddr,w,c
   708  007B62  6E10               	movwf	writeICSP@dataBytes,c
   709  007B64  0E0E               	movlw	14
   710  007B66  1023               	iorwf	tableSelect@lowAddr+1,w,c
   711  007B68  6E11               	movwf	writeICSP@dataBytes+1,c
   712  007B6A  ECCD  F03B         	call	_writeICSP	;wreg free
   713                           
   714                           ;FlashProg.c: 133: writeICSP(0x0, 0x6ef6);
   715  007B6E  0E00               	movlw	0
   716  007B70  6E0F               	movwf	writeICSP@commandByte+1,c
   717  007B72  0E00               	movlw	0
   718  007B74  6E0E               	movwf	writeICSP@commandByte,c
   719  007B76  0E6E               	movlw	110
   720  007B78  6E11               	movwf	writeICSP@dataBytes+1,c
   721  007B7A  0EF6               	movlw	246
   722  007B7C  6E10               	movwf	writeICSP@dataBytes,c
   723  007B7E  ECCD  F03B         	call	_writeICSP	;wreg free
   724  007B82  0012               	return	
   725  007B84                     __end_of_tableSelect:
   726                           	opt stack 0
   727                           wreg	equ	0xFE8
   728                           status	equ	0xFD8
   729                           
   730 ;; *************** function _read2Byte *****************
   731 ;; Defined at:
   732 ;;		line 153 in file "../src/PIC18/FlashProg.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;		None
   735 ;; Auto vars:     Size  Location     Type
   736 ;;  data            2   22[COMRAM] unsigned int 
   737 ;;  firstData       2   20[COMRAM] unsigned int 
   738 ;; Return value:  Size  Location     Type
   739 ;;                  2   18[COMRAM] unsigned int 
   740 ;; Registers used:
   741 ;;		wreg, status,2, status,0, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   747 ;;      Params:         2       0       0       0       0       0       0
   748 ;;      Locals:         4       0       0       0       0       0       0
   749 ;;      Temps:          0       0       0       0       0       0       0
   750 ;;      Totals:         6       0       0       0       0       0       0
   751 ;;Total ram usage:        6 bytes
   752 ;; Hardware stack levels used:    1
   753 ;; Hardware stack levels required when called:    4
   754 ;; This function calls:
   755 ;;		_readFirstByte
   756 ;;		_readICSP
   757 ;; This function is called by:
   758 ;;		_main
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text4
   763  0077EE                     __ptext4:
   764                           	opt stack 0
   765  0077EE                     _read2Byte:
   766                           	opt stack 25
   767                           
   768                           ;FlashProg.c: 154: uint16 data;
   769                           ;FlashProg.c: 155: uint16 firstData;
   770                           ;FlashProg.c: 157: data = readICSP();
   771                           
   772                           ;incstack = 0
   773  0077EE  EC30  F03C         	call	_readICSP	;wreg free
   774  0077F2  C00F  F017         	movff	?_readICSP,read2Byte@data
   775  0077F6  C010  F018         	movff	?_readICSP+1,read2Byte@data+1
   776                           
   777                           ;FlashProg.c: 158: firstData = readFirstByte();
   778  0077FA  EC53  F03C         	call	_readFirstByte	;wreg free
   779  0077FE  C00F  F015         	movff	?_readFirstByte,read2Byte@firstData
   780  007802  C010  F016         	movff	?_readFirstByte+1,read2Byte@firstData+1
   781                           
   782                           ;FlashProg.c: 160: data = firstData|data;
   783  007806  5017               	movf	read2Byte@data,w,c
   784  007808  1015               	iorwf	read2Byte@firstData,w,c
   785  00780A  6E17               	movwf	read2Byte@data,c
   786  00780C  5018               	movf	read2Byte@data+1,w,c
   787  00780E  1016               	iorwf	read2Byte@firstData+1,w,c
   788  007810  6E18               	movwf	read2Byte@data+1,c
   789                           
   790                           ;FlashProg.c: 162: return data;
   791  007812  C017  F013         	movff	read2Byte@data,?_read2Byte
   792  007816  C018  F014         	movff	read2Byte@data+1,?_read2Byte+1
   793  00781A  0012               	return	
   794  00781C                     __end_of_read2Byte:
   795                           	opt stack 0
   796                           wreg	equ	0xFE8
   797                           status	equ	0xFD8
   798                           
   799 ;; *************** function _readICSP *****************
   800 ;; Defined at:
   801 ;;		line 25 in file "../src/PIC18/ICSP.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;		None
   804 ;; Auto vars:     Size  Location     Type
   805 ;;  data            2   16[COMRAM] unsigned int 
   806 ;; Return value:  Size  Location     Type
   807 ;;                  2   14[COMRAM] unsigned int 
   808 ;; Registers used:
   809 ;;		wreg, status,2, status,0, cstack
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   815 ;;      Params:         2       0       0       0       0       0       0
   816 ;;      Locals:         2       0       0       0       0       0       0
   817 ;;      Temps:          0       0       0       0       0       0       0
   818 ;;      Totals:         4       0       0       0       0       0       0
   819 ;;Total ram usage:        4 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; Hardware stack levels required when called:    3
   822 ;; This function calls:
   823 ;;		_readBits
   824 ;;		_writeBits
   825 ;; This function is called by:
   826 ;;		_read2Byte
   827 ;;		_readDeviceID1
   828 ;;		_readDeviceID2
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           	psect	text5
   833  007860                     __ptext5:
   834                           	opt stack 0
   835  007860                     _readICSP:
   836                           	opt stack 25
   837                           
   838                           ;ICSP.c: 26: uint16 data;
   839                           ;ICSP.c: 27: writeBits(9, 4);
   840                           
   841                           ;incstack = 0
   842  007860  0E00               	movlw	0
   843  007862  6E06               	movwf	writeBits@pattern+1,c
   844  007864  0E09               	movlw	9
   845  007866  6E05               	movwf	writeBits@pattern,c
   846  007868  0E00               	movlw	0
   847  00786A  6E08               	movwf	writeBits@bitsToWrite+1,c
   848  00786C  0E04               	movlw	4
   849  00786E  6E07               	movwf	writeBits@bitsToWrite,c
   850  007870  EC0E  F03C         	call	_writeBits	;wreg free
   851                           
   852                           ;ICSP.c: 28: writeBits(0, 8);
   853  007874  0E00               	movlw	0
   854  007876  6E06               	movwf	writeBits@pattern+1,c
   855  007878  0E00               	movlw	0
   856  00787A  6E05               	movwf	writeBits@pattern,c
   857  00787C  0E00               	movlw	0
   858  00787E  6E08               	movwf	writeBits@bitsToWrite+1,c
   859  007880  0E08               	movlw	8
   860  007882  6E07               	movwf	writeBits@bitsToWrite,c
   861  007884  EC0E  F03C         	call	_writeBits	;wreg free
   862                           
   863                           ;ICSP.c: 29: data = readBits(8);
   864  007888  0E00               	movlw	0
   865  00788A  6E09               	movwf	readBits@bitsToRead+1,c
   866  00788C  0E08               	movlw	8
   867  00788E  6E08               	movwf	readBits@bitsToRead,c
   868  007890  EC79  F03C         	call	_readBits	;wreg free
   869  007894  C008  F011         	movff	?_readBits,readICSP@data
   870  007898  C009  F012         	movff	?_readBits+1,readICSP@data+1
   871                           
   872                           ;ICSP.c: 31: return data;
   873  00789C  C011  F00F         	movff	readICSP@data,?_readICSP
   874  0078A0  C012  F010         	movff	readICSP@data+1,?_readICSP+1
   875  0078A4  0012               	return	
   876  0078A6                     __end_of_readICSP:
   877                           	opt stack 0
   878                           wreg	equ	0xFE8
   879                           status	equ	0xFD8
   880                           
   881 ;; *************** function _readFirstByte *****************
   882 ;; Defined at:
   883 ;;		line 33 in file "../src/PIC18/ICSP.c"
   884 ;; Parameters:    Size  Location     Type
   885 ;;		None
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  data            2   16[COMRAM] unsigned int 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  2   14[COMRAM] unsigned int 
   890 ;; Registers used:
   891 ;;		wreg, status,2, status,0, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   897 ;;      Params:         2       0       0       0       0       0       0
   898 ;;      Locals:         2       0       0       0       0       0       0
   899 ;;      Temps:          0       0       0       0       0       0       0
   900 ;;      Totals:         4       0       0       0       0       0       0
   901 ;;Total ram usage:        4 bytes
   902 ;; Hardware stack levels used:    1
   903 ;; Hardware stack levels required when called:    3
   904 ;; This function calls:
   905 ;;		_readBits
   906 ;;		_writeBits
   907 ;; This function is called by:
   908 ;;		_read2Byte
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           	psect	text6
   913  0078A6                     __ptext6:
   914                           	opt stack 0
   915  0078A6                     _readFirstByte:
   916                           	opt stack 25
   917                           
   918                           ;ICSP.c: 34: uint16 data;
   919                           ;ICSP.c: 35: writeBits(9, 4);
   920                           
   921                           ;incstack = 0
   922  0078A6  0E00               	movlw	0
   923  0078A8  6E06               	movwf	writeBits@pattern+1,c
   924  0078AA  0E09               	movlw	9
   925  0078AC  6E05               	movwf	writeBits@pattern,c
   926  0078AE  0E00               	movlw	0
   927  0078B0  6E08               	movwf	writeBits@bitsToWrite+1,c
   928  0078B2  0E04               	movlw	4
   929  0078B4  6E07               	movwf	writeBits@bitsToWrite,c
   930  0078B6  EC0E  F03C         	call	_writeBits	;wreg free
   931                           
   932                           ;ICSP.c: 36: writeBits(0, 8);
   933  0078BA  0E00               	movlw	0
   934  0078BC  6E06               	movwf	writeBits@pattern+1,c
   935  0078BE  0E00               	movlw	0
   936  0078C0  6E05               	movwf	writeBits@pattern,c
   937  0078C2  0E00               	movlw	0
   938  0078C4  6E08               	movwf	writeBits@bitsToWrite+1,c
   939  0078C6  0E08               	movlw	8
   940  0078C8  6E07               	movwf	writeBits@bitsToWrite,c
   941  0078CA  EC0E  F03C         	call	_writeBits	;wreg free
   942                           
   943                           ;ICSP.c: 37: data = readBits(8);
   944  0078CE  0E00               	movlw	0
   945  0078D0  6E09               	movwf	readBits@bitsToRead+1,c
   946  0078D2  0E08               	movlw	8
   947  0078D4  6E08               	movwf	readBits@bitsToRead,c
   948  0078D6  EC79  F03C         	call	_readBits	;wreg free
   949  0078DA  C008  F011         	movff	?_readBits,readFirstByte@data
   950  0078DE  C009  F012         	movff	?_readBits+1,readFirstByte@data+1
   951                           
   952                           ;ICSP.c: 38: data = data<<8;
   953  0078E2  5011               	movf	readFirstByte@data,w,c
   954  0078E4  6E12               	movwf	readFirstByte@data+1,c
   955  0078E6  6A11               	clrf	readFirstByte@data,c
   956                           
   957                           ;ICSP.c: 39: return data;
   958  0078E8  C011  F00F         	movff	readFirstByte@data,?_readFirstByte
   959  0078EC  C012  F010         	movff	readFirstByte@data+1,?_readFirstByte+1
   960  0078F0  0012               	return	
   961  0078F2                     __end_of_readFirstByte:
   962                           	opt stack 0
   963                           wreg	equ	0xFE8
   964                           status	equ	0xFD8
   965                           
   966 ;; *************** function _readBits *****************
   967 ;; Defined at:
   968 ;;		line 52 in file "../src/PIC18/ICSP.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;  bitsToRead      2    7[COMRAM] int 
   971 ;; Auto vars:     Size  Location     Type
   972 ;;  data            2   12[COMRAM] unsigned int 
   973 ;;  i               2   10[COMRAM] int 
   974 ;; Return value:  Size  Location     Type
   975 ;;                  2    7[COMRAM] unsigned int 
   976 ;; Registers used:
   977 ;;		wreg, status,2, status,0, cstack
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 0/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   983 ;;      Params:         2       0       0       0       0       0       0
   984 ;;      Locals:         4       0       0       0       0       0       0
   985 ;;      Temps:          1       0       0       0       0       0       0
   986 ;;      Totals:         7       0       0       0       0       0       0
   987 ;;Total ram usage:        7 bytes
   988 ;; Hardware stack levels used:    1
   989 ;; Hardware stack levels required when called:    2
   990 ;; This function calls:
   991 ;;		_readBit
   992 ;; This function is called by:
   993 ;;		_readICSP
   994 ;;		_readFirstByte
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text7
   999  0078F2                     __ptext7:
  1000                           	opt stack 0
  1001  0078F2                     _readBits:
  1002                           	opt stack 25
  1003                           
  1004                           ;ICSP.c: 53: int i=0;
  1005                           
  1006                           ;incstack = 0
  1007  0078F2  0E00               	movlw	0
  1008  0078F4  6E0C               	movwf	readBits@i+1,c
  1009  0078F6  0E00               	movlw	0
  1010  0078F8  6E0B               	movwf	readBits@i,c
  1011                           
  1012                           ;ICSP.c: 54: uint16 data = 0;
  1013  0078FA  0E00               	movlw	0
  1014  0078FC  6E0E               	movwf	readBits@data+1,c
  1015  0078FE  0E00               	movlw	0
  1016  007900  6E0D               	movwf	readBits@data,c
  1017                           
  1018                           ;ICSP.c: 56: (TRISDbits.TRISD4 = 1);
  1019  007902  8895               	bsf	3989,4,c	;volatile
  1020                           
  1021                           ;ICSP.c: 58: while(i < bitsToRead){
  1022  007904  D013               	goto	l755
  1023  007906                     l751:
  1024                           
  1025                           ;ICSP.c: 59: data = (readBit()<< i)|data;
  1026  007906  C00B  F00A         	movff	readBits@i,??_readBits
  1027  00790A  ECBE  F03B         	call	_readBit	;wreg free
  1028  00790E  2A0A               	incf	??_readBits,f,c
  1029  007910  D003               	goto	u54
  1030  007912                     u55:
  1031  007912  90D8               	bcf	status,0,c
  1032  007914  3604               	rlcf	?_readBit,f,c
  1033  007916  3605               	rlcf	?_readBit+1,f,c
  1034  007918                     u54:
  1035  007918  2E0A               	decfsz	??_readBits,f,c
  1036  00791A  D7FB               	goto	u55
  1037  00791C  500D               	movf	readBits@data,w,c
  1038  00791E  1004               	iorwf	?_readBit,w,c
  1039  007920  6E0D               	movwf	readBits@data,c
  1040  007922  500E               	movf	readBits@data+1,w,c
  1041  007924  1005               	iorwf	?_readBit+1,w,c
  1042  007926  6E0E               	movwf	readBits@data+1,c
  1043                           
  1044                           ;ICSP.c: 60: i++;
  1045  007928  4A0B               	infsnz	readBits@i,f,c
  1046  00792A  2A0C               	incf	readBits@i+1,f,c
  1047  00792C                     l755:
  1048  00792C  500C               	movf	readBits@i+1,w,c
  1049  00792E  0A80               	xorlw	128
  1050  007930  6E0A               	movwf	??_readBits& (0+255),c
  1051  007932  5008               	movf	readBits@bitsToRead,w,c
  1052  007934  5C0B               	subwf	readBits@i,w,c
  1053  007936  5009               	movf	readBits@bitsToRead+1,w,c
  1054  007938  0A80               	xorlw	128
  1055  00793A  580A               	subwfb	??_readBits& (0+255),w,c
  1056  00793C  A0D8               	btfss	status,0,c
  1057  00793E  D7E3               	goto	l751
  1058                           
  1059                           ;ICSP.c: 61: }
  1060                           ;ICSP.c: 62: return data;
  1061  007940  C00D  F008         	movff	readBits@data,?_readBits
  1062  007944  C00E  F009         	movff	readBits@data+1,?_readBits+1
  1063  007948  0012               	return	
  1064  00794A                     __end_of_readBits:
  1065                           	opt stack 0
  1066                           wreg	equ	0xFE8
  1067                           status	equ	0xFD8
  1068                           
  1069 ;; *************** function _readBit *****************
  1070 ;; Defined at:
  1071 ;;		line 44 in file "../src/PIC18/ICSP.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;		None
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;  data            2    5[COMRAM] unsigned int 
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  2    3[COMRAM] unsigned int 
  1078 ;; Registers used:
  1079 ;;		wreg, status,2, cstack
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1085 ;;      Params:         2       0       0       0       0       0       0
  1086 ;;      Locals:         2       0       0       0       0       0       0
  1087 ;;      Temps:          0       0       0       0       0       0       0
  1088 ;;      Totals:         4       0       0       0       0       0       0
  1089 ;;Total ram usage:        4 bytes
  1090 ;; Hardware stack levels used:    1
  1091 ;; Hardware stack levels required when called:    1
  1092 ;; This function calls:
  1093 ;;		_PGC_high
  1094 ;;		_PGC_low
  1095 ;;		_readPGD
  1096 ;; This function is called by:
  1097 ;;		_readBits
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           	psect	text8
  1102  00777C                     __ptext8:
  1103                           	opt stack 0
  1104  00777C                     _readBit:
  1105                           	opt stack 25
  1106                           
  1107                           ;ICSP.c: 45: uint16 data;
  1108                           ;ICSP.c: 46: PGC_high();
  1109                           
  1110                           ;incstack = 0
  1111  00777C  EC6D  F03B         	call	_PGC_high	;wreg free
  1112                           
  1113                           ;ICSP.c: 47: data = readPGD();
  1114  007780  EC9E  F03B         	call	_readPGD	;wreg free
  1115  007784  C001  F006         	movff	?_readPGD,readBit@data
  1116  007788  C002  F007         	movff	?_readPGD+1,readBit@data+1
  1117                           
  1118                           ;ICSP.c: 48: PGC_low();
  1119  00778C  EC6F  F03B         	call	_PGC_low	;wreg free
  1120                           
  1121                           ;ICSP.c: 49: return data;
  1122  007790  C006  F004         	movff	readBit@data,?_readBit
  1123  007794  C007  F005         	movff	readBit@data+1,?_readBit+1
  1124  007798  0012               	return	
  1125  00779A                     __end_of_readBit:
  1126                           	opt stack 0
  1127                           wreg	equ	0xFE8
  1128                           status	equ	0xFD8
  1129                           
  1130 ;; *************** function _readPGD *****************
  1131 ;; Defined at:
  1132 ;;		line 6 in file "../src/PIC18/FlashProg.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;		None
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;		None
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  2    0[COMRAM] unsigned int 
  1139 ;; Registers used:
  1140 ;;		wreg, status,2
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1146 ;;      Params:         2       0       0       0       0       0       0
  1147 ;;      Locals:         0       0       0       0       0       0       0
  1148 ;;      Temps:          1       0       0       0       0       0       0
  1149 ;;      Totals:         3       0       0       0       0       0       0
  1150 ;;Total ram usage:        3 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_readBit
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text9
  1160  00773C                     __ptext9:
  1161                           	opt stack 0
  1162  00773C                     _readPGD:
  1163                           	opt stack 25
  1164                           
  1165                           ;FlashProg.c: 7: return PORTDbits.RD4;
  1166                           
  1167                           ;incstack = 0
  1168  00773C  A883               	btfss	3971,4,c	;volatile
  1169  00773E  D003               	goto	u10
  1170  007740  6A03               	clrf	??_readPGD& (0+255),c
  1171  007742  2A03               	incf	??_readPGD& (0+255),f,c
  1172  007744  D001               	goto	u18
  1173  007746                     u10:
  1174  007746  6A03               	clrf	??_readPGD& (0+255),c
  1175  007748                     u18:
  1176  007748  5003               	movf	??_readPGD,w,c
  1177  00774A  6E01               	movwf	?_readPGD,c
  1178  00774C  6A02               	clrf	?_readPGD+1,c
  1179  00774E  0012               	return	
  1180  007750                     __end_of_readPGD:
  1181                           	opt stack 0
  1182                           wreg	equ	0xFE8
  1183                           status	equ	0xFD8
  1184                           
  1185 ;; *************** function _exit_HVP *****************
  1186 ;; Defined at:
  1187 ;;		line 57 in file "../src/PIC18/FlashProg.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;		None
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;		None
  1192 ;; Return value:  Size  Location     Type
  1193 ;;		None               void
  1194 ;; Registers used:
  1195 ;;		wreg, status,2, cstack
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1201 ;;      Params:         0       0       0       0       0       0       0
  1202 ;;      Locals:         0       0       0       0       0       0       0
  1203 ;;      Temps:          0       0       0       0       0       0       0
  1204 ;;      Totals:         0       0       0       0       0       0       0
  1205 ;;Total ram usage:        0 bytes
  1206 ;; Hardware stack levels used:    1
  1207 ;; Hardware stack levels required when called:    2
  1208 ;; This function calls:
  1209 ;;		_MCLR_low
  1210 ;;		_PGC_low
  1211 ;;		_PGD_low
  1212 ;;		_PGM_low
  1213 ;; This function is called by:
  1214 ;;		_main
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text10
  1219  00772A                     __ptext10:
  1220                           	opt stack 0
  1221  00772A                     _exit_HVP:
  1222                           	opt stack 27
  1223                           
  1224                           ;FlashProg.c: 58: PGC_low();
  1225                           
  1226                           ;incstack = 0
  1227  00772A  EC6F  F03B         	call	_PGC_low	;wreg free
  1228                           
  1229                           ;FlashProg.c: 59: PGD_low();
  1230  00772E  EC85  F03B         	call	_PGD_low	;wreg free
  1231                           
  1232                           ;FlashProg.c: 60: PGM_low();
  1233  007732  EC75  F03B         	call	_PGM_low	;wreg free
  1234                           
  1235                           ;FlashProg.c: 61: MCLR_low();
  1236  007736  EC8C  F03B         	call	_MCLR_low	;wreg free
  1237  00773A  0012               	return	
  1238  00773C                     __end_of_exit_HVP:
  1239                           	opt stack 0
  1240                           wreg	equ	0xFE8
  1241                           status	equ	0xFD8
  1242                           
  1243 ;; *************** function _PGM_low *****************
  1244 ;; Defined at:
  1245 ;;		line 30 in file "../src/PIC18/FlashProg.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;		None
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;		None
  1250 ;; Return value:  Size  Location     Type
  1251 ;;		None               void
  1252 ;; Registers used:
  1253 ;;		None
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1259 ;;      Params:         0       0       0       0       0       0       0
  1260 ;;      Locals:         0       0       0       0       0       0       0
  1261 ;;      Temps:          0       0       0       0       0       0       0
  1262 ;;      Totals:         0       0       0       0       0       0       0
  1263 ;;Total ram usage:        0 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; This function calls:
  1266 ;;		Nothing
  1267 ;; This function is called by:
  1268 ;;		_exit_HVP
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           	psect	text11
  1273  0076EA                     __ptext11:
  1274                           	opt stack 0
  1275  0076EA                     _PGM_low:
  1276                           	opt stack 28
  1277                           
  1278                           ;FlashProg.c: 31: PORTDbits.RD6 = 0;
  1279                           
  1280                           ;incstack = 0
  1281  0076EA  9C83               	bcf	3971,6,c	;volatile
  1282  0076EC  0012               	return	
  1283  0076EE                     __end_of_PGM_low:
  1284                           	opt stack 0
  1285                           wreg	equ	0xFE8
  1286                           status	equ	0xFD8
  1287                           
  1288 ;; *************** function _enter_HVP *****************
  1289 ;; Defined at:
  1290 ;;		line 49 in file "../src/PIC18/FlashProg.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;		None
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;		None
  1295 ;; Return value:  Size  Location     Type
  1296 ;;		None               void
  1297 ;; Registers used:
  1298 ;;		wreg, status,2, cstack
  1299 ;; Tracked objects:
  1300 ;;		On entry : 0/0
  1301 ;;		On exit  : 0/0
  1302 ;;		Unchanged: 0/0
  1303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1304 ;;      Params:         0       0       0       0       0       0       0
  1305 ;;      Locals:         0       0       0       0       0       0       0
  1306 ;;      Temps:          0       0       0       0       0       0       0
  1307 ;;      Totals:         0       0       0       0       0       0       0
  1308 ;;Total ram usage:        0 bytes
  1309 ;; Hardware stack levels used:    1
  1310 ;; Hardware stack levels required when called:    2
  1311 ;; This function calls:
  1312 ;;		_MCLR_high
  1313 ;;		_MCLR_low
  1314 ;;		_PGC_low
  1315 ;;		_PGD_low
  1316 ;;		_PGM_high
  1317 ;; This function is called by:
  1318 ;;		_main
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text12
  1323  007766                     __ptext12:
  1324                           	opt stack 0
  1325  007766                     _enter_HVP:
  1326                           	opt stack 27
  1327                           
  1328                           ;FlashProg.c: 50: MCLR_low();
  1329                           
  1330                           ;incstack = 0
  1331  007766  EC8C  F03B         	call	_MCLR_low	;wreg free
  1332                           
  1333                           ;FlashProg.c: 51: PGC_low();
  1334  00776A  EC6F  F03B         	call	_PGC_low	;wreg free
  1335                           
  1336                           ;FlashProg.c: 52: PGD_low();
  1337  00776E  EC85  F03B         	call	_PGD_low	;wreg free
  1338                           
  1339                           ;FlashProg.c: 53: PGM_high();
  1340  007772  EC73  F03B         	call	_PGM_high	;wreg free
  1341                           
  1342                           ;FlashProg.c: 54: MCLR_high();
  1343  007776  EC71  F03B         	call	_MCLR_high	;wreg free
  1344  00777A  0012               	return	
  1345  00777C                     __end_of_enter_HVP:
  1346                           	opt stack 0
  1347                           wreg	equ	0xFE8
  1348                           status	equ	0xFD8
  1349                           
  1350 ;; *************** function _PGM_high *****************
  1351 ;; Defined at:
  1352 ;;		line 34 in file "../src/PIC18/FlashProg.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;		None
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;		None
  1357 ;; Return value:  Size  Location     Type
  1358 ;;		None               void
  1359 ;; Registers used:
  1360 ;;		None
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1366 ;;      Params:         0       0       0       0       0       0       0
  1367 ;;      Locals:         0       0       0       0       0       0       0
  1368 ;;      Temps:          0       0       0       0       0       0       0
  1369 ;;      Totals:         0       0       0       0       0       0       0
  1370 ;;Total ram usage:        0 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; This function calls:
  1373 ;;		Nothing
  1374 ;; This function is called by:
  1375 ;;		_enter_HVP
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           	psect	text13
  1380  0076E6                     __ptext13:
  1381                           	opt stack 0
  1382  0076E6                     _PGM_high:
  1383                           	opt stack 28
  1384                           
  1385                           ;FlashProg.c: 35: PORTDbits.RD6 = 1;
  1386                           
  1387                           ;incstack = 0
  1388  0076E6  8C83               	bsf	3971,6,c	;volatile
  1389  0076E8  0012               	return	
  1390  0076EA                     __end_of_PGM_high:
  1391                           	opt stack 0
  1392                           wreg	equ	0xFE8
  1393                           status	equ	0xFD8
  1394                           
  1395 ;; *************** function _PGD_low *****************
  1396 ;; Defined at:
  1397 ;;		line 18 in file "../src/PIC18/FlashProg.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;		None
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;		None
  1402 ;; Return value:  Size  Location     Type
  1403 ;;		None               void
  1404 ;; Registers used:
  1405 ;;		wreg, status,2, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1411 ;;      Params:         0       0       0       0       0       0       0
  1412 ;;      Locals:         0       0       0       0       0       0       0
  1413 ;;      Temps:          0       0       0       0       0       0       0
  1414 ;;      Totals:         0       0       0       0       0       0       0
  1415 ;;Total ram usage:        0 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    1
  1418 ;; This function calls:
  1419 ;;		_writePGD
  1420 ;; This function is called by:
  1421 ;;		_enter_HVP
  1422 ;;		_exit_HVP
  1423 ;;		_writeTableThenIncremeant
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text14
  1428  00770A                     __ptext14:
  1429                           	opt stack 0
  1430  00770A                     _PGD_low:
  1431                           	opt stack 27
  1432                           
  1433                           ;FlashProg.c: 19: writePGD(0);
  1434                           
  1435                           ;incstack = 0
  1436  00770A  0E00               	movlw	0
  1437  00770C  6E02               	movwf	writePGD@data+1,c
  1438  00770E  0E00               	movlw	0
  1439  007710  6E01               	movwf	writePGD@data,c
  1440  007712  EC7F  F03B         	call	_writePGD	;wreg free
  1441  007716  0012               	return	
  1442  007718                     __end_of_PGD_low:
  1443                           	opt stack 0
  1444                           wreg	equ	0xFE8
  1445                           status	equ	0xFD8
  1446                           
  1447 ;; *************** function _MCLR_low *****************
  1448 ;; Defined at:
  1449 ;;		line 38 in file "../src/PIC18/FlashProg.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;		None               void
  1456 ;; Registers used:
  1457 ;;		wreg, status,2, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1463 ;;      Params:         0       0       0       0       0       0       0
  1464 ;;      Locals:         0       0       0       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0       0       0
  1466 ;;      Totals:         0       0       0       0       0       0       0
  1467 ;;Total ram usage:        0 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    1
  1470 ;; This function calls:
  1471 ;;		_writePGD
  1472 ;; This function is called by:
  1473 ;;		_enter_HVP
  1474 ;;		_exit_HVP
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           	psect	text15
  1479  007718                     __ptext15:
  1480                           	opt stack 0
  1481  007718                     _MCLR_low:
  1482                           	opt stack 27
  1483                           
  1484                           ;FlashProg.c: 39: PORTDbits.RD7 = 0;
  1485                           
  1486                           ;incstack = 0
  1487  007718  9E83               	bcf	3971,7,c	;volatile
  1488                           
  1489                           ;FlashProg.c: 41: writePGD(0);
  1490  00771A  0E00               	movlw	0
  1491  00771C  6E02               	movwf	writePGD@data+1,c
  1492  00771E  0E00               	movlw	0
  1493  007720  6E01               	movwf	writePGD@data,c
  1494  007722  EC7F  F03B         	call	_writePGD	;wreg free
  1495                           
  1496                           ;FlashProg.c: 42: PORTDbits.RD5 = 0;
  1497  007726  9A83               	bcf	3971,5,c	;volatile
  1498  007728  0012               	return	
  1499  00772A                     __end_of_MCLR_low:
  1500                           	opt stack 0
  1501                           wreg	equ	0xFE8
  1502                           status	equ	0xFD8
  1503                           
  1504 ;; *************** function _MCLR_high *****************
  1505 ;; Defined at:
  1506 ;;		line 45 in file "../src/PIC18/FlashProg.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;		None
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;		None
  1511 ;; Return value:  Size  Location     Type
  1512 ;;		None               void
  1513 ;; Registers used:
  1514 ;;		None
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1520 ;;      Params:         0       0       0       0       0       0       0
  1521 ;;      Locals:         0       0       0       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0       0       0
  1523 ;;      Totals:         0       0       0       0       0       0       0
  1524 ;;Total ram usage:        0 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; This function calls:
  1527 ;;		Nothing
  1528 ;; This function is called by:
  1529 ;;		_enter_HVP
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text16
  1534  0076E2                     __ptext16:
  1535                           	opt stack 0
  1536  0076E2                     _MCLR_high:
  1537                           	opt stack 28
  1538                           
  1539                           ;FlashProg.c: 46: PORTDbits.RD7 = 1;
  1540                           
  1541                           ;incstack = 0
  1542  0076E2  8E83               	bsf	3971,7,c	;volatile
  1543  0076E4  0012               	return	
  1544  0076E6                     __end_of_MCLR_high:
  1545                           	opt stack 0
  1546                           wreg	equ	0xFE8
  1547                           status	equ	0xFD8
  1548                           
  1549 ;; *************** function _enableWrite *****************
  1550 ;; Defined at:
  1551 ;;		line 112 in file "../src/PIC18/FlashProg.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;		None
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;		None
  1556 ;; Return value:  Size  Location     Type
  1557 ;;		None               void
  1558 ;; Registers used:
  1559 ;;		wreg, status,2, status,0, cstack
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1565 ;;      Params:         0       0       0       0       0       0       0
  1566 ;;      Locals:         0       0       0       0       0       0       0
  1567 ;;      Temps:          0       0       0       0       0       0       0
  1568 ;;      Totals:         0       0       0       0       0       0       0
  1569 ;;Total ram usage:        0 bytes
  1570 ;; Hardware stack levels used:    1
  1571 ;; Hardware stack levels required when called:    4
  1572 ;; This function calls:
  1573 ;;		_writeICSP
  1574 ;; This function is called by:
  1575 ;;		_main
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text17
  1580  0077C4                     __ptext17:
  1581                           	opt stack 0
  1582  0077C4                     _enableWrite:
  1583                           	opt stack 25
  1584                           
  1585                           ;FlashProg.c: 113: writeICSP(0x0, 0x8ea6);
  1586                           
  1587                           ;incstack = 0
  1588  0077C4  0E00               	movlw	0
  1589  0077C6  6E0F               	movwf	writeICSP@commandByte+1,c
  1590  0077C8  0E00               	movlw	0
  1591  0077CA  6E0E               	movwf	writeICSP@commandByte,c
  1592  0077CC  0E8E               	movlw	142
  1593  0077CE  6E11               	movwf	writeICSP@dataBytes+1,c
  1594  0077D0  0EA6               	movlw	166
  1595  0077D2  6E10               	movwf	writeICSP@dataBytes,c
  1596  0077D4  ECCD  F03B         	call	_writeICSP	;wreg free
  1597                           
  1598                           ;FlashProg.c: 114: writeICSP(0x0, 0x9ca6);
  1599  0077D8  0E00               	movlw	0
  1600  0077DA  6E0F               	movwf	writeICSP@commandByte+1,c
  1601  0077DC  0E00               	movlw	0
  1602  0077DE  6E0E               	movwf	writeICSP@commandByte,c
  1603  0077E0  0E9C               	movlw	156
  1604  0077E2  6E11               	movwf	writeICSP@dataBytes+1,c
  1605  0077E4  0EA6               	movlw	166
  1606  0077E6  6E10               	movwf	writeICSP@dataBytes,c
  1607  0077E8  ECCD  F03B         	call	_writeICSP	;wreg free
  1608  0077EC  0012               	return	
  1609  0077EE                     __end_of_enableWrite:
  1610                           	opt stack 0
  1611                           wreg	equ	0xFE8
  1612                           status	equ	0xFD8
  1613                           
  1614 ;; *************** function _bulkErase *****************
  1615 ;; Defined at:
  1616 ;;		line 65 in file "../src/PIC18/FlashProg.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;		None
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;  i               2   17[COMRAM] int 
  1621 ;; Return value:  Size  Location     Type
  1622 ;;		None               void
  1623 ;; Registers used:
  1624 ;;		wreg, status,2, status,0, cstack
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1630 ;;      Params:         0       0       0       0       0       0       0
  1631 ;;      Locals:         2       0       0       0       0       0       0
  1632 ;;      Temps:          0       0       0       0       0       0       0
  1633 ;;      Totals:         2       0       0       0       0       0       0
  1634 ;;Total ram usage:        2 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; Hardware stack levels required when called:    4
  1637 ;; This function calls:
  1638 ;;		_writeBits
  1639 ;;		_writeICSP
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text18
  1646  007B84                     __ptext18:
  1647                           	opt stack 0
  1648  007B84                     _bulkErase:
  1649                           	opt stack 25
  1650                           
  1651                           ;FlashProg.c: 66: int i = 0;
  1652                           
  1653                           ;incstack = 0
  1654  007B84  0E00               	movlw	0
  1655  007B86  6E13               	movwf	bulkErase@i+1,c
  1656  007B88  0E00               	movlw	0
  1657  007B8A  6E12               	movwf	bulkErase@i,c
  1658                           
  1659                           ;FlashProg.c: 67: writeICSP(0x0, 0x0e3c);
  1660  007B8C  0E00               	movlw	0
  1661  007B8E  6E0F               	movwf	writeICSP@commandByte+1,c
  1662  007B90  0E00               	movlw	0
  1663  007B92  6E0E               	movwf	writeICSP@commandByte,c
  1664  007B94  0E0E               	movlw	14
  1665  007B96  6E11               	movwf	writeICSP@dataBytes+1,c
  1666  007B98  0E3C               	movlw	60
  1667  007B9A  6E10               	movwf	writeICSP@dataBytes,c
  1668  007B9C  ECCD  F03B         	call	_writeICSP	;wreg free
  1669                           
  1670                           ;FlashProg.c: 68: writeICSP(0x0, 0x6ef8);
  1671  007BA0  0E00               	movlw	0
  1672  007BA2  6E0F               	movwf	writeICSP@commandByte+1,c
  1673  007BA4  0E00               	movlw	0
  1674  007BA6  6E0E               	movwf	writeICSP@commandByte,c
  1675  007BA8  0E6E               	movlw	110
  1676  007BAA  6E11               	movwf	writeICSP@dataBytes+1,c
  1677  007BAC  0EF8               	movlw	248
  1678  007BAE  6E10               	movwf	writeICSP@dataBytes,c
  1679  007BB0  ECCD  F03B         	call	_writeICSP	;wreg free
  1680                           
  1681                           ;FlashProg.c: 69: writeICSP(0x0, 0x0e00);
  1682  007BB4  0E00               	movlw	0
  1683  007BB6  6E0F               	movwf	writeICSP@commandByte+1,c
  1684  007BB8  0E00               	movlw	0
  1685  007BBA  6E0E               	movwf	writeICSP@commandByte,c
  1686  007BBC  0E0E               	movlw	14
  1687  007BBE  6E11               	movwf	writeICSP@dataBytes+1,c
  1688  007BC0  0E00               	movlw	0
  1689  007BC2  6E10               	movwf	writeICSP@dataBytes,c
  1690  007BC4  ECCD  F03B         	call	_writeICSP	;wreg free
  1691                           
  1692                           ;FlashProg.c: 70: writeICSP(0x0, 0x6ef7);
  1693  007BC8  0E00               	movlw	0
  1694  007BCA  6E0F               	movwf	writeICSP@commandByte+1,c
  1695  007BCC  0E00               	movlw	0
  1696  007BCE  6E0E               	movwf	writeICSP@commandByte,c
  1697  007BD0  0E6E               	movlw	110
  1698  007BD2  6E11               	movwf	writeICSP@dataBytes+1,c
  1699  007BD4  0EF7               	movlw	247
  1700  007BD6  6E10               	movwf	writeICSP@dataBytes,c
  1701  007BD8  ECCD  F03B         	call	_writeICSP	;wreg free
  1702                           
  1703                           ;FlashProg.c: 71: writeICSP(0x0, 0x0e05);
  1704  007BDC  0E00               	movlw	0
  1705  007BDE  6E0F               	movwf	writeICSP@commandByte+1,c
  1706  007BE0  0E00               	movlw	0
  1707  007BE2  6E0E               	movwf	writeICSP@commandByte,c
  1708  007BE4  0E0E               	movlw	14
  1709  007BE6  6E11               	movwf	writeICSP@dataBytes+1,c
  1710  007BE8  0E05               	movlw	5
  1711  007BEA  6E10               	movwf	writeICSP@dataBytes,c
  1712  007BEC  ECCD  F03B         	call	_writeICSP	;wreg free
  1713                           
  1714                           ;FlashProg.c: 72: writeICSP(0x0, 0x6ef6);
  1715  007BF0  0E00               	movlw	0
  1716  007BF2  6E0F               	movwf	writeICSP@commandByte+1,c
  1717  007BF4  0E00               	movlw	0
  1718  007BF6  6E0E               	movwf	writeICSP@commandByte,c
  1719  007BF8  0E6E               	movlw	110
  1720  007BFA  6E11               	movwf	writeICSP@dataBytes+1,c
  1721  007BFC  0EF6               	movlw	246
  1722  007BFE  6E10               	movwf	writeICSP@dataBytes,c
  1723  007C00  ECCD  F03B         	call	_writeICSP	;wreg free
  1724                           
  1725                           ;FlashProg.c: 73: writeICSP(0xc, 0x3f3f);
  1726  007C04  0E00               	movlw	0
  1727  007C06  6E0F               	movwf	writeICSP@commandByte+1,c
  1728  007C08  0E0C               	movlw	12
  1729  007C0A  6E0E               	movwf	writeICSP@commandByte,c
  1730  007C0C  0E3F               	movlw	63
  1731  007C0E  6E11               	movwf	writeICSP@dataBytes+1,c
  1732  007C10  0E3F               	movlw	63
  1733  007C12  6E10               	movwf	writeICSP@dataBytes,c
  1734  007C14  ECCD  F03B         	call	_writeICSP	;wreg free
  1735                           
  1736                           ;FlashProg.c: 74: writeICSP(0x0, 0x0e3c);
  1737  007C18  0E00               	movlw	0
  1738  007C1A  6E0F               	movwf	writeICSP@commandByte+1,c
  1739  007C1C  0E00               	movlw	0
  1740  007C1E  6E0E               	movwf	writeICSP@commandByte,c
  1741  007C20  0E0E               	movlw	14
  1742  007C22  6E11               	movwf	writeICSP@dataBytes+1,c
  1743  007C24  0E3C               	movlw	60
  1744  007C26  6E10               	movwf	writeICSP@dataBytes,c
  1745  007C28  ECCD  F03B         	call	_writeICSP	;wreg free
  1746                           
  1747                           ;FlashProg.c: 75: writeICSP(0x0, 0x6ef8);
  1748  007C2C  0E00               	movlw	0
  1749  007C2E  6E0F               	movwf	writeICSP@commandByte+1,c
  1750  007C30  0E00               	movlw	0
  1751  007C32  6E0E               	movwf	writeICSP@commandByte,c
  1752  007C34  0E6E               	movlw	110
  1753  007C36  6E11               	movwf	writeICSP@dataBytes+1,c
  1754  007C38  0EF8               	movlw	248
  1755  007C3A  6E10               	movwf	writeICSP@dataBytes,c
  1756  007C3C  ECCD  F03B         	call	_writeICSP	;wreg free
  1757                           
  1758                           ;FlashProg.c: 76: writeICSP(0x0, 0x0e00);
  1759  007C40  0E00               	movlw	0
  1760  007C42  6E0F               	movwf	writeICSP@commandByte+1,c
  1761  007C44  0E00               	movlw	0
  1762  007C46  6E0E               	movwf	writeICSP@commandByte,c
  1763  007C48  0E0E               	movlw	14
  1764  007C4A  6E11               	movwf	writeICSP@dataBytes+1,c
  1765  007C4C  0E00               	movlw	0
  1766  007C4E  6E10               	movwf	writeICSP@dataBytes,c
  1767  007C50  ECCD  F03B         	call	_writeICSP	;wreg free
  1768                           
  1769                           ;FlashProg.c: 77: writeICSP(0x0, 0x6ef7);
  1770  007C54  0E00               	movlw	0
  1771  007C56  6E0F               	movwf	writeICSP@commandByte+1,c
  1772  007C58  0E00               	movlw	0
  1773  007C5A  6E0E               	movwf	writeICSP@commandByte,c
  1774  007C5C  0E6E               	movlw	110
  1775  007C5E  6E11               	movwf	writeICSP@dataBytes+1,c
  1776  007C60  0EF7               	movlw	247
  1777  007C62  6E10               	movwf	writeICSP@dataBytes,c
  1778  007C64  ECCD  F03B         	call	_writeICSP	;wreg free
  1779                           
  1780                           ;FlashProg.c: 78: writeICSP(0x0, 0x0e04);
  1781  007C68  0E00               	movlw	0
  1782  007C6A  6E0F               	movwf	writeICSP@commandByte+1,c
  1783  007C6C  0E00               	movlw	0
  1784  007C6E  6E0E               	movwf	writeICSP@commandByte,c
  1785  007C70  0E0E               	movlw	14
  1786  007C72  6E11               	movwf	writeICSP@dataBytes+1,c
  1787  007C74  0E04               	movlw	4
  1788  007C76  6E10               	movwf	writeICSP@dataBytes,c
  1789  007C78  ECCD  F03B         	call	_writeICSP	;wreg free
  1790                           
  1791                           ;FlashProg.c: 79: writeICSP(0x0, 0x6ef6);
  1792  007C7C  0E00               	movlw	0
  1793  007C7E  6E0F               	movwf	writeICSP@commandByte+1,c
  1794  007C80  0E00               	movlw	0
  1795  007C82  6E0E               	movwf	writeICSP@commandByte,c
  1796  007C84  0E6E               	movlw	110
  1797  007C86  6E11               	movwf	writeICSP@dataBytes+1,c
  1798  007C88  0EF6               	movlw	246
  1799  007C8A  6E10               	movwf	writeICSP@dataBytes,c
  1800  007C8C  ECCD  F03B         	call	_writeICSP	;wreg free
  1801                           
  1802                           ;FlashProg.c: 80: writeICSP(0xc, 0x8f8f);
  1803  007C90  0E00               	movlw	0
  1804  007C92  6E0F               	movwf	writeICSP@commandByte+1,c
  1805  007C94  0E0C               	movlw	12
  1806  007C96  6E0E               	movwf	writeICSP@commandByte,c
  1807  007C98  0E8F               	movlw	143
  1808  007C9A  6E11               	movwf	writeICSP@dataBytes+1,c
  1809  007C9C  0E8F               	movlw	143
  1810  007C9E  6E10               	movwf	writeICSP@dataBytes,c
  1811  007CA0  ECCD  F03B         	call	_writeICSP	;wreg free
  1812                           
  1813                           ;FlashProg.c: 81: writeICSP(0x0, 0);
  1814  007CA4  0E00               	movlw	0
  1815  007CA6  6E0F               	movwf	writeICSP@commandByte+1,c
  1816  007CA8  0E00               	movlw	0
  1817  007CAA  6E0E               	movwf	writeICSP@commandByte,c
  1818  007CAC  0E00               	movlw	0
  1819  007CAE  6E11               	movwf	writeICSP@dataBytes+1,c
  1820  007CB0  0E00               	movlw	0
  1821  007CB2  6E10               	movwf	writeICSP@dataBytes,c
  1822  007CB4  ECCD  F03B         	call	_writeICSP	;wreg free
  1823                           
  1824                           ;FlashProg.c: 82: writeBits(0, 4);
  1825  007CB8  0E00               	movlw	0
  1826  007CBA  6E06               	movwf	writeBits@pattern+1,c
  1827  007CBC  0E00               	movlw	0
  1828  007CBE  6E05               	movwf	writeBits@pattern,c
  1829  007CC0  0E00               	movlw	0
  1830  007CC2  6E08               	movwf	writeBits@bitsToWrite+1,c
  1831  007CC4  0E04               	movlw	4
  1832  007CC6  6E07               	movwf	writeBits@bitsToWrite,c
  1833  007CC8  EC0E  F03C         	call	_writeBits	;wreg free
  1834                           
  1835                           ;FlashProg.c: 83: for(i = 0; i < 200 ; i++){}
  1836  007CCC  0E00               	movlw	0
  1837  007CCE  6E13               	movwf	bulkErase@i+1,c
  1838  007CD0  0E00               	movlw	0
  1839  007CD2  6E12               	movwf	bulkErase@i,c
  1840  007CD4  5013               	movf	bulkErase@i+1,w,c
  1841  007CD6  0A80               	xorlw	128
  1842  007CD8  0F80               	addlw	-128
  1843  007CDA  0EC8               	movlw	200
  1844  007CDC  B4D8               	btfsc	status,2,c
  1845  007CDE  5C12               	subwf	bulkErase@i,w,c
  1846  007CE0  B0D8               	btfsc	status,0,c
  1847  007CE2  D003               	goto	l841
  1848  007CE4  4A12               	infsnz	bulkErase@i,f,c
  1849  007CE6  2A13               	incf	bulkErase@i+1,f,c
  1850  007CE8  D7F5               	goto	L3
  1851  007CEA                     l841:
  1852                           
  1853                           ;FlashProg.c: 84: writeBits(0, 16);
  1854  007CEA  0E00               	movlw	0
  1855  007CEC  6E06               	movwf	writeBits@pattern+1,c
  1856  007CEE  0E00               	movlw	0
  1857  007CF0  6E05               	movwf	writeBits@pattern,c
  1858  007CF2  0E00               	movlw	0
  1859  007CF4  6E08               	movwf	writeBits@bitsToWrite+1,c
  1860  007CF6  0E10               	movlw	16
  1861  007CF8  6E07               	movwf	writeBits@bitsToWrite,c
  1862  007CFA  EC0E  F03C         	call	_writeBits	;wreg free
  1863  007CFE  0012               	return	
  1864  007D00                     __end_of_bulkErase:
  1865                           	opt stack 0
  1866                           wreg	equ	0xFE8
  1867                           status	equ	0xFD8
  1868                           
  1869 ;; *************** function _writeICSP *****************
  1870 ;; Defined at:
  1871 ;;		line 5 in file "../src/PIC18/ICSP.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  commandByte     2   13[COMRAM] unsigned int 
  1874 ;;  dataBytes       2   15[COMRAM] unsigned int 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;		None               void
  1879 ;; Registers used:
  1880 ;;		wreg, status,2, status,0, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1886 ;;      Params:         4       0       0       0       0       0       0
  1887 ;;      Locals:         0       0       0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0
  1889 ;;      Totals:         4       0       0       0       0       0       0
  1890 ;;Total ram usage:        4 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    3
  1893 ;; This function calls:
  1894 ;;		_writeBits
  1895 ;; This function is called by:
  1896 ;;		_bulkErase
  1897 ;;		_enableWrite
  1898 ;;		_tableSelect
  1899 ;;		_writeTableThenIncremeant
  1900 ;;		_readDeviceID1
  1901 ;;		_readDeviceID2
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           	psect	text19
  1906  00779A                     __ptext19:
  1907                           	opt stack 0
  1908  00779A                     _writeICSP:
  1909                           	opt stack 25
  1910                           
  1911                           ;ICSP.c: 6: writeBits(commandByte, 4);
  1912                           
  1913                           ;incstack = 0
  1914  00779A  C00E  F005         	movff	writeICSP@commandByte,writeBits@pattern
  1915  00779E  C00F  F006         	movff	writeICSP@commandByte+1,writeBits@pattern+1
  1916  0077A2  0E00               	movlw	0
  1917  0077A4  6E08               	movwf	writeBits@bitsToWrite+1,c
  1918  0077A6  0E04               	movlw	4
  1919  0077A8  6E07               	movwf	writeBits@bitsToWrite,c
  1920  0077AA  EC0E  F03C         	call	_writeBits	;wreg free
  1921                           
  1922                           ;ICSP.c: 7: writeBits(dataBytes, 16);
  1923  0077AE  C010  F005         	movff	writeICSP@dataBytes,writeBits@pattern
  1924  0077B2  C011  F006         	movff	writeICSP@dataBytes+1,writeBits@pattern+1
  1925  0077B6  0E00               	movlw	0
  1926  0077B8  6E08               	movwf	writeBits@bitsToWrite+1,c
  1927  0077BA  0E10               	movlw	16
  1928  0077BC  6E07               	movwf	writeBits@bitsToWrite,c
  1929  0077BE  EC0E  F03C         	call	_writeBits	;wreg free
  1930  0077C2  0012               	return	
  1931  0077C4                     __end_of_writeICSP:
  1932                           	opt stack 0
  1933                           wreg	equ	0xFE8
  1934                           status	equ	0xFD8
  1935                           
  1936 ;; *************** function _writeBits *****************
  1937 ;; Defined at:
  1938 ;;		line 16 in file "../src/PIC18/ICSP.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  pattern         2    4[COMRAM] unsigned int 
  1941 ;;  bitsToWrite     2    6[COMRAM] unsigned int 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  i               2   11[COMRAM] int 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;		None               void
  1946 ;; Registers used:
  1947 ;;		wreg, status,2, status,0, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1953 ;;      Params:         4       0       0       0       0       0       0
  1954 ;;      Locals:         2       0       0       0       0       0       0
  1955 ;;      Temps:          3       0       0       0       0       0       0
  1956 ;;      Totals:         9       0       0       0       0       0       0
  1957 ;;Total ram usage:        9 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    2
  1960 ;; This function calls:
  1961 ;;		_writeBit
  1962 ;; This function is called by:
  1963 ;;		_bulkErase
  1964 ;;		_writeTableThenIncremeant
  1965 ;;		_writeICSP
  1966 ;;		_readICSP
  1967 ;;		_readFirstByte
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text20
  1972  00781C                     __ptext20:
  1973                           	opt stack 0
  1974  00781C                     _writeBits:
  1975                           	opt stack 25
  1976                           
  1977                           ;ICSP.c: 17: int i=0;
  1978                           
  1979                           ;incstack = 0
  1980  00781C  0E00               	movlw	0
  1981  00781E  6E0D               	movwf	writeBits@i+1,c
  1982  007820  0E00               	movlw	0
  1983  007822  6E0C               	movwf	writeBits@i,c
  1984                           
  1985                           ;ICSP.c: 18: (TRISDbits.TRISD4 = 0);
  1986  007824  9895               	bcf	3989,4,c	;volatile
  1987                           
  1988                           ;ICSP.c: 19: while(i < bitsToWrite){
  1989  007826  D015               	goto	l745
  1990  007828                     l741:
  1991                           
  1992                           ;ICSP.c: 20: writeBit(((pattern>>i)&0x1));
  1993  007828  C00C  F009         	movff	writeBits@i,??_writeBits
  1994  00782C  C005  F00A         	movff	writeBits@pattern,??_writeBits+1
  1995  007830  C006  F00B         	movff	writeBits@pattern+1,??_writeBits+2
  1996  007834  2A09               	incf	??_writeBits,f,c
  1997  007836  D003               	goto	u34
  1998  007838                     u35:
  1999  007838  90D8               	bcf	status,0,c
  2000  00783A  320B               	rrcf	??_writeBits+2,f,c
  2001  00783C  320A               	rrcf	??_writeBits+1,f,c
  2002  00783E                     u34:
  2003  00783E  2E09               	decfsz	??_writeBits,f,c
  2004  007840  D7FB               	goto	u35
  2005  007842  0E01               	movlw	1
  2006  007844  140A               	andwf	??_writeBits+1,w,c
  2007  007846  6E03               	movwf	writeBit@bitToWrite,c
  2008  007848  6A04               	clrf	writeBit@bitToWrite+1,c
  2009  00784A  ECA8  F03B         	call	_writeBit	;wreg free
  2010                           
  2011                           ;ICSP.c: 21: i++;
  2012  00784E  4A0C               	infsnz	writeBits@i,f,c
  2013  007850  2A0D               	incf	writeBits@i+1,f,c
  2014  007852                     l745:
  2015  007852  5007               	movf	writeBits@bitsToWrite,w,c
  2016  007854  5C0C               	subwf	writeBits@i,w,c
  2017  007856  5008               	movf	writeBits@bitsToWrite+1,w,c
  2018  007858  580D               	subwfb	writeBits@i+1,w,c
  2019  00785A  B0D8               	btfsc	status,0,c
  2020  00785C  0012               	return	
  2021  00785E  D7E4               	goto	l741
  2022  007860                     __end_of_writeBits:
  2023                           	opt stack 0
  2024                           wreg	equ	0xFE8
  2025                           status	equ	0xFD8
  2026                           
  2027 ;; *************** function _writeBit *****************
  2028 ;; Defined at:
  2029 ;;		line 10 in file "../src/PIC18/ICSP.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;  bitToWrite      2    2[COMRAM] unsigned int 
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;		None
  2034 ;; Return value:  Size  Location     Type
  2035 ;;		None               void
  2036 ;; Registers used:
  2037 ;;		cstack
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2043 ;;      Params:         2       0       0       0       0       0       0
  2044 ;;      Locals:         0       0       0       0       0       0       0
  2045 ;;      Temps:          0       0       0       0       0       0       0
  2046 ;;      Totals:         2       0       0       0       0       0       0
  2047 ;;Total ram usage:        2 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    1
  2050 ;; This function calls:
  2051 ;;		_PGC_high
  2052 ;;		_PGC_low
  2053 ;;		_writePGD
  2054 ;; This function is called by:
  2055 ;;		_writeBits
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           	psect	text21
  2060  007750                     __ptext21:
  2061                           	opt stack 0
  2062  007750                     _writeBit:
  2063                           	opt stack 25
  2064                           
  2065                           ;ICSP.c: 11: PGC_high();
  2066                           
  2067                           ;incstack = 0
  2068  007750  EC6D  F03B         	call	_PGC_high	;wreg free
  2069                           
  2070                           ;ICSP.c: 12: writePGD(bitToWrite);
  2071  007754  C003  F001         	movff	writeBit@bitToWrite,writePGD@data
  2072  007758  C004  F002         	movff	writeBit@bitToWrite+1,writePGD@data+1
  2073  00775C  EC7F  F03B         	call	_writePGD	;wreg free
  2074                           
  2075                           ;ICSP.c: 13: PGC_low();
  2076  007760  EC6F  F03B         	call	_PGC_low	;wreg free
  2077  007764  0012               	return	
  2078  007766                     __end_of_writeBit:
  2079                           	opt stack 0
  2080                           wreg	equ	0xFE8
  2081                           status	equ	0xFD8
  2082                           
  2083 ;; *************** function _writePGD *****************
  2084 ;; Defined at:
  2085 ;;		line 10 in file "../src/PIC18/FlashProg.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;  data            2    0[COMRAM] int 
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;		None
  2090 ;; Return value:  Size  Location     Type
  2091 ;;		None               void
  2092 ;; Registers used:
  2093 ;;		None
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2099 ;;      Params:         2       0       0       0       0       0       0
  2100 ;;      Locals:         0       0       0       0       0       0       0
  2101 ;;      Temps:          0       0       0       0       0       0       0
  2102 ;;      Totals:         2       0       0       0       0       0       0
  2103 ;;Total ram usage:        2 bytes
  2104 ;; Hardware stack levels used:    1
  2105 ;; This function calls:
  2106 ;;		Nothing
  2107 ;; This function is called by:
  2108 ;;		_PGD_low
  2109 ;;		_MCLR_low
  2110 ;;		_writeBit
  2111 ;;		_PGD_high
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text22
  2116  0076FE                     __ptext22:
  2117                           	opt stack 0
  2118  0076FE                     _writePGD:
  2119                           	opt stack 25
  2120                           
  2121                           ;FlashProg.c: 11: PORTDbits.RD4 = data;
  2122                           
  2123                           ;incstack = 0
  2124  0076FE  B001               	btfsc	writePGD@data,0,c
  2125  007700  D002               	bra	u25
  2126  007702  9883               	bcf	3971,4,c	;volatile
  2127  007704  D001               	bra	u26
  2128  007706                     u25:
  2129  007706  8883               	bsf	3971,4,c	;volatile
  2130  007708                     u26:
  2131  007708  0012               	return	
  2132  00770A                     __end_of_writePGD:
  2133                           	opt stack 0
  2134                           wreg	equ	0xFE8
  2135                           status	equ	0xFD8
  2136                           
  2137 ;; *************** function _PGC_low *****************
  2138 ;; Defined at:
  2139 ;;		line 26 in file "../src/PIC18/FlashProg.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;		None
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;		None
  2144 ;; Return value:  Size  Location     Type
  2145 ;;		None               void
  2146 ;; Registers used:
  2147 ;;		None
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2153 ;;      Params:         0       0       0       0       0       0       0
  2154 ;;      Locals:         0       0       0       0       0       0       0
  2155 ;;      Temps:          0       0       0       0       0       0       0
  2156 ;;      Totals:         0       0       0       0       0       0       0
  2157 ;;Total ram usage:        0 bytes
  2158 ;; Hardware stack levels used:    1
  2159 ;; This function calls:
  2160 ;;		Nothing
  2161 ;; This function is called by:
  2162 ;;		_enter_HVP
  2163 ;;		_exit_HVP
  2164 ;;		_writeTableThenIncremeant
  2165 ;;		_writeBit
  2166 ;;		_readBit
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           	psect	text23
  2171  0076DE                     __ptext23:
  2172                           	opt stack 0
  2173  0076DE                     _PGC_low:
  2174                           	opt stack 25
  2175                           
  2176                           ;FlashProg.c: 27: PORTDbits.RD5 = 0;
  2177                           
  2178                           ;incstack = 0
  2179  0076DE  9A83               	bcf	3971,5,c	;volatile
  2180  0076E0  0012               	return	
  2181  0076E2                     __end_of_PGC_low:
  2182                           	opt stack 0
  2183                           wreg	equ	0xFE8
  2184                           status	equ	0xFD8
  2185                           
  2186 ;; *************** function _PGC_high *****************
  2187 ;; Defined at:
  2188 ;;		line 22 in file "../src/PIC18/FlashProg.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;		None
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;		None
  2193 ;; Return value:  Size  Location     Type
  2194 ;;		None               void
  2195 ;; Registers used:
  2196 ;;		None
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2202 ;;      Params:         0       0       0       0       0       0       0
  2203 ;;      Locals:         0       0       0       0       0       0       0
  2204 ;;      Temps:          0       0       0       0       0       0       0
  2205 ;;      Totals:         0       0       0       0       0       0       0
  2206 ;;Total ram usage:        0 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_writeTableThenIncremeant
  2212 ;;		_writeBit
  2213 ;;		_readBit
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217                           	psect	text24
  2218  0076DA                     __ptext24:
  2219                           	opt stack 0
  2220  0076DA                     _PGC_high:
  2221                           	opt stack 25
  2222                           
  2223                           ;FlashProg.c: 23: PORTDbits.RD5 = 1;
  2224                           
  2225                           ;incstack = 0
  2226  0076DA  8A83               	bsf	3971,5,c	;volatile
  2227  0076DC  0012               	return	
  2228  0076DE                     __end_of_PGC_high:
  2229                           	opt stack 0
  2230  0000                     wreg	equ	0xFE8
  2231                           status	equ	0xFD8
  2232                           wreg	equ	0xFE8
  2233                           status	equ	0xFD8
  2234                           
  2235                           	psect	rparam
  2236  0000                     wreg	equ	0xFE8
  2237                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     47      47
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_tableSelect
    _writeTableThenIncremeant->_writeICSP
    _tableSelect->_writeICSP
    _read2Byte->_readFirstByte
    _read2Byte->_readICSP
    _readICSP->_readBits
    _readFirstByte->_readBits
    _readBits->_readBit
    _readBit->_readPGD
    _PGD_low->_writePGD
    _MCLR_low->_writePGD
    _enableWrite->_writeICSP
    _bulkErase->_writeICSP
    _writeICSP->_writeBits
    _writeBits->_writeBit
    _writeBit->_writePGD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   19279
                                             37 COMRAM    10    10      0
                          _bulkErase
                        _enableWrite
                          _enter_HVP
                           _exit_HVP
                          _read2Byte
                        _tableSelect
                           _trisInit
           _writeTableThenIncremeant
 ---------------------------------------------------------------------------------
 (1) _writeTableThenIncremeant                             6     2      4    4803
                                             17 COMRAM     6     2      4
                           _PGC_high
                            _PGC_low
                            _PGD_low
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _trisInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tableSelect                                         20    16      4    3644
                                             17 COMRAM    20    16      4
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _read2Byte                                            6     4      2    2286
                                             18 COMRAM     6     4      2
                      _readFirstByte
                           _readICSP
 ---------------------------------------------------------------------------------
 (2) _readICSP                                             4     2      2    1113
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (2) _readFirstByte                                        4     2      2    1128
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (3) _readBits                                             7     5      2     158
                                              7 COMRAM     7     5      2
                            _readBit
 ---------------------------------------------------------------------------------
 (4) _readBit                                              4     2      2      15
                                              3 COMRAM     4     2      2
                           _PGC_high
                            _PGC_low
                            _readPGD
 ---------------------------------------------------------------------------------
 (5) _readPGD                                              3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _exit_HVP                                             0     0      0     302
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                            _PGM_low
 ---------------------------------------------------------------------------------
 (2) _PGM_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enter_HVP                                            0     0      0     302
                          _MCLR_high
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                           _PGM_high
 ---------------------------------------------------------------------------------
 (2) _PGM_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGD_low                                              0     0      0     151
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_low                                             0     0      0     151
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_high                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableWrite                                          0     0      0    3486
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _bulkErase                                            2     2      0    4456
                                             17 COMRAM     2     2      0
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (2) _writeICSP                                            4     0      4    3486
                                             13 COMRAM     4     0      4
                          _writeBits
 ---------------------------------------------------------------------------------
 (3) _writeBits                                            9     5      4     940
                                              4 COMRAM     9     5      4
                           _writeBit
 ---------------------------------------------------------------------------------
 (4) _writeBit                                             2     0      2     200
                                              2 COMRAM     2     0      2
                           _PGC_high
                            _PGC_low
                           _writePGD
 ---------------------------------------------------------------------------------
 (5) _writePGD                                             2     0      2     151
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _PGC_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _PGC_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bulkErase
     _writeBits
       _writeBit
         _PGC_high
         _PGC_low
         _writePGD
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enableWrite
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enter_HVP
     _MCLR_high
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_high
   _exit_HVP
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_low
   _read2Byte
     _readFirstByte
       _readBits
         _readBit
           _PGC_high
           _PGC_low
           _readPGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
     _readICSP
       _readBits
         _readBit
           _PGC_high
           _PGC_low
           _readPGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _tableSelect
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _trisInit
   _writeTableThenIncremeant
     _PGC_high
     _PGC_low
     _PGD_low
       _writePGD
     _writeBits
       _writeBit
         _PGC_high
         _PGC_low
         _writePGD
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     2F      2F       1       37.0%
STACK                0      0       0       2        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BANK5               EF      0       0      13        0.0%
ABS                  0      0       0      14        0.0%
BITBANK5            EF      0       0      15        0.0%
BIGRAM             5EE      0       0      16        0.0%
DATA                 0      0       0      17        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Nov 14 18:53:30 2014

 writeTableThenIncremeant@first2Byte 0012                                   u10 7746  
                                 u25 7706                                   u26 7708  
                                 u34 783E                                   u18 7748  
                                 u35 7838                                   u54 7918  
                                 u55 7912                                   u90 7AF0  
                                 u95 7AE6                  tableSelect@highAddr 001E  
                 tableSelect@lowAddr 0022                                  l136 7A9E  
                                l741 7828                                  l751 7906  
                                l745 7852                                  l841 7CEA  
                                l755 792C                                  l877 79AC  
                                l889 79CE                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                         __CFG_WDT$OFF 000000  
                      __CFG_DEBUG$ON 000000                      __end_of_PGC_low 76E2  
                       __CFG_PWRT$ON 000000                      __end_of_PGD_low 7718  
                    __end_of_PGM_low 76EE                                 _main 79E4  
                               start 0002                   __size_of_MCLR_high 0004  
                   __end_of_MCLR_low 772A                                ?_main 0001  
                   __end_of_PGC_high 76DE                     __end_of_PGM_high 76EA  
                    __end_of_readPGD 7750                      __end_of_readBit 779A  
           _writeTableThenIncremeant 794A                                main@a 0028  
                              main@b 002A                                main@c 002C  
                              main@d 002E                                main@i 0026  
               tableSelect@upperAddr 001A                         ?_tableSelect 0012  
                              status 000FD8                      __initialization 76EE  
writeTableThenIncremeant@second2Byte 0014                         __end_of_main 7AA0  
             __size_of_readFirstByte 004C                               ??_main 0026  
                      __activetblptr 000000                            ??_PGC_low 0001  
                          ??_PGD_low 0003                    __end_of_MCLR_high 76E6  
                        readBit@data 0006                 __size_of_enableWrite 002A  
                          ??_PGM_low 0001                    readFirstByte@data 0011  
                   __end_of_readICSP 78A6                     __end_of_readBits 794A  
                   __end_of_exit_HVP 773C                            ??_readPGD 0003  
                          ??_readBit 0006                     __end_of_trisInit 76FE  
                   __end_of_writePGD 770A                     __end_of_writeBit 7766  
                      _readFirstByte 78A6                           __accesstop 0080  
            __end_of__initialization 76EE                         readICSP@data 0011  
                          ?_MCLR_low 0001            writeTableThenIncremeant@i 0016  
                          ?_PGC_high 0001                       __pcstackCOMRAM 0001  
                          ?_PGM_high 0001                   __size_of_bulkErase 017C  
                     ?_readFirstByte 000F                   __size_of_read2Byte 002E  
                 __size_of_enter_HVP 0016                           ??_MCLR_low 0003  
               __size_of_tableSelect 00E4                           ??_PGC_high 0001  
                         ??_PGM_high 0001           ??_writeTableThenIncremeant 0016  
                       readBits@data 000D                              _PGC_low 76DE  
                            _PGD_low 770A                              _PGM_low 76EA  
                          ?_readICSP 000F                            ?_readBits 0008  
                          ?_exit_HVP 0001                   __size_of_writeICSP 002A  
                 __size_of_writeBits 0044                              __Hparam 0000  
                            __Lparam 0000                    __end_of_bulkErase 7D00  
                 writeBit@bitToWrite 0003                            ?_trisInit 0001  
                  __end_of_read2Byte 781C                    __end_of_enter_HVP 777C  
                            __pcinit 76EE                              __ramtop 0600  
                          ?_writePGD 0001                            ?_writeBit 0003  
                            __ptext0 79E4                              __ptext1 794A  
                            __ptext2 76F4                              __ptext3 7AA0  
                            __ptext4 77EE                              __ptext5 7860  
                            __ptext6 78A6                              __ptext7 78F2  
                            __ptext8 777C                              __ptext9 773C  
                            _readPGD 773C                              _readBit 777C  
                       writePGD@data 0001                        read2Byte@data 0017  
                    ??_readFirstByte 0011                 end_of_initialization 76EE  
                         ??_readICSP 0011                            _MCLR_high 76E2  
                         ??_readBits 000A                           ??_exit_HVP 0003  
                         ??_trisInit 0001                           ??_writePGD 0003  
                         ??_writeBit 0005                            _PORTDbits 000F83  
                  __end_of_writeICSP 77C4                    __end_of_writeBits 7860  
                      ??_enableWrite 0012                            _TRISDbits 000F95  
                   writeBits@pattern 0005                           ?_MCLR_high 0001  
                         bulkErase@i 0012                    __size_of_MCLR_low 0012  
                  __size_of_PGC_high 0004     __end_of_writeTableThenIncremeant 79E4  
                  __size_of_PGM_high 0004                 writeICSP@commandByte 000E  
                start_initialization 76EE                  __end_of_enableWrite 77EE  
                   __CFG_OSC$INTIO67 000000                   writeICSP@dataBytes 0010  
                           ?_PGC_low 0001                             ?_PGD_low 0001  
                           ?_PGM_low 0001                        ??_tableSelect 0016  
                        ??_MCLR_high 0001                    __size_of_readICSP 0046  
                  __size_of_readBits 0058                    __size_of_exit_HVP 0012  
                          _bulkErase 7B84                    __size_of_trisInit 000A  
                           ?_readPGD 0001                             ?_readBit 0004  
                          _read2Byte 77EE                            _enter_HVP 7766  
                  __size_of_writePGD 000C                          _enableWrite 77C4  
                  __size_of_writeBit 0016    __size_of_writeTableThenIncremeant 009A  
          ?_writeTableThenIncremeant 0012                             _MCLR_low 7718  
                __end_of_tableSelect 7B84                             _PGC_high 76DA  
                           _PGM_high 76E6                           ?_bulkErase 0001  
                         ?_read2Byte 0013                           ?_enter_HVP 0001  
                          _writeICSP 779A                            _writeBits 781C  
                   __size_of_PGC_low 0004                     __size_of_PGD_low 000E  
                 readBits@bitsToRead 0008                     __size_of_PGM_low 0004  
              __end_of_readFirstByte 78F2                            readBits@i 000B  
                           __Hrparam 0000                             __Lrparam 0000  
                   __size_of_readPGD 0014                     __size_of_readBit 001E  
                         ?_writeICSP 000E                             __ptext10 772A  
                           __ptext11 76EA                             __ptext20 781C  
                           __ptext12 7766                             __ptext21 7750  
                           __ptext13 76E6                             __ptext22 76FE  
                           __ptext14 770A                             __ptext23 76DE  
                           __ptext15 7718                             __ptext24 76DA  
                           __ptext16 76E2                             __ptext17 77C4  
                           __ptext18 7B84                             __ptext19 779A  
                         ?_writeBits 0005                             _readICSP 7860  
                 read2Byte@firstData 0015                          _tableSelect 7AA0  
                           _readBits 78F2                             _exit_HVP 772A  
                      __size_of_main 00BC                 writeBits@bitsToWrite 0007  
                         writeBits@i 000C                             _trisInit 76F4  
                        ??_bulkErase 0012                             _writePGD 76FE  
                           _writeBit 7750                          ??_read2Byte 0015  
                        ??_enter_HVP 0003                         ?_enableWrite 0001  
                        ??_writeICSP 0012                          ??_writeBits 0009  
                 tableSelect@address 0012  
