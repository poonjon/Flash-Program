

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Dec 11 00:11:13 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46  0000                     _PORTDbits	set	3971
    47  0000                     _TRISDbits	set	3989
    48                           
    49 ;;
    50 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
    51 ;;
    52 ;; *************** function _main *****************
    53 ;; Defined at:
    54 ;;		line 29 in file "../src/PIC18/Main.c"
    55 ;; Parameters:    Size  Location     Type
    56 ;;		None
    57 ;; Auto vars:     Size  Location     Type
    58 ;;  blockWrite5   128    0[BANK0 ] unsigned int [64]
    59 ;;  blockRead      64    0[BANK2 ] unsigned int [32]
    60 ;;  blockWrite3    32  128[BANK2 ] unsigned int [16]
    61 ;;  blockWrite2    32   96[BANK2 ] unsigned int [16]
    62 ;;  blockWrite1    32   64[BANK2 ] unsigned int [16]
    63 ;;  blockWrite0    32  222[BANK1 ] unsigned int [16]
    64 ;;  incomingData    8    0        unsigned int [4]
    65 ;;  address         4   73[COMRAM] unsigned long 
    66 ;;  i               2  254[BANK1 ] int 
    67 ;;  data5           2   87[COMRAM] unsigned int 
    68 ;;  data3           2   85[COMRAM] unsigned int 
    69 ;;  data2           2   83[COMRAM] unsigned int 
    70 ;;  data1           2   81[COMRAM] unsigned int 
    71 ;;  data0           2   79[COMRAM] unsigned int 
    72 ;;  data4           2   77[COMRAM] unsigned int 
    73 ;; Return value:  Size  Location     Type
    74 ;;		None               void
    75 ;; Registers used:
    76 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
    77 ;; Tracked objects:
    78 ;;		On entry : 0/0
    79 ;;		On exit  : 0/0
    80 ;;		Unchanged: 0/0
    81 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
    82 ;;      Params:         0       0       0       0       0       0       0
    83 ;;      Locals:        16     128      34     160       0       0       0
    84 ;;      Temps:          2       0       0       0       0       0       0
    85 ;;      Totals:        18     128      34     160       0       0       0
    86 ;;Total ram usage:      340 bytes
    87 ;; Hardware stack levels required when called:    7
    88 ;; This function calls:
    89 ;;		_bulkErase
    90 ;;		_enableWrite
    91 ;;		_enter_HVP
    92 ;;		_exit_HVP
    93 ;;		_flashReadBlock
    94 ;;		_flashWriteBlock
    95 ;;		_flashWriteData
    96 ;;		_trisInit
    97 ;; This function is called by:
    98 ;;		Startup code after reset
    99 ;; This function uses a non-reentrant model
   100 ;;
   101                           
   102                           	psect	text0
   103  00759E                     __ptext0:
   104                           	opt stack 0
   105  00759E                     _main:
   106                           	opt stack 23
   107                           
   108                           ;Main.c: 30: int i;
   109                           ;Main.c: 31: uint16 data0 = 0x0000;
   110                           
   111                           ;incstack = 0
   112  00759E  0E00               	movlw	0
   113  0075A0  6E51               	movwf	main@data0+1,c
   114  0075A2  0E00               	movlw	0
   115  0075A4  6E50               	movwf	main@data0,c
   116                           
   117                           ;Main.c: 32: uint16 data1 = 0x1000;
   118  0075A6  0E10               	movlw	16
   119  0075A8  6E53               	movwf	main@data1+1,c
   120  0075AA  0E00               	movlw	0
   121  0075AC  6E52               	movwf	main@data1,c
   122                           
   123                           ;Main.c: 33: uint16 data2 = 0x2000;
   124  0075AE  0E20               	movlw	32
   125  0075B0  6E55               	movwf	main@data2+1,c
   126  0075B2  0E00               	movlw	0
   127  0075B4  6E54               	movwf	main@data2,c
   128                           
   129                           ;Main.c: 34: uint16 data3 = 0x3000;
   130  0075B6  0E30               	movlw	48
   131  0075B8  6E57               	movwf	main@data3+1,c
   132  0075BA  0E00               	movlw	0
   133  0075BC  6E56               	movwf	main@data3,c
   134                           
   135                           ;Main.c: 35: uint16 data4 = 0x1000;
   136  0075BE  0E10               	movlw	16
   137  0075C0  6E4F               	movwf	main@data4+1,c
   138  0075C2  0E00               	movlw	0
   139  0075C4  6E4E               	movwf	main@data4,c
   140                           
   141                           ;Main.c: 36: uint16 data5 = 0x5000;
   142  0075C6  0E50               	movlw	80
   143  0075C8  6E59               	movwf	main@data5+1,c
   144  0075CA  0E00               	movlw	0
   145  0075CC  6E58               	movwf	main@data5,c
   146                           
   147                           ;Main.c: 37: uint32 address = 0x000000;
   148  0075CE  0E00               	movlw	0
   149  0075D0  6E4A               	movwf	main@address,c
   150  0075D2  0E00               	movlw	0
   151  0075D4  6E4B               	movwf	main@address+1,c
   152  0075D6  0E00               	movlw	0
   153  0075D8  6E4C               	movwf	main@address+2,c
   154  0075DA  0E00               	movlw	0
   155  0075DC  6E4D               	movwf	main@address+3,c
   156                           
   157                           ;Main.c: 38: uint16 blockRead[32];
   158                           ;Main.c: 39: uint16 blockWrite0[16];
   159                           ;Main.c: 40: uint16 blockWrite1[16];
   160                           ;Main.c: 41: uint16 blockWrite2[16];
   161                           ;Main.c: 42: uint16 blockWrite3[16];
   162                           ;Main.c: 43: uint16 blockWrite5[64];
   163                           ;Main.c: 44: uint16 incomingData[4];
   164                           ;Main.c: 46: for(i = 0 ; i < 16 ; i++){
   165  0075DE  0E00               	movlw	0
   166  0075E0  0101               	movlb	1	; () banked
   167  0075E2  6FFF               	movwf	(main@i+1)& (0+255),b
   168  0075E4  0E00               	movlw	0
   169  0075E6  0101               	movlb	1	; () banked
   170  0075E8  6FFE               	movwf	main@i& (0+255),b
   171  0075EA                     
   172                           ; BSR set to: 1
   173  0075EA  0101               	movlb	1	; () banked
   174  0075EC  51FF               	movf	(main@i+1)& (0+255),w,b
   175  0075EE  0A80               	xorlw	128
   176  0075F0  0F80               	addlw	-128
   177  0075F2  0E10               	movlw	16
   178  0075F4  B4D8               	btfsc	status,2,c
   179  0075F6  5DFE               	subwf	main@i& (0+255),w,b
   180  0075F8  B0D8               	btfsc	status,0,c
   181  0075FA  D019               	goto	l1842
   182                           
   183                           ; BSR set to: 1
   184                           ;Main.c: 47: blockWrite0[i] = data0;
   185                           
   186                           ; BSR set to: 1
   187                           
   188                           ; BSR set to: 1
   189  0075FC  0EDE               	movlw	low main@blockWrite0
   190  0075FE  6E48               	movwf	??_main& (0+255),c
   191  007600  0E01               	movlw	high main@blockWrite0
   192  007602  6E49               	movwf	(??_main+1)& (0+255),c
   193  007604  90D8               	bcf	status,0,c
   194  007606  0101               	movlb	1	; () banked
   195  007608  35FE               	rlcf	main@i& (0+255),w,b
   196  00760A  6ED9               	movwf	fsr2l,c
   197  00760C  0101               	movlb	1	; () banked
   198  00760E  35FF               	rlcf	(main@i+1)& (0+255),w,b
   199  007610  6EDA               	movwf	fsr2h,c
   200  007612  5048               	movf	??_main,w,c
   201  007614  26D9               	addwf	fsr2l,f,c
   202  007616  5049               	movf	??_main+1,w,c
   203  007618  22DA               	addwfc	fsr2h,f,c
   204  00761A  C050  FFDE         	movff	main@data0,postinc2
   205  00761E  C051  FFDD         	movff	main@data0+1,postdec2
   206                           
   207                           ; BSR set to: 1
   208                           ;Main.c: 48: data0++;
   209  007622  4A50               	infsnz	main@data0,f,c
   210  007624  2A51               	incf	main@data0+1,f,c
   211                           
   212                           ; BSR set to: 1
   213  007626  0101               	movlb	1	; () banked
   214  007628  4BFE               	infsnz	main@i& (0+255),f,b
   215  00762A  2BFF               	incf	(main@i+1)& (0+255),f,b
   216  00762C  D7DE               	goto	L1
   217  00762E                     l1842:
   218                           
   219                           ; BSR set to: 1
   220                           ;Main.c: 49: }
   221                           ;Main.c: 50: for(i = 0 ; i < 16 ; i++){
   222  00762E  0E00               	movlw	0
   223  007630  0101               	movlb	1	; () banked
   224  007632  6FFF               	movwf	(main@i+1)& (0+255),b
   225  007634  0E00               	movlw	0
   226  007636  0101               	movlb	1	; () banked
   227  007638  6FFE               	movwf	main@i& (0+255),b
   228  00763A                     
   229                           ; BSR set to: 1
   230  00763A  0101               	movlb	1	; () banked
   231  00763C  51FF               	movf	(main@i+1)& (0+255),w,b
   232  00763E  0A80               	xorlw	128
   233  007640  0F80               	addlw	-128
   234  007642  0E10               	movlw	16
   235  007644  B4D8               	btfsc	status,2,c
   236  007646  5DFE               	subwf	main@i& (0+255),w,b
   237  007648  B0D8               	btfsc	status,0,c
   238  00764A  D019               	goto	l1856
   239                           
   240                           ; BSR set to: 1
   241                           ;Main.c: 51: blockWrite1[i] = data1;
   242                           
   243                           ; BSR set to: 1
   244                           
   245                           ; BSR set to: 1
   246  00764C  0E40               	movlw	low main@blockWrite1
   247  00764E  6E48               	movwf	??_main& (0+255),c
   248  007650  0E02               	movlw	high main@blockWrite1
   249  007652  6E49               	movwf	(??_main+1)& (0+255),c
   250  007654  90D8               	bcf	status,0,c
   251  007656  0101               	movlb	1	; () banked
   252  007658  35FE               	rlcf	main@i& (0+255),w,b
   253  00765A  6ED9               	movwf	fsr2l,c
   254  00765C  0101               	movlb	1	; () banked
   255  00765E  35FF               	rlcf	(main@i+1)& (0+255),w,b
   256  007660  6EDA               	movwf	fsr2h,c
   257  007662  5048               	movf	??_main,w,c
   258  007664  26D9               	addwf	fsr2l,f,c
   259  007666  5049               	movf	??_main+1,w,c
   260  007668  22DA               	addwfc	fsr2h,f,c
   261  00766A  C052  FFDE         	movff	main@data1,postinc2
   262  00766E  C053  FFDD         	movff	main@data1+1,postdec2
   263                           
   264                           ; BSR set to: 1
   265                           ;Main.c: 52: data1++;
   266  007672  4A52               	infsnz	main@data1,f,c
   267  007674  2A53               	incf	main@data1+1,f,c
   268                           
   269                           ; BSR set to: 1
   270  007676  0101               	movlb	1	; () banked
   271  007678  4BFE               	infsnz	main@i& (0+255),f,b
   272  00767A  2BFF               	incf	(main@i+1)& (0+255),f,b
   273  00767C  D7DE               	goto	L2
   274  00767E                     l1856:
   275                           
   276                           ; BSR set to: 1
   277                           ;Main.c: 53: }
   278                           ;Main.c: 55: for(i = 0 ; i < 16 ; i++){
   279  00767E  0E00               	movlw	0
   280  007680  0101               	movlb	1	; () banked
   281  007682  6FFF               	movwf	(main@i+1)& (0+255),b
   282  007684  0E00               	movlw	0
   283  007686  0101               	movlb	1	; () banked
   284  007688  6FFE               	movwf	main@i& (0+255),b
   285  00768A                     
   286                           ; BSR set to: 1
   287  00768A  0101               	movlb	1	; () banked
   288  00768C  51FF               	movf	(main@i+1)& (0+255),w,b
   289  00768E  0A80               	xorlw	128
   290  007690  0F80               	addlw	-128
   291  007692  0E10               	movlw	16
   292  007694  B4D8               	btfsc	status,2,c
   293  007696  5DFE               	subwf	main@i& (0+255),w,b
   294  007698  B0D8               	btfsc	status,0,c
   295  00769A  D019               	goto	l1870
   296                           
   297                           ; BSR set to: 1
   298                           ;Main.c: 56: blockWrite2[i] = data2;
   299                           
   300                           ; BSR set to: 1
   301                           
   302                           ; BSR set to: 1
   303  00769C  0E60               	movlw	low main@blockWrite2
   304  00769E  6E48               	movwf	??_main& (0+255),c
   305  0076A0  0E02               	movlw	high main@blockWrite2
   306  0076A2  6E49               	movwf	(??_main+1)& (0+255),c
   307  0076A4  90D8               	bcf	status,0,c
   308  0076A6  0101               	movlb	1	; () banked
   309  0076A8  35FE               	rlcf	main@i& (0+255),w,b
   310  0076AA  6ED9               	movwf	fsr2l,c
   311  0076AC  0101               	movlb	1	; () banked
   312  0076AE  35FF               	rlcf	(main@i+1)& (0+255),w,b
   313  0076B0  6EDA               	movwf	fsr2h,c
   314  0076B2  5048               	movf	??_main,w,c
   315  0076B4  26D9               	addwf	fsr2l,f,c
   316  0076B6  5049               	movf	??_main+1,w,c
   317  0076B8  22DA               	addwfc	fsr2h,f,c
   318  0076BA  C054  FFDE         	movff	main@data2,postinc2
   319  0076BE  C055  FFDD         	movff	main@data2+1,postdec2
   320                           
   321                           ; BSR set to: 1
   322                           ;Main.c: 57: data2++;
   323  0076C2  4A54               	infsnz	main@data2,f,c
   324  0076C4  2A55               	incf	main@data2+1,f,c
   325                           
   326                           ; BSR set to: 1
   327  0076C6  0101               	movlb	1	; () banked
   328  0076C8  4BFE               	infsnz	main@i& (0+255),f,b
   329  0076CA  2BFF               	incf	(main@i+1)& (0+255),f,b
   330  0076CC  D7DE               	goto	L3
   331  0076CE                     l1870:
   332                           
   333                           ; BSR set to: 1
   334                           ;Main.c: 58: }
   335                           ;Main.c: 59: for(i = 0 ; i < 16 ; i++){
   336  0076CE  0E00               	movlw	0
   337  0076D0  0101               	movlb	1	; () banked
   338  0076D2  6FFF               	movwf	(main@i+1)& (0+255),b
   339  0076D4  0E00               	movlw	0
   340  0076D6  0101               	movlb	1	; () banked
   341  0076D8  6FFE               	movwf	main@i& (0+255),b
   342  0076DA                     
   343                           ; BSR set to: 1
   344  0076DA  0101               	movlb	1	; () banked
   345  0076DC  51FF               	movf	(main@i+1)& (0+255),w,b
   346  0076DE  0A80               	xorlw	128
   347  0076E0  0F80               	addlw	-128
   348  0076E2  0E10               	movlw	16
   349  0076E4  B4D8               	btfsc	status,2,c
   350  0076E6  5DFE               	subwf	main@i& (0+255),w,b
   351  0076E8  B0D8               	btfsc	status,0,c
   352  0076EA  D019               	goto	l1884
   353                           
   354                           ; BSR set to: 1
   355                           ;Main.c: 60: blockWrite3[i] = data3;
   356                           
   357                           ; BSR set to: 1
   358                           
   359                           ; BSR set to: 1
   360  0076EC  0E80               	movlw	low main@blockWrite3
   361  0076EE  6E48               	movwf	??_main& (0+255),c
   362  0076F0  0E02               	movlw	high main@blockWrite3
   363  0076F2  6E49               	movwf	(??_main+1)& (0+255),c
   364  0076F4  90D8               	bcf	status,0,c
   365  0076F6  0101               	movlb	1	; () banked
   366  0076F8  35FE               	rlcf	main@i& (0+255),w,b
   367  0076FA  6ED9               	movwf	fsr2l,c
   368  0076FC  0101               	movlb	1	; () banked
   369  0076FE  35FF               	rlcf	(main@i+1)& (0+255),w,b
   370  007700  6EDA               	movwf	fsr2h,c
   371  007702  5048               	movf	??_main,w,c
   372  007704  26D9               	addwf	fsr2l,f,c
   373  007706  5049               	movf	??_main+1,w,c
   374  007708  22DA               	addwfc	fsr2h,f,c
   375  00770A  C056  FFDE         	movff	main@data3,postinc2
   376  00770E  C057  FFDD         	movff	main@data3+1,postdec2
   377                           
   378                           ; BSR set to: 1
   379                           ;Main.c: 61: data3++;
   380  007712  4A56               	infsnz	main@data3,f,c
   381  007714  2A57               	incf	main@data3+1,f,c
   382                           
   383                           ; BSR set to: 1
   384  007716  0101               	movlb	1	; () banked
   385  007718  4BFE               	infsnz	main@i& (0+255),f,b
   386  00771A  2BFF               	incf	(main@i+1)& (0+255),f,b
   387  00771C  D7DE               	goto	L4
   388  00771E                     l1884:
   389                           
   390                           ; BSR set to: 1
   391                           ;Main.c: 62: }
   392                           ;Main.c: 63: for(i = 0 ; i < 64 ; i++){
   393  00771E  0E00               	movlw	0
   394  007720  0101               	movlb	1	; () banked
   395  007722  6FFF               	movwf	(main@i+1)& (0+255),b
   396  007724  0E00               	movlw	0
   397  007726  0101               	movlb	1	; () banked
   398  007728  6FFE               	movwf	main@i& (0+255),b
   399  00772A                     
   400                           ; BSR set to: 1
   401  00772A  0101               	movlb	1	; () banked
   402  00772C  51FF               	movf	(main@i+1)& (0+255),w,b
   403  00772E  0A80               	xorlw	128
   404  007730  0F80               	addlw	-128
   405  007732  0E40               	movlw	64
   406  007734  B4D8               	btfsc	status,2,c
   407  007736  5DFE               	subwf	main@i& (0+255),w,b
   408  007738  B0D8               	btfsc	status,0,c
   409  00773A  D019               	goto	l1898
   410                           
   411                           ; BSR set to: 1
   412                           ;Main.c: 64: blockWrite5[i] = data5;
   413                           
   414                           ; BSR set to: 1
   415                           
   416                           ; BSR set to: 1
   417  00773C  0E80               	movlw	low main@blockWrite5
   418  00773E  6E48               	movwf	??_main& (0+255),c
   419  007740  0E00               	movlw	high main@blockWrite5
   420  007742  6E49               	movwf	(??_main+1)& (0+255),c
   421  007744  90D8               	bcf	status,0,c
   422  007746  0101               	movlb	1	; () banked
   423  007748  35FE               	rlcf	main@i& (0+255),w,b
   424  00774A  6ED9               	movwf	fsr2l,c
   425  00774C  0101               	movlb	1	; () banked
   426  00774E  35FF               	rlcf	(main@i+1)& (0+255),w,b
   427  007750  6EDA               	movwf	fsr2h,c
   428  007752  5048               	movf	??_main,w,c
   429  007754  26D9               	addwf	fsr2l,f,c
   430  007756  5049               	movf	??_main+1,w,c
   431  007758  22DA               	addwfc	fsr2h,f,c
   432  00775A  C058  FFDE         	movff	main@data5,postinc2
   433  00775E  C059  FFDD         	movff	main@data5+1,postdec2
   434                           
   435                           ; BSR set to: 1
   436                           ;Main.c: 65: data5++;
   437  007762  4A58               	infsnz	main@data5,f,c
   438  007764  2A59               	incf	main@data5+1,f,c
   439                           
   440                           ; BSR set to: 1
   441  007766  0101               	movlb	1	; () banked
   442  007768  4BFE               	infsnz	main@i& (0+255),f,b
   443  00776A  2BFF               	incf	(main@i+1)& (0+255),f,b
   444  00776C  D7DE               	goto	L5
   445  00776E                     l1898:
   446                           
   447                           ; BSR set to: 1
   448                           ;Main.c: 66: }
   449                           ;Main.c: 68: trisInit();
   450  00776E  ECE5  F035         	call	_trisInit	;wreg free
   451                           
   452                           ;Main.c: 69: enter_HVP();
   453  007772  EC1E  F036         	call	_enter_HVP	;wreg free
   454                           
   455                           ;Main.c: 71: bulkErase();
   456  007776  EC11  F03A         	call	_bulkErase	;wreg free
   457                           
   458                           ;Main.c: 72: enableWrite();
   459  00777A  EC67  F036         	call	_enableWrite	;wreg free
   460                           
   461                           ;Main.c: 74: flashWriteBlock(blockWrite0, blockWrite1, 1);
   462  00777E  0101               	movlb	1	; () banked
   463  007780  0E01               	movlw	high main@blockWrite0
   464  007782  6E27               	movwf	flashWriteBlock@firstHalf+1,c
   465  007784  0101               	movlb	1	; () banked
   466  007786  0EDE               	movlw	low main@blockWrite0
   467  007788  6E26               	movwf	flashWriteBlock@firstHalf,c
   468  00778A  0102               	movlb	2	; () banked
   469  00778C  0E02               	movlw	high main@blockWrite1
   470  00778E  6E29               	movwf	flashWriteBlock@secondHalf+1,c
   471  007790  0102               	movlb	2	; () banked
   472  007792  0E40               	movlw	low main@blockWrite1
   473  007794  6E28               	movwf	flashWriteBlock@secondHalf,c
   474  007796  0E01               	movlw	1
   475  007798  6E2A               	movwf	flashWriteBlock@blockNumber,c
   476  00779A  0E00               	movlw	0
   477  00779C  6E2B               	movwf	flashWriteBlock@blockNumber+1,c
   478  00779E  0E00               	movlw	0
   479  0077A0  6E2C               	movwf	flashWriteBlock@blockNumber+2,c
   480  0077A2  0E00               	movlw	0
   481  0077A4  6E2D               	movwf	flashWriteBlock@blockNumber+3,c
   482  0077A6  ECF5  F038         	call	_flashWriteBlock	;wreg free
   483                           
   484                           ;Main.c: 75: flashWriteBlock(blockWrite2, blockWrite3, 2);
   485  0077AA  0102               	movlb	2	; () banked
   486  0077AC  0E02               	movlw	high main@blockWrite2
   487  0077AE  6E27               	movwf	flashWriteBlock@firstHalf+1,c
   488  0077B0  0102               	movlb	2	; () banked
   489  0077B2  0E60               	movlw	low main@blockWrite2
   490  0077B4  6E26               	movwf	flashWriteBlock@firstHalf,c
   491  0077B6  0102               	movlb	2	; () banked
   492  0077B8  0E02               	movlw	high main@blockWrite3
   493  0077BA  6E29               	movwf	flashWriteBlock@secondHalf+1,c
   494  0077BC  0102               	movlb	2	; () banked
   495  0077BE  0E80               	movlw	low main@blockWrite3
   496  0077C0  6E28               	movwf	flashWriteBlock@secondHalf,c
   497  0077C2  0E02               	movlw	2
   498  0077C4  6E2A               	movwf	flashWriteBlock@blockNumber,c
   499  0077C6  0E00               	movlw	0
   500  0077C8  6E2B               	movwf	flashWriteBlock@blockNumber+1,c
   501  0077CA  0E00               	movlw	0
   502  0077CC  6E2C               	movwf	flashWriteBlock@blockNumber+2,c
   503  0077CE  0E00               	movlw	0
   504  0077D0  6E2D               	movwf	flashWriteBlock@blockNumber+3,c
   505  0077D2  ECF5  F038         	call	_flashWriteBlock	;wreg free
   506                           
   507                           ;Main.c: 76: flashReadBlock(blockRead, 64, 1);
   508  0077D6  0102               	movlb	2	; () banked
   509  0077D8  0E02               	movlw	high main@blockRead
   510  0077DA  6E27               	movwf	flashReadBlock@data+1,c
   511  0077DC  0102               	movlb	2	; () banked
   512  0077DE  0E00               	movlw	low main@blockRead
   513  0077E0  6E26               	movwf	flashReadBlock@data,c
   514  0077E2  0E00               	movlw	0
   515  0077E4  6E29               	movwf	flashReadBlock@size+1,c
   516  0077E6  0E40               	movlw	64
   517  0077E8  6E28               	movwf	flashReadBlock@size,c
   518  0077EA  0E01               	movlw	1
   519  0077EC  6E2A               	movwf	flashReadBlock@blockNumber,c
   520  0077EE  0E00               	movlw	0
   521  0077F0  6E2B               	movwf	flashReadBlock@blockNumber+1,c
   522  0077F2  0E00               	movlw	0
   523  0077F4  6E2C               	movwf	flashReadBlock@blockNumber+2,c
   524  0077F6  0E00               	movlw	0
   525  0077F8  6E2D               	movwf	flashReadBlock@blockNumber+3,c
   526  0077FA  EC6D  F037         	call	_flashReadBlock	;wreg free
   527                           
   528                           ;Main.c: 77: flashReadBlock(blockRead, 64, 2);
   529  0077FE  0102               	movlb	2	; () banked
   530  007800  0E02               	movlw	high main@blockRead
   531  007802  6E27               	movwf	flashReadBlock@data+1,c
   532  007804  0102               	movlb	2	; () banked
   533  007806  0E00               	movlw	low main@blockRead
   534  007808  6E26               	movwf	flashReadBlock@data,c
   535  00780A  0E00               	movlw	0
   536  00780C  6E29               	movwf	flashReadBlock@size+1,c
   537  00780E  0E40               	movlw	64
   538  007810  6E28               	movwf	flashReadBlock@size,c
   539  007812  0E02               	movlw	2
   540  007814  6E2A               	movwf	flashReadBlock@blockNumber,c
   541  007816  0E00               	movlw	0
   542  007818  6E2B               	movwf	flashReadBlock@blockNumber+1,c
   543  00781A  0E00               	movlw	0
   544  00781C  6E2C               	movwf	flashReadBlock@blockNumber+2,c
   545  00781E  0E00               	movlw	0
   546  007820  6E2D               	movwf	flashReadBlock@blockNumber+3,c
   547  007822  EC6D  F037         	call	_flashReadBlock	;wreg free
   548                           
   549                           ;Main.c: 78: flashWriteData(blockWrite5, 64, 0);
   550  007826  0100               	movlb	0	; () banked
   551  007828  0E00               	movlw	high main@blockWrite5
   552  00782A  6E39               	movwf	flashWriteData@data+1,c
   553  00782C  0100               	movlb	0	; () banked
   554  00782E  0E80               	movlw	low main@blockWrite5
   555  007830  6E38               	movwf	flashWriteData@data,c
   556  007832  0E00               	movlw	0
   557  007834  6E3B               	movwf	flashWriteData@size+1,c
   558  007836  0E40               	movlw	64
   559  007838  6E3A               	movwf	flashWriteData@size,c
   560  00783A  0E00               	movlw	0
   561  00783C  6E3C               	movwf	flashWriteData@address,c
   562  00783E  0E00               	movlw	0
   563  007840  6E3D               	movwf	flashWriteData@address+1,c
   564  007842  0E00               	movlw	0
   565  007844  6E3E               	movwf	flashWriteData@address+2,c
   566  007846  0E00               	movlw	0
   567  007848  6E3F               	movwf	flashWriteData@address+3,c
   568  00784A  EC52  F03C         	call	_flashWriteData	;wreg free
   569                           
   570                           ;Main.c: 79: flashReadBlock(blockRead, 64, 1);
   571  00784E  0102               	movlb	2	; () banked
   572  007850  0E02               	movlw	high main@blockRead
   573  007852  6E27               	movwf	flashReadBlock@data+1,c
   574  007854  0102               	movlb	2	; () banked
   575  007856  0E00               	movlw	low main@blockRead
   576  007858  6E26               	movwf	flashReadBlock@data,c
   577  00785A  0E00               	movlw	0
   578  00785C  6E29               	movwf	flashReadBlock@size+1,c
   579  00785E  0E40               	movlw	64
   580  007860  6E28               	movwf	flashReadBlock@size,c
   581  007862  0E01               	movlw	1
   582  007864  6E2A               	movwf	flashReadBlock@blockNumber,c
   583  007866  0E00               	movlw	0
   584  007868  6E2B               	movwf	flashReadBlock@blockNumber+1,c
   585  00786A  0E00               	movlw	0
   586  00786C  6E2C               	movwf	flashReadBlock@blockNumber+2,c
   587  00786E  0E00               	movlw	0
   588  007870  6E2D               	movwf	flashReadBlock@blockNumber+3,c
   589  007872  EC6D  F037         	call	_flashReadBlock	;wreg free
   590                           
   591                           ;Main.c: 80: flashReadBlock(blockRead, 64, 2);
   592  007876  0102               	movlb	2	; () banked
   593  007878  0E02               	movlw	high main@blockRead
   594  00787A  6E27               	movwf	flashReadBlock@data+1,c
   595  00787C  0102               	movlb	2	; () banked
   596  00787E  0E00               	movlw	low main@blockRead
   597  007880  6E26               	movwf	flashReadBlock@data,c
   598  007882  0E00               	movlw	0
   599  007884  6E29               	movwf	flashReadBlock@size+1,c
   600  007886  0E40               	movlw	64
   601  007888  6E28               	movwf	flashReadBlock@size,c
   602  00788A  0E02               	movlw	2
   603  00788C  6E2A               	movwf	flashReadBlock@blockNumber,c
   604  00788E  0E00               	movlw	0
   605  007890  6E2B               	movwf	flashReadBlock@blockNumber+1,c
   606  007892  0E00               	movlw	0
   607  007894  6E2C               	movwf	flashReadBlock@blockNumber+2,c
   608  007896  0E00               	movlw	0
   609  007898  6E2D               	movwf	flashReadBlock@blockNumber+3,c
   610  00789A  EC6D  F037         	call	_flashReadBlock	;wreg free
   611                           
   612                           ;Main.c: 81: exit_HVP();
   613  00789E  EC00  F036         	call	_exit_HVP	;wreg free
   614  0078A2                     l185:
   615  0078A2  D7FF               	goto	l185
   616  0078A4                     __end_of_main:
   617                           	opt stack 0
   618                           postinc2	equ	0xFDE
   619                           postdec2	equ	0xFDD
   620                           fsr2h	equ	0xFDA
   621                           fsr2l	equ	0xFD9
   622                           status	equ	0xFD8
   623                           
   624                           	psect	cinit
   625  006C86                     __pcinit:
   626                           	opt stack 0
   627  006C86                     start_initialization:
   628                           	opt stack 0
   629  006C86                     __initialization:
   630                           	opt stack 0
   631                           
   632                           ; Clear objects allocated to BANK2 (96 bytes)
   633  006C86  EE02  F0A0         	lfsr	0,__pbssBANK2
   634  006C8A  0E60               	movlw	96
   635  006C8C                     clear_0:
   636  006C8C  6AEE               	clrf	postinc0,c
   637  006C8E  06E8               	decf	wreg,f,c
   638  006C90  E1FD               	bnz	clear_0
   639                           
   640                           ; Clear objects allocated to COMRAM (32 bytes)
   641  006C92  EE00  F05A         	lfsr	0,__pbssCOMRAM
   642  006C96  0E20               	movlw	32
   643  006C98                     clear_1:
   644  006C98  6AEE               	clrf	postinc0,c
   645  006C9A  06E8               	decf	wreg,f,c
   646  006C9C  E1FD               	bnz	clear_1
   647  006C9E                     end_of_initialization:
   648                           	opt stack 0
   649  006C9E                     __end_of__initialization:
   650                           	opt stack 0
   651  006C9E  0100               	movlb	0
   652  006CA0  EFCF  F03A         	goto	_main	;jump to C main() function
   653                           postinc0	equ	0xFEE
   654                           wreg	equ	0xFE8
   655                           postinc2	equ	0xFDE
   656                           postdec2	equ	0xFDD
   657                           fsr2h	equ	0xFDA
   658                           fsr2l	equ	0xFD9
   659                           status	equ	0xFD8
   660                           
   661                           	psect	bssCOMRAM
   662  00005A                     __pbssCOMRAM:
   663                           	opt stack 0
   664  00005A                     _halfBuffer1:
   665                           	opt stack 0
   666  00005A                     	ds	32
   667                           postinc0	equ	0xFEE
   668                           wreg	equ	0xFE8
   669                           postinc2	equ	0xFDE
   670                           postdec2	equ	0xFDD
   671                           fsr2h	equ	0xFDA
   672                           fsr2l	equ	0xFD9
   673                           status	equ	0xFD8
   674                           
   675                           	psect	bssBANK2
   676  0002A0                     __pbssBANK2:
   677                           	opt stack 0
   678  0002A0                     _blockBuffer:
   679                           	opt stack 0
   680  0002A0                     	ds	64
   681  0002E0                     _halfBuffer2:
   682                           	opt stack 0
   683  0002E0                     	ds	32
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           postinc2	equ	0xFDE
   687                           postdec2	equ	0xFDD
   688                           fsr2h	equ	0xFDA
   689                           fsr2l	equ	0xFD9
   690                           status	equ	0xFD8
   691                           
   692                           	psect	cstackBANK2
   693  000200                     __pcstackBANK2:
   694                           	opt stack 0
   695  000200                     main@blockRead:
   696                           	opt stack 0
   697                           
   698                           ; 64 bytes @ 0x0
   699  000200                     	ds	64
   700  000240                     main@blockWrite1:
   701                           	opt stack 0
   702                           
   703                           ; 32 bytes @ 0x40
   704  000240                     	ds	32
   705  000260                     main@blockWrite2:
   706                           	opt stack 0
   707                           
   708                           ; 32 bytes @ 0x60
   709  000260                     	ds	32
   710  000280                     main@blockWrite3:
   711                           	opt stack 0
   712                           
   713                           ; 32 bytes @ 0x80
   714  000280                     	ds	32
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           postinc2	equ	0xFDE
   718                           postdec2	equ	0xFDD
   719                           fsr2h	equ	0xFDA
   720                           fsr2l	equ	0xFD9
   721                           status	equ	0xFD8
   722                           
   723                           	psect	cstackBANK1
   724  000100                     __pcstackBANK1:
   725                           	opt stack 0
   726  000100                     flashWriteData@newData:
   727                           	opt stack 0
   728                           
   729                           ; 200 bytes @ 0x0
   730  000100                     	ds	200
   731  0001C8                     flashWriteData@j:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0xC8
   735  0001C8                     	ds	2
   736  0001CA                     flashWriteData@nextDataSet:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0xCA
   740  0001CA                     	ds	2
   741  0001CC                     flashWriteData@timesToWrite:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0xCC
   745  0001CC                     	ds	2
   746  0001CE                     flashWriteData@k:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0xCE
   750  0001CE                     	ds	2
   751  0001D0                     flashWriteData@newSize:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0xD0
   755  0001D0                     	ds	2
   756  0001D2                     flashWriteData@memoryBlock:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0xD2
   760  0001D2                     	ds	2
   761  0001D4                     flashWriteData@currentStartPoint:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0xD4
   765  0001D4                     	ds	2
   766  0001D6                     flashWriteData@bytesWritten:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0xD6
   770  0001D6                     	ds	2
   771  0001D8                     flashWriteData@newAddress:
   772                           	opt stack 0
   773                           
   774                           ; 4 bytes @ 0xD8
   775  0001D8                     	ds	4
   776  0001DC                     flashWriteData@i:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0xDC
   780  0001DC                     	ds	2
   781  0001DE                     main@blockWrite0:
   782                           	opt stack 0
   783                           
   784                           ; 32 bytes @ 0xDE
   785  0001DE                     	ds	32
   786  0001FE                     main@i:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0xFE
   790  0001FE                     	ds	2
   791                           postinc0	equ	0xFEE
   792                           wreg	equ	0xFE8
   793                           postinc2	equ	0xFDE
   794                           postdec2	equ	0xFDD
   795                           fsr2h	equ	0xFDA
   796                           fsr2l	equ	0xFD9
   797                           status	equ	0xFD8
   798                           
   799                           	psect	cstackBANK0
   800  000080                     __pcstackBANK0:
   801                           	opt stack 0
   802  000080                     main@blockWrite5:
   803                           	opt stack 0
   804                           
   805                           ; 128 bytes @ 0x0
   806  000080                     	ds	128
   807                           postinc0	equ	0xFEE
   808                           wreg	equ	0xFE8
   809                           postinc2	equ	0xFDE
   810                           postdec2	equ	0xFDD
   811                           fsr2h	equ	0xFDA
   812                           fsr2l	equ	0xFD9
   813                           status	equ	0xFD8
   814                           
   815                           	psect	cstackCOMRAM
   816  000001                     __pcstackCOMRAM:
   817                           	opt stack 0
   818  000001                     ??_loadHalfBuffer:
   819  000001                     ?_readPGD:
   820                           	opt stack 0
   821  000001                     writePGD@data:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x0
   825  000001                     	ds	2
   826  000003                     ??_readPGD:
   827  000003                     writeBit@bitToWrite:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x2
   831  000003                     	ds	1
   832  000004                     ?_readBit:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x3
   836  000004                     	ds	1
   837  000005                     writeBits@pattern:
   838                           	opt stack 0
   839  000005                     loadHalfBuffer@j:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x4
   843  000005                     	ds	1
   844  000006                     readBit@data:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x5
   848  000006                     	ds	1
   849  000007                     writeBits@bitsToWrite:
   850                           	opt stack 0
   851  000007                     loadHalfBuffer@i:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x6
   855  000007                     	ds	1
   856  000008                     ?_readBits:
   857                           	opt stack 0
   858  000008                     readBits@bitsToRead:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x7
   862  000008                     	ds	1
   863  000009                     ??_writeBits:
   864  000009                     ?_overwriteBufferData:
   865                           	opt stack 0
   866  000009                     overwriteBufferData@data:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x8
   870  000009                     	ds	1
   871  00000A                     ??_readBits:
   872                           
   873                           ; 0 bytes @ 0x9
   874  00000A                     	ds	1
   875  00000B                     readBits@i:
   876                           	opt stack 0
   877  00000B                     overwriteBufferData@sizeToWrite:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0xA
   881  00000B                     	ds	1
   882  00000C                     writeBits@i:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0xB
   886  00000C                     	ds	1
   887  00000D                     readBits@data:
   888                           	opt stack 0
   889  00000D                     overwriteBufferData@bufferStartPoint:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0xC
   893  00000D                     	ds	1
   894  00000E                     writeICSP@commandByte:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0xD
   898  00000E                     	ds	1
   899  00000F                     ??_overwriteBufferData:
   900  00000F                     ?_readICSP:
   901                           	opt stack 0
   902  00000F                     ?_readFirstByte:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0xE
   906  00000F                     	ds	1
   907  000010                     writeICSP@dataBytes:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0xF
   911  000010                     	ds	1
   912  000011                     readICSP@data:
   913                           	opt stack 0
   914  000011                     readFirstByte@data:
   915                           	opt stack 0
   916  000011                     overwriteBufferData@j:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x10
   920  000011                     	ds	1
   921  000012                     bulkErase@i:
   922                           	opt stack 0
   923  000012                     writeToBuffer@data:
   924                           	opt stack 0
   925  000012                     flashWriteAndProgram@data:
   926                           	opt stack 0
   927  000012                     flashSetAddress@address:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x11
   931  000012                     	ds	1
   932  000013                     ?_flashRead16Bits:
   933                           	opt stack 0
   934  000013                     overwriteBufferData@bytesLeft:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x12
   938  000013                     	ds	1
   939  000014                     flashWriteAndProgram@i:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x13
   943  000014                     	ds	1
   944  000015                     flashRead16Bits@firstData:
   945                           	opt stack 0
   946  000015                     overwriteBufferData@bytesWritten:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x14
   950  000015                     	ds	1
   951  000016                     ??_flashSetAddress:
   952                           
   953                           ; 0 bytes @ 0x15
   954  000016                     	ds	1
   955  000017                     flashRead16Bits@data:
   956                           	opt stack 0
   957  000017                     overwriteBufferData@start:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x16
   961  000017                     	ds	2
   962  000019                     overwriteBufferData@availableWriteSpace:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x18
   966  000019                     	ds	1
   967  00001A                     flashSetAddress@upperAddr:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x19
   971  00001A                     	ds	1
   972  00001B                     overwriteBufferData@i:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x1A
   976  00001B                     	ds	3
   977  00001E                     flashSetAddress@highAddr:
   978                           	opt stack 0
   979                           
   980                           ; 4 bytes @ 0x1D
   981  00001E                     	ds	4
   982  000022                     flashSetAddress@lowAddr:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0x21
   986  000022                     	ds	4
   987  000026                     flashReadBlock@data:
   988                           	opt stack 0
   989  000026                     flashWriteBlock@firstHalf:
   990                           	opt stack 0
   991  000026                     rowErase@address:
   992                           	opt stack 0
   993                           
   994                           ; 4 bytes @ 0x25
   995  000026                     	ds	2
   996  000028                     flashReadBlock@size:
   997                           	opt stack 0
   998  000028                     flashWriteBlock@secondHalf:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x27
  1002  000028                     	ds	2
  1003  00002A                     rowErase@i:
  1004                           	opt stack 0
  1005  00002A                     flashReadBlock@blockNumber:
  1006                           	opt stack 0
  1007  00002A                     flashWriteBlock@blockNumber:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0x29
  1011  00002A                     	ds	4
  1012  00002E                     ??_flashReadBlock:
  1013  00002E                     ??_flashWriteBlock:
  1014                           
  1015                           ; 0 bytes @ 0x2D
  1016  00002E                     	ds	4
  1017  000032                     flashReadBlock@blockSelect:
  1018                           	opt stack 0
  1019  000032                     flashWriteBlock@blockSelect:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x31
  1023  000032                     	ds	4
  1024  000036                     flashReadBlock@i:
  1025                           	opt stack 0
  1026  000036                     flashWriteBlock@i:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x35
  1030  000036                     	ds	2
  1031  000038                     flashWriteData@data:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x37
  1035  000038                     	ds	2
  1036  00003A                     flashWriteData@size:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x39
  1040  00003A                     	ds	2
  1041  00003C                     flashWriteData@address:
  1042                           	opt stack 0
  1043                           
  1044                           ; 4 bytes @ 0x3B
  1045  00003C                     	ds	4
  1046  000040                     ??_flashWriteData:
  1047                           
  1048                           ; 0 bytes @ 0x3F
  1049  000040                     	ds	8
  1050  000048                     ??_main:
  1051                           
  1052                           ; 0 bytes @ 0x47
  1053  000048                     	ds	2
  1054  00004A                     main@address:
  1055                           	opt stack 0
  1056                           
  1057                           ; 4 bytes @ 0x49
  1058  00004A                     	ds	4
  1059  00004E                     main@data4:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x4D
  1063  00004E                     	ds	2
  1064  000050                     main@data0:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x4F
  1068  000050                     	ds	2
  1069  000052                     main@data1:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x51
  1073  000052                     	ds	2
  1074  000054                     main@data2:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x53
  1078  000054                     	ds	2
  1079  000056                     main@data3:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x55
  1083  000056                     	ds	2
  1084  000058                     main@data5:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x57
  1088  000058                     	ds	2
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           postinc2	equ	0xFDE
  1092                           postdec2	equ	0xFDD
  1093                           fsr2h	equ	0xFDA
  1094                           fsr2l	equ	0xFD9
  1095                           status	equ	0xFD8
  1096                           
  1097 ;; *************** function _trisInit *****************
  1098 ;; Defined at:
  1099 ;;		line 22 in file "../src/PIC18/Main.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;		None
  1104 ;; Return value:  Size  Location     Type
  1105 ;;		None               void
  1106 ;; Registers used:
  1107 ;;		None
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1113 ;;      Params:         0       0       0       0       0       0       0
  1114 ;;      Locals:         0       0       0       0       0       0       0
  1115 ;;      Temps:          0       0       0       0       0       0       0
  1116 ;;      Totals:         0       0       0       0       0       0       0
  1117 ;;Total ram usage:        0 bytes
  1118 ;; Hardware stack levels used:    1
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text1
  1127  006BCA                     __ptext1:
  1128                           	opt stack 0
  1129  006BCA                     _trisInit:
  1130                           	opt stack 29
  1131                           
  1132                           ;Main.c: 23: TRISDbits.TRISD4 = 0;
  1133                           
  1134                           ;incstack = 0
  1135  006BCA  9895               	bcf	3989,4,c	;volatile
  1136                           
  1137                           ;Main.c: 24: TRISDbits.TRISD5 = 0;
  1138  006BCC  9A95               	bcf	3989,5,c	;volatile
  1139                           
  1140                           ;Main.c: 25: TRISDbits.TRISD6 = 0;
  1141  006BCE  9C95               	bcf	3989,6,c	;volatile
  1142                           
  1143                           ;Main.c: 26: TRISDbits.TRISD7 = 0;
  1144  006BD0  9E95               	bcf	3989,7,c	;volatile
  1145  006BD2  0012               	return	
  1146  006BD4                     __end_of_trisInit:
  1147                           	opt stack 0
  1148                           postinc0	equ	0xFEE
  1149                           wreg	equ	0xFE8
  1150                           postinc2	equ	0xFDE
  1151                           postdec2	equ	0xFDD
  1152                           fsr2h	equ	0xFDA
  1153                           fsr2l	equ	0xFD9
  1154                           status	equ	0xFD8
  1155                           
  1156 ;; *************** function _flashWriteData *****************
  1157 ;; Defined at:
  1158 ;;		line 11 in file "../src/PIC18/FlashWrite.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  data            2   55[COMRAM] PTR unsigned int 
  1161 ;;		 -> main@blockWrite5(128), 
  1162 ;;  size            2   57[COMRAM] unsigned int 
  1163 ;;  address         4   59[COMRAM] unsigned long 
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  newData       200    0[BANK1 ] unsigned int [100]
  1166 ;;  newAddress      4  216[BANK1 ] unsigned long 
  1167 ;;  i               2  220[BANK1 ] int 
  1168 ;;  bytesWritten    2  214[BANK1 ] int 
  1169 ;;  currentStart    2  212[BANK1 ] unsigned int 
  1170 ;;  memoryBlock     2  210[BANK1 ] unsigned int 
  1171 ;;  newSize         2  208[BANK1 ] unsigned int 
  1172 ;;  k               2  206[BANK1 ] int 
  1173 ;;  timesToWrite    2  204[BANK1 ] int 
  1174 ;;  nextDataSet     2  202[BANK1 ] int 
  1175 ;;  j               2  200[BANK1 ] int 
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  2   55[COMRAM] int 
  1178 ;; Registers used:
  1179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1185 ;;      Params:         8       0       0       0       0       0       0
  1186 ;;      Locals:         0       0     222       0       0       0       0
  1187 ;;      Temps:          8       0       0       0       0       0       0
  1188 ;;      Totals:        16       0     222       0       0       0       0
  1189 ;;Total ram usage:      238 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; Hardware stack levels required when called:    6
  1192 ;; This function calls:
  1193 ;;		_flashReadBlock
  1194 ;;		_flashSetAddress
  1195 ;;		_flashWriteBlock
  1196 ;;		_loadHalfBuffer
  1197 ;;		_overwriteBufferData
  1198 ;;		_rowErase
  1199 ;; This function is called by:
  1200 ;;		_main
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text2
  1205  0078A4                     __ptext2:
  1206                           	opt stack 0
  1207  0078A4                     _flashWriteData:
  1208                           	opt stack 23
  1209                           
  1210                           ;FlashWrite.c: 12: int i, k, bytesWritten = 0, timesToWrite = 1, nextDataSet;
  1211                           
  1212                           ;incstack = 0
  1213  0078A4  0E00               	movlw	0
  1214  0078A6  0101               	movlb	1	; () banked
  1215  0078A8  6FD7               	movwf	(flashWriteData@bytesWritten+1)& (0+255),b
  1216  0078AA  0E00               	movlw	0
  1217  0078AC  0101               	movlb	1	; () banked
  1218  0078AE  6FD6               	movwf	flashWriteData@bytesWritten& (0+255),b
  1219  0078B0  0E00               	movlw	0
  1220  0078B2  0101               	movlb	1	; () banked
  1221  0078B4  6FCD               	movwf	(flashWriteData@timesToWrite+1)& (0+255),b
  1222  0078B6  0E01               	movlw	1
  1223  0078B8  0101               	movlb	1	; () banked
  1224  0078BA  6FCC               	movwf	flashWriteData@timesToWrite& (0+255),b
  1225                           
  1226                           ;FlashWrite.c: 13: int j = 16;
  1227  0078BC  0E00               	movlw	0
  1228  0078BE  0101               	movlb	1	; () banked
  1229  0078C0  6FC9               	movwf	(flashWriteData@j+1)& (0+255),b
  1230  0078C2  0E10               	movlw	16
  1231  0078C4  0101               	movlb	1	; () banked
  1232  0078C6  6FC8               	movwf	flashWriteData@j& (0+255),b
  1233                           
  1234                           ; BSR set to: 1
  1235                           ;FlashWrite.c: 14: uint32 newAddress = address;
  1236  0078C8  C03C  F1D8         	movff	flashWriteData@address,flashWriteData@newAddress
  1237  0078CC  C03D  F1D9         	movff	flashWriteData@address+1,flashWriteData@newAddress+1
  1238  0078D0  C03E  F1DA         	movff	flashWriteData@address+2,flashWriteData@newAddress+2
  1239  0078D4  C03F  F1DB         	movff	flashWriteData@address+3,flashWriteData@newAddress+3
  1240                           
  1241                           ; BSR set to: 1
  1242                           ;FlashWrite.c: 15: uint16 newSize = size;
  1243  0078D8  C03A  F1D0         	movff	flashWriteData@size,flashWriteData@newSize
  1244  0078DC  C03B  F1D1         	movff	flashWriteData@size+1,flashWriteData@newSize+1
  1245                           
  1246                           ;FlashWrite.c: 16: uint16 memoryBlock, currentStartPoint;
  1247                           ;FlashWrite.c: 17: uint16 newData[100];
  1248                           ;FlashWrite.c: 19: for(i = 0 ; i < size ; i++){
  1249  0078E0  0E00               	movlw	0
  1250  0078E2  0101               	movlb	1	; () banked
  1251  0078E4  6FDD               	movwf	(flashWriteData@i+1)& (0+255),b
  1252  0078E6  0E00               	movlw	0
  1253  0078E8  0101               	movlb	1	; () banked
  1254  0078EA  6FDC               	movwf	flashWriteData@i& (0+255),b
  1255  0078EC  D021               	goto	l1698
  1256  0078EE                     l1694:
  1257                           
  1258                           ; BSR set to: 1
  1259                           ;FlashWrite.c: 20: newData[i] = data[i];
  1260  0078EE  90D8               	bcf	status,0,c
  1261  0078F0  0101               	movlb	1	; () banked
  1262  0078F2  35DC               	rlcf	flashWriteData@i& (0+255),w,b
  1263  0078F4  6ED9               	movwf	fsr2l,c
  1264  0078F6  0101               	movlb	1	; () banked
  1265  0078F8  35DD               	rlcf	(flashWriteData@i+1)& (0+255),w,b
  1266  0078FA  6EDA               	movwf	fsr2h,c
  1267  0078FC  5038               	movf	flashWriteData@data,w,c
  1268  0078FE  26D9               	addwf	fsr2l,f,c
  1269  007900  5039               	movf	flashWriteData@data+1,w,c
  1270  007902  22DA               	addwfc	fsr2h,f,c
  1271  007904  0E00               	movlw	low flashWriteData@newData
  1272  007906  6E40               	movwf	??_flashWriteData& (0+255),c
  1273  007908  0E01               	movlw	high flashWriteData@newData
  1274  00790A  6E41               	movwf	(??_flashWriteData+1)& (0+255),c
  1275  00790C  90D8               	bcf	status,0,c
  1276  00790E  0101               	movlb	1	; () banked
  1277  007910  35DC               	rlcf	flashWriteData@i& (0+255),w,b
  1278  007912  6EE1               	movwf	fsr1l,c
  1279  007914  0101               	movlb	1	; () banked
  1280  007916  35DD               	rlcf	(flashWriteData@i+1)& (0+255),w,b
  1281  007918  6EE2               	movwf	fsr1h,c
  1282  00791A  5040               	movf	??_flashWriteData,w,c
  1283  00791C  26E1               	addwf	fsr1l,f,c
  1284  00791E  5041               	movf	??_flashWriteData+1,w,c
  1285  007920  22E2               	addwfc	fsr1h,f,c
  1286  007922  CFDE FFE6          	movff	postinc2,postinc1
  1287  007926  CFDD FFE5          	movff	postdec2,postdec1
  1288                           
  1289                           ; BSR set to: 1
  1290  00792A  0101               	movlb	1	; () banked
  1291  00792C  4BDC               	infsnz	flashWriteData@i& (0+255),f,b
  1292  00792E  2BDD               	incf	(flashWriteData@i+1)& (0+255),f,b
  1293  007930                     l1698:
  1294                           
  1295                           ; BSR set to: 1
  1296  007930  503A               	movf	flashWriteData@size,w,c
  1297  007932  0101               	movlb	1	; () banked
  1298  007934  5DDC               	subwf	flashWriteData@i& (0+255),w,b
  1299  007936  503B               	movf	flashWriteData@size+1,w,c
  1300  007938  0101               	movlb	1	; () banked
  1301  00793A  59DD               	subwfb	(flashWriteData@i+1)& (0+255),w,b
  1302  00793C  A0D8               	btfss	status,0,c
  1303  00793E  D7D7               	goto	l1694
  1304                           
  1305                           ; BSR set to: 1
  1306                           ;FlashWrite.c: 21: }
  1307                           ;FlashWrite.c: 23: currentStartPoint = (address - ((address/64)*64))/2;
  1308                           
  1309                           ; BSR set to: 1
  1310  007940  C03C  F040         	movff	flashWriteData@address,??_flashWriteData
  1311  007944  C03D  F041         	movff	flashWriteData@address+1,??_flashWriteData+1
  1312  007948  C03E  F042         	movff	flashWriteData@address+2,??_flashWriteData+2
  1313  00794C  C03F  F043         	movff	flashWriteData@address+3,??_flashWriteData+3
  1314  007950  0E07               	movlw	7
  1315  007952  D005               	goto	u940
  1316  007954                     u945:
  1317  007954  90D8               	bcf	status,0,c
  1318  007956  3243               	rrcf	??_flashWriteData+3,f,c
  1319  007958  3242               	rrcf	??_flashWriteData+2,f,c
  1320  00795A  3241               	rrcf	??_flashWriteData+1,f,c
  1321  00795C  3240               	rrcf	??_flashWriteData,f,c
  1322  00795E                     u940:
  1323  00795E  2EE8               	decfsz	wreg,f,c
  1324  007960  D7F9               	goto	u945
  1325  007962  0E06               	movlw	6
  1326  007964                     u955:
  1327  007964  90D8               	bcf	status,0,c
  1328  007966  3640               	rlcf	??_flashWriteData,f,c
  1329  007968  3641               	rlcf	??_flashWriteData+1,f,c
  1330  00796A  3642               	rlcf	??_flashWriteData+2,f,c
  1331  00796C  3643               	rlcf	??_flashWriteData+3,f,c
  1332  00796E  2EE8               	decfsz	wreg,f,c
  1333  007970  D7F9               	goto	u955
  1334  007972  1E40               	comf	??_flashWriteData,f,c
  1335  007974  1E41               	comf	??_flashWriteData+1,f,c
  1336  007976  1E42               	comf	??_flashWriteData+2,f,c
  1337  007978  1E43               	comf	??_flashWriteData+3,f,c
  1338  00797A  2A40               	incf	??_flashWriteData,f,c
  1339  00797C  0E00               	movlw	0
  1340  00797E  2241               	addwfc	??_flashWriteData+1,f,c
  1341  007980  2242               	addwfc	??_flashWriteData+2,f,c
  1342  007982  2243               	addwfc	??_flashWriteData+3,f,c
  1343  007984  503C               	movf	flashWriteData@address,w,c
  1344  007986  2440               	addwf	??_flashWriteData,w,c
  1345  007988  6E44               	movwf	(??_flashWriteData+4)& (0+255),c
  1346  00798A  503D               	movf	flashWriteData@address+1,w,c
  1347  00798C  2041               	addwfc	??_flashWriteData+1,w,c
  1348  00798E  6E45               	movwf	(??_flashWriteData+5)& (0+255),c
  1349  007990  503E               	movf	flashWriteData@address+2,w,c
  1350  007992  2042               	addwfc	??_flashWriteData+2,w,c
  1351  007994  6E46               	movwf	(??_flashWriteData+6)& (0+255),c
  1352  007996  503F               	movf	flashWriteData@address+3,w,c
  1353  007998  2043               	addwfc	??_flashWriteData+3,w,c
  1354  00799A  6E47               	movwf	(??_flashWriteData+7)& (0+255),c
  1355  00799C  90D8               	bcf	status,0,c
  1356  00799E  3247               	rrcf	??_flashWriteData+7,f,c
  1357  0079A0  3246               	rrcf	??_flashWriteData+6,f,c
  1358  0079A2  3245               	rrcf	??_flashWriteData+5,f,c
  1359  0079A4  3244               	rrcf	??_flashWriteData+4,f,c
  1360  0079A6  C044  F1D4         	movff	??_flashWriteData+4,flashWriteData@currentStartPoint
  1361  0079AA  C045  F1D5         	movff	??_flashWriteData+5,flashWriteData@currentStartPoint+1
  1362                           
  1363                           ;FlashWrite.c: 24: if((size+currentStartPoint) > 32){
  1364  0079AE  C03A  F040         	movff	flashWriteData@size,??_flashWriteData
  1365  0079B2  C03B  F041         	movff	flashWriteData@size+1,??_flashWriteData+1
  1366  0079B6  0101               	movlb	1	; () banked
  1367  0079B8  51D4               	movf	flashWriteData@currentStartPoint& (0+255),w,b
  1368  0079BA  2640               	addwf	??_flashWriteData,f,c
  1369  0079BC  0101               	movlb	1	; () banked
  1370  0079BE  51D5               	movf	(flashWriteData@currentStartPoint+1)& (0+255),w,b
  1371  0079C0  2241               	addwfc	??_flashWriteData+1,f,c
  1372  0079C2  0E21               	movlw	33
  1373  0079C4  5C40               	subwf	??_flashWriteData,w,c
  1374  0079C6  0E00               	movlw	0
  1375  0079C8  5841               	subwfb	??_flashWriteData+1,w,c
  1376  0079CA  A0D8               	btfss	status,0,c
  1377  0079CC  D029               	goto	l1712
  1378                           
  1379                           ; BSR set to: 1
  1380                           ;FlashWrite.c: 25: i = (size+currentStartPoint) - 32;
  1381  0079CE  C03A  F040         	movff	flashWriteData@size,??_flashWriteData
  1382  0079D2  C03B  F041         	movff	flashWriteData@size+1,??_flashWriteData+1
  1383  0079D6  0101               	movlb	1	; () banked
  1384  0079D8  51D4               	movf	flashWriteData@currentStartPoint& (0+255),w,b
  1385  0079DA  2640               	addwf	??_flashWriteData,f,c
  1386  0079DC  0101               	movlb	1	; () banked
  1387  0079DE  51D5               	movf	(flashWriteData@currentStartPoint+1)& (0+255),w,b
  1388  0079E0  2241               	addwfc	??_flashWriteData+1,f,c
  1389  0079E2  0EE0               	movlw	224
  1390  0079E4  2440               	addwf	??_flashWriteData,w,c
  1391  0079E6  0101               	movlb	1	; () banked
  1392  0079E8  6FDC               	movwf	flashWriteData@i& (0+255),b
  1393  0079EA  0EFF               	movlw	255
  1394  0079EC  2041               	addwfc	??_flashWriteData+1,w,c
  1395  0079EE  D008               	goto	L6
  1396  0079F0                     l1706:
  1397                           
  1398                           ; BSR set to: 1
  1399                           ;FlashWrite.c: 28: i = i - 32;
  1400  0079F0  0EE0               	movlw	224
  1401  0079F2  0101               	movlb	1	; () banked
  1402  0079F4  25DC               	addwf	flashWriteData@i& (0+255),w,b
  1403  0079F6  0101               	movlb	1	; () banked
  1404  0079F8  6FDC               	movwf	flashWriteData@i& (0+255),b
  1405  0079FA  0EFF               	movlw	255
  1406  0079FC  0101               	movlb	1	; () banked
  1407  0079FE  21DD               	addwfc	(flashWriteData@i+1)& (0+255),w,b
  1408  007A00                     L6:
  1409  007A00  0101               	movlb	1	; () banked
  1410  007A02  6FDD               	movwf	(flashWriteData@i+1)& (0+255),b
  1411                           
  1412                           ; BSR set to: 1
  1413                           ;FlashWrite.c: 29: timesToWrite++;
  1414  007A04  0101               	movlb	1	; () banked
  1415  007A06  4BCC               	infsnz	flashWriteData@timesToWrite& (0+255),f,b
  1416  007A08  2BCD               	incf	(flashWriteData@timesToWrite+1)& (0+255),f,b
  1417                           
  1418                           ; BSR set to: 1
  1419                           
  1420                           ; BSR set to: 1
  1421  007A0A  0101               	movlb	1	; () banked
  1422  007A0C  51DD               	movf	(flashWriteData@i+1)& (0+255),w,b
  1423  007A0E  0A80               	xorlw	128
  1424  007A10  6EF3               	movwf	prodl,c
  1425  007A12  0E80               	movlw	128
  1426  007A14  5CF3               	subwf	prodl,w,c
  1427  007A16  0E21               	movlw	33
  1428  007A18  B4D8               	btfsc	status,2,c
  1429  007A1A  5DDC               	subwf	flashWriteData@i& (0+255),w,b
  1430  007A1C  B0D8               	btfsc	status,0,c
  1431  007A1E  D7E8               	goto	l1706
  1432  007A20                     l1712:
  1433                           
  1434                           ; BSR set to: 1
  1435                           ;FlashWrite.c: 30: }
  1436                           ;FlashWrite.c: 31: }
  1437                           ;FlashWrite.c: 33: for(i = 0 ; i < timesToWrite ; i++){
  1438  007A20  0E00               	movlw	0
  1439  007A22  0101               	movlb	1	; () banked
  1440  007A24  6FDD               	movwf	(flashWriteData@i+1)& (0+255),b
  1441  007A26  0E00               	movlw	0
  1442  007A28  0101               	movlb	1	; () banked
  1443  007A2A  6FDC               	movwf	flashWriteData@i& (0+255),b
  1444  007A2C  D15A               	goto	l1744
  1445  007A2E                     l1714:
  1446                           
  1447                           ; BSR set to: 1
  1448                           ;FlashWrite.c: 34: memoryBlock = (newAddress/64)+1;
  1449  007A2E  0101               	movlb	1	; () banked
  1450  007A30  C1D8  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1451  007A34  0101               	movlb	1	; () banked
  1452  007A36  C1D9  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1453  007A3A  0101               	movlb	1	; () banked
  1454  007A3C  C1DA  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1455  007A40  0101               	movlb	1	; () banked
  1456  007A42  C1DB  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1457  007A46  0E07               	movlw	7
  1458  007A48  D005               	goto	u980
  1459  007A4A                     u985:
  1460  007A4A  90D8               	bcf	status,0,c
  1461  007A4C  3243               	rrcf	??_flashWriteData+3,f,c
  1462  007A4E  3242               	rrcf	??_flashWriteData+2,f,c
  1463  007A50  3241               	rrcf	??_flashWriteData+1,f,c
  1464  007A52  3240               	rrcf	??_flashWriteData,f,c
  1465  007A54                     u980:
  1466  007A54  2EE8               	decfsz	wreg,f,c
  1467  007A56  D7F9               	goto	u985
  1468  007A58  0E01               	movlw	1
  1469  007A5A  2440               	addwf	??_flashWriteData,w,c
  1470  007A5C  0101               	movlb	1	; () banked
  1471  007A5E  6FD2               	movwf	flashWriteData@memoryBlock& (0+255),b
  1472  007A60  0E00               	movlw	0
  1473  007A62  2041               	addwfc	??_flashWriteData+1,w,c
  1474  007A64  0101               	movlb	1	; () banked
  1475  007A66  6FD3               	movwf	(flashWriteData@memoryBlock+1)& (0+255),b
  1476                           
  1477                           ; BSR set to: 1
  1478                           ;FlashWrite.c: 35: flashReadBlock(blockBuffer, 64, memoryBlock);
  1479  007A68  0102               	movlb	2	; () banked
  1480  007A6A  0E02               	movlw	high _blockBuffer
  1481  007A6C  6E27               	movwf	flashReadBlock@data+1,c
  1482  007A6E  0102               	movlb	2	; () banked
  1483  007A70  0EA0               	movlw	low _blockBuffer
  1484  007A72  6E26               	movwf	flashReadBlock@data,c
  1485  007A74  0E00               	movlw	0
  1486  007A76  6E29               	movwf	flashReadBlock@size+1,c
  1487  007A78  0E40               	movlw	64
  1488  007A7A  6E28               	movwf	flashReadBlock@size,c
  1489  007A7C  0101               	movlb	1	; () banked
  1490  007A7E  C1D2  F02A         	movff	flashWriteData@memoryBlock,flashReadBlock@blockNumber
  1491  007A82  0101               	movlb	1	; () banked
  1492  007A84  C1D3  F02B         	movff	flashWriteData@memoryBlock+1,flashReadBlock@blockNumber+1
  1493  007A88  6A2C               	clrf	flashReadBlock@blockNumber+2,c
  1494  007A8A  6A2D               	clrf	flashReadBlock@blockNumber+3,c
  1495  007A8C  EC6D  F037         	call	_flashReadBlock	;wreg free
  1496                           
  1497                           ;FlashWrite.c: 36: loadHalfBuffer();
  1498  007A90  ECB5  F037         	call	_loadHalfBuffer	;wreg free
  1499                           
  1500                           ;FlashWrite.c: 37: bytesWritten = bytesWritten + (overwriteBufferData(newData, newSize, 
      +                          currentStartPoint));
  1501  007A94  0101               	movlb	1	; () banked
  1502  007A96  0E01               	movlw	high flashWriteData@newData
  1503  007A98  6E0A               	movwf	overwriteBufferData@data+1,c
  1504  007A9A  0101               	movlb	1	; () banked
  1505  007A9C  0E00               	movlw	low flashWriteData@newData
  1506  007A9E  6E09               	movwf	overwriteBufferData@data,c
  1507  007AA0  C1D0  F00B         	movff	flashWriteData@newSize,overwriteBufferData@sizeToWrite
  1508  007AA4  C1D1  F00C         	movff	flashWriteData@newSize+1,overwriteBufferData@sizeToWrite+1
  1509  007AA8  C1D4  F00D         	movff	flashWriteData@currentStartPoint,overwriteBufferData@bufferStartPoint
  1510  007AAC  C1D5  F00E         	movff	flashWriteData@currentStartPoint+1,overwriteBufferData@bufferStartPoint+1
  1511  007AB0  EC16  F038         	call	_overwriteBufferData	;wreg free
  1512  007AB4  0101               	movlb	1	; () banked
  1513  007AB6  51D6               	movf	flashWriteData@bytesWritten& (0+255),w,b
  1514  007AB8  2409               	addwf	?_overwriteBufferData,w,c
  1515  007ABA  0101               	movlb	1	; () banked
  1516  007ABC  6FD6               	movwf	flashWriteData@bytesWritten& (0+255),b
  1517  007ABE  0101               	movlb	1	; () banked
  1518  007AC0  51D7               	movf	(flashWriteData@bytesWritten+1)& (0+255),w,b
  1519  007AC2  200A               	addwfc	?_overwriteBufferData+1,w,c
  1520  007AC4  0101               	movlb	1	; () banked
  1521  007AC6  6FD7               	movwf	(flashWriteData@bytesWritten+1)& (0+255),b
  1522                           
  1523                           ; BSR set to: 1
  1524                           ;FlashWrite.c: 39: rowErase((newAddress/64)*64);
  1525  007AC8  0101               	movlb	1	; () banked
  1526  007ACA  C1D8  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1527  007ACE  0101               	movlb	1	; () banked
  1528  007AD0  C1D9  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1529  007AD4  0101               	movlb	1	; () banked
  1530  007AD6  C1DA  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1531  007ADA  0101               	movlb	1	; () banked
  1532  007ADC  C1DB  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1533  007AE0  0E07               	movlw	7
  1534  007AE2  D005               	goto	u990
  1535  007AE4                     u995:
  1536  007AE4  90D8               	bcf	status,0,c
  1537  007AE6  3243               	rrcf	??_flashWriteData+3,f,c
  1538  007AE8  3242               	rrcf	??_flashWriteData+2,f,c
  1539  007AEA  3241               	rrcf	??_flashWriteData+1,f,c
  1540  007AEC  3240               	rrcf	??_flashWriteData,f,c
  1541  007AEE                     u990:
  1542  007AEE  2EE8               	decfsz	wreg,f,c
  1543  007AF0  D7F9               	goto	u995
  1544  007AF2  0E06               	movlw	6
  1545  007AF4                     u1005:
  1546  007AF4  90D8               	bcf	status,0,c
  1547  007AF6  3640               	rlcf	??_flashWriteData,f,c
  1548  007AF8  3641               	rlcf	??_flashWriteData+1,f,c
  1549  007AFA  3642               	rlcf	??_flashWriteData+2,f,c
  1550  007AFC  3643               	rlcf	??_flashWriteData+3,f,c
  1551  007AFE  2EE8               	decfsz	wreg,f,c
  1552  007B00  D7F9               	goto	u1005
  1553  007B02  C040  F026         	movff	??_flashWriteData,rowErase@address
  1554  007B06  C041  F027         	movff	??_flashWriteData+1,rowErase@address+1
  1555  007B0A  C042  F028         	movff	??_flashWriteData+2,rowErase@address+2
  1556  007B0E  C043  F029         	movff	??_flashWriteData+3,rowErase@address+3
  1557  007B12  EC7E  F039         	call	_rowErase	;wreg free
  1558                           
  1559                           ;FlashWrite.c: 40: flashSetAddress((newAddress/64)*64);
  1560  007B16  0101               	movlb	1	; () banked
  1561  007B18  C1D8  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1562  007B1C  0101               	movlb	1	; () banked
  1563  007B1E  C1D9  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1564  007B22  0101               	movlb	1	; () banked
  1565  007B24  C1DA  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1566  007B28  0101               	movlb	1	; () banked
  1567  007B2A  C1DB  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1568  007B2E  0E07               	movlw	7
  1569  007B30  D005               	goto	u1010
  1570  007B32                     u1015:
  1571  007B32  90D8               	bcf	status,0,c
  1572  007B34  3243               	rrcf	??_flashWriteData+3,f,c
  1573  007B36  3242               	rrcf	??_flashWriteData+2,f,c
  1574  007B38  3241               	rrcf	??_flashWriteData+1,f,c
  1575  007B3A  3240               	rrcf	??_flashWriteData,f,c
  1576  007B3C                     u1010:
  1577  007B3C  2EE8               	decfsz	wreg,f,c
  1578  007B3E  D7F9               	goto	u1015
  1579  007B40  0E06               	movlw	6
  1580  007B42                     u1025:
  1581  007B42  90D8               	bcf	status,0,c
  1582  007B44  3640               	rlcf	??_flashWriteData,f,c
  1583  007B46  3641               	rlcf	??_flashWriteData+1,f,c
  1584  007B48  3642               	rlcf	??_flashWriteData+2,f,c
  1585  007B4A  3643               	rlcf	??_flashWriteData+3,f,c
  1586  007B4C  2EE8               	decfsz	wreg,f,c
  1587  007B4E  D7F9               	goto	u1025
  1588  007B50  C040  F012         	movff	??_flashWriteData,flashSetAddress@address
  1589  007B54  C041  F013         	movff	??_flashWriteData+1,flashSetAddress@address+1
  1590  007B58  C042  F014         	movff	??_flashWriteData+2,flashSetAddress@address+2
  1591  007B5C  C043  F015         	movff	??_flashWriteData+3,flashSetAddress@address+3
  1592  007B60  EC83  F038         	call	_flashSetAddress	;wreg free
  1593                           
  1594                           ;FlashWrite.c: 41: flashWriteBlock(halfBuffer1, halfBuffer2, memoryBlock);
  1595  007B64  0E00               	movlw	high _halfBuffer1
  1596  007B66  6E27               	movwf	flashWriteBlock@firstHalf+1,c
  1597  007B68  0E5A               	movlw	low _halfBuffer1
  1598  007B6A  6E26               	movwf	flashWriteBlock@firstHalf,c
  1599  007B6C  0102               	movlb	2	; () banked
  1600  007B6E  0E02               	movlw	high _halfBuffer2
  1601  007B70  6E29               	movwf	flashWriteBlock@secondHalf+1,c
  1602  007B72  0102               	movlb	2	; () banked
  1603  007B74  0EE0               	movlw	low _halfBuffer2
  1604  007B76  6E28               	movwf	flashWriteBlock@secondHalf,c
  1605  007B78  0101               	movlb	1	; () banked
  1606  007B7A  C1D2  F02A         	movff	flashWriteData@memoryBlock,flashWriteBlock@blockNumber
  1607  007B7E  0101               	movlb	1	; () banked
  1608  007B80  C1D3  F02B         	movff	flashWriteData@memoryBlock+1,flashWriteBlock@blockNumber+1
  1609  007B84  6A2C               	clrf	flashWriteBlock@blockNumber+2,c
  1610  007B86  6A2D               	clrf	flashWriteBlock@blockNumber+3,c
  1611  007B88  ECF5  F038         	call	_flashWriteBlock	;wreg free
  1612                           
  1613                           ;FlashWrite.c: 43: if(bytesWritten < size){
  1614  007B8C  503A               	movf	flashWriteData@size,w,c
  1615  007B8E  0101               	movlb	1	; () banked
  1616  007B90  5DD6               	subwf	flashWriteData@bytesWritten& (0+255),w,b
  1617  007B92  503B               	movf	flashWriteData@size+1,w,c
  1618  007B94  0101               	movlb	1	; () banked
  1619  007B96  59D7               	subwfb	(flashWriteData@bytesWritten+1)& (0+255),w,b
  1620  007B98  B0D8               	btfsc	status,0,c
  1621  007B9A  D0A0               	goto	l1742
  1622                           
  1623                           ; BSR set to: 1
  1624                           ;FlashWrite.c: 44: nextDataSet = bytesWritten;
  1625  007B9C  C1D6  F1CA         	movff	flashWriteData@bytesWritten,flashWriteData@nextDataSet
  1626  007BA0  C1D7  F1CB         	movff	flashWriteData@bytesWritten+1,flashWriteData@nextDataSet+1
  1627                           
  1628                           ; BSR set to: 1
  1629                           ;FlashWrite.c: 45: newAddress = (memoryBlock*64);
  1630  007BA4  0101               	movlb	1	; () banked
  1631  007BA6  C1D2  F040         	movff	flashWriteData@memoryBlock,??_flashWriteData
  1632  007BAA  0101               	movlb	1	; () banked
  1633  007BAC  C1D3  F041         	movff	flashWriteData@memoryBlock+1,??_flashWriteData+1
  1634  007BB0  0E06               	movlw	6
  1635  007BB2                     u1045:
  1636  007BB2  90D8               	bcf	status,0,c
  1637  007BB4  3640               	rlcf	??_flashWriteData,f,c
  1638  007BB6  3641               	rlcf	??_flashWriteData+1,f,c
  1639  007BB8  2EE8               	decfsz	wreg,f,c
  1640  007BBA  D7FB               	goto	u1045
  1641  007BBC  0101               	movlb	1	; () banked
  1642  007BBE  C040  F1D8         	movff	??_flashWriteData,flashWriteData@newAddress
  1643  007BC2  0101               	movlb	1	; () banked
  1644  007BC4  C041  F1D9         	movff	??_flashWriteData+1,flashWriteData@newAddress+1
  1645  007BC8  0101               	movlb	1	; () banked
  1646  007BCA  6BDA               	clrf	(flashWriteData@newAddress+2)& (0+255),b
  1647  007BCC  0101               	movlb	1	; () banked
  1648  007BCE  6BDB               	clrf	(flashWriteData@newAddress+3)& (0+255),b
  1649                           
  1650                           ;FlashWrite.c: 46: newSize = size - bytesWritten;
  1651  007BD0  0101               	movlb	1	; () banked
  1652  007BD2  C1D6  F040         	movff	flashWriteData@bytesWritten,??_flashWriteData
  1653  007BD6  0101               	movlb	1	; () banked
  1654  007BD8  C1D7  F041         	movff	flashWriteData@bytesWritten+1,??_flashWriteData+1
  1655  007BDC  1E40               	comf	??_flashWriteData,f,c
  1656  007BDE  1E41               	comf	??_flashWriteData+1,f,c
  1657  007BE0  4A40               	infsnz	??_flashWriteData,f,c
  1658  007BE2  2A41               	incf	??_flashWriteData+1,f,c
  1659  007BE4  503A               	movf	flashWriteData@size,w,c
  1660  007BE6  2440               	addwf	??_flashWriteData,w,c
  1661  007BE8  0101               	movlb	1	; () banked
  1662  007BEA  6FD0               	movwf	flashWriteData@newSize& (0+255),b
  1663  007BEC  503B               	movf	flashWriteData@size+1,w,c
  1664  007BEE  2041               	addwfc	??_flashWriteData+1,w,c
  1665  007BF0  0101               	movlb	1	; () banked
  1666  007BF2  6FD1               	movwf	(flashWriteData@newSize+1)& (0+255),b
  1667                           
  1668                           ;FlashWrite.c: 47: currentStartPoint = (newAddress - ((newAddress/64)*64))/2;
  1669  007BF4  0101               	movlb	1	; () banked
  1670  007BF6  C1D8  F040         	movff	flashWriteData@newAddress,??_flashWriteData
  1671  007BFA  0101               	movlb	1	; () banked
  1672  007BFC  C1D9  F041         	movff	flashWriteData@newAddress+1,??_flashWriteData+1
  1673  007C00  0101               	movlb	1	; () banked
  1674  007C02  C1DA  F042         	movff	flashWriteData@newAddress+2,??_flashWriteData+2
  1675  007C06  0101               	movlb	1	; () banked
  1676  007C08  C1DB  F043         	movff	flashWriteData@newAddress+3,??_flashWriteData+3
  1677  007C0C  0E07               	movlw	7
  1678  007C0E  D005               	goto	u1050
  1679  007C10                     u1055:
  1680  007C10  90D8               	bcf	status,0,c
  1681  007C12  3243               	rrcf	??_flashWriteData+3,f,c
  1682  007C14  3242               	rrcf	??_flashWriteData+2,f,c
  1683  007C16  3241               	rrcf	??_flashWriteData+1,f,c
  1684  007C18  3240               	rrcf	??_flashWriteData,f,c
  1685  007C1A                     u1050:
  1686  007C1A  2EE8               	decfsz	wreg,f,c
  1687  007C1C  D7F9               	goto	u1055
  1688  007C1E  0E06               	movlw	6
  1689  007C20                     u1065:
  1690  007C20  90D8               	bcf	status,0,c
  1691  007C22  3640               	rlcf	??_flashWriteData,f,c
  1692  007C24  3641               	rlcf	??_flashWriteData+1,f,c
  1693  007C26  3642               	rlcf	??_flashWriteData+2,f,c
  1694  007C28  3643               	rlcf	??_flashWriteData+3,f,c
  1695  007C2A  2EE8               	decfsz	wreg,f,c
  1696  007C2C  D7F9               	goto	u1065
  1697  007C2E  1E40               	comf	??_flashWriteData,f,c
  1698  007C30  1E41               	comf	??_flashWriteData+1,f,c
  1699  007C32  1E42               	comf	??_flashWriteData+2,f,c
  1700  007C34  1E43               	comf	??_flashWriteData+3,f,c
  1701  007C36  2A40               	incf	??_flashWriteData,f,c
  1702  007C38  0E00               	movlw	0
  1703  007C3A  2241               	addwfc	??_flashWriteData+1,f,c
  1704  007C3C  2242               	addwfc	??_flashWriteData+2,f,c
  1705  007C3E  2243               	addwfc	??_flashWriteData+3,f,c
  1706  007C40  0101               	movlb	1	; () banked
  1707  007C42  51D8               	movf	flashWriteData@newAddress& (0+255),w,b
  1708  007C44  2440               	addwf	??_flashWriteData,w,c
  1709  007C46  6E44               	movwf	(??_flashWriteData+4)& (0+255),c
  1710  007C48  0101               	movlb	1	; () banked
  1711  007C4A  51D9               	movf	(flashWriteData@newAddress+1)& (0+255),w,b
  1712  007C4C  2041               	addwfc	??_flashWriteData+1,w,c
  1713  007C4E  6E45               	movwf	(??_flashWriteData+5)& (0+255),c
  1714  007C50  0101               	movlb	1	; () banked
  1715  007C52  51DA               	movf	(flashWriteData@newAddress+2)& (0+255),w,b
  1716  007C54  2042               	addwfc	??_flashWriteData+2,w,c
  1717  007C56  6E46               	movwf	(??_flashWriteData+6)& (0+255),c
  1718  007C58  0101               	movlb	1	; () banked
  1719  007C5A  51DB               	movf	(flashWriteData@newAddress+3)& (0+255),w,b
  1720  007C5C  2043               	addwfc	??_flashWriteData+3,w,c
  1721  007C5E  6E47               	movwf	(??_flashWriteData+7)& (0+255),c
  1722  007C60  90D8               	bcf	status,0,c
  1723  007C62  3247               	rrcf	??_flashWriteData+7,f,c
  1724  007C64  3246               	rrcf	??_flashWriteData+6,f,c
  1725  007C66  3245               	rrcf	??_flashWriteData+5,f,c
  1726  007C68  3244               	rrcf	??_flashWriteData+4,f,c
  1727  007C6A  C044  F1D4         	movff	??_flashWriteData+4,flashWriteData@currentStartPoint
  1728  007C6E  C045  F1D5         	movff	??_flashWriteData+5,flashWriteData@currentStartPoint+1
  1729                           
  1730                           ; BSR set to: 1
  1731                           ;FlashWrite.c: 48: for(k = 0 ; k < newSize ; k++){
  1732  007C72  0E00               	movlw	0
  1733  007C74  0101               	movlb	1	; () banked
  1734  007C76  6FCF               	movwf	(flashWriteData@k+1)& (0+255),b
  1735  007C78  0E00               	movlw	0
  1736  007C7A  0101               	movlb	1	; () banked
  1737  007C7C  6FCE               	movwf	flashWriteData@k& (0+255),b
  1738  007C7E  D024               	goto	l1740
  1739  007C80                     l1734:
  1740                           
  1741                           ; BSR set to: 1
  1742                           ;FlashWrite.c: 49: newData[k] = data[nextDataSet];
  1743  007C80  90D8               	bcf	status,0,c
  1744  007C82  0101               	movlb	1	; () banked
  1745  007C84  35CA               	rlcf	flashWriteData@nextDataSet& (0+255),w,b
  1746  007C86  6ED9               	movwf	fsr2l,c
  1747  007C88  0101               	movlb	1	; () banked
  1748  007C8A  35CB               	rlcf	(flashWriteData@nextDataSet+1)& (0+255),w,b
  1749  007C8C  6EDA               	movwf	fsr2h,c
  1750  007C8E  5038               	movf	flashWriteData@data,w,c
  1751  007C90  26D9               	addwf	fsr2l,f,c
  1752  007C92  5039               	movf	flashWriteData@data+1,w,c
  1753  007C94  22DA               	addwfc	fsr2h,f,c
  1754  007C96  0E00               	movlw	low flashWriteData@newData
  1755  007C98  6E40               	movwf	??_flashWriteData& (0+255),c
  1756  007C9A  0E01               	movlw	high flashWriteData@newData
  1757  007C9C  6E41               	movwf	(??_flashWriteData+1)& (0+255),c
  1758  007C9E  90D8               	bcf	status,0,c
  1759  007CA0  0101               	movlb	1	; () banked
  1760  007CA2  35CE               	rlcf	flashWriteData@k& (0+255),w,b
  1761  007CA4  6EE1               	movwf	fsr1l,c
  1762  007CA6  0101               	movlb	1	; () banked
  1763  007CA8  35CF               	rlcf	(flashWriteData@k+1)& (0+255),w,b
  1764  007CAA  6EE2               	movwf	fsr1h,c
  1765  007CAC  5040               	movf	??_flashWriteData,w,c
  1766  007CAE  26E1               	addwf	fsr1l,f,c
  1767  007CB0  5041               	movf	??_flashWriteData+1,w,c
  1768  007CB2  22E2               	addwfc	fsr1h,f,c
  1769  007CB4  CFDE FFE6          	movff	postinc2,postinc1
  1770  007CB8  CFDD FFE5          	movff	postdec2,postdec1
  1771                           
  1772                           ; BSR set to: 1
  1773                           ;FlashWrite.c: 50: nextDataSet++;
  1774  007CBC  0101               	movlb	1	; () banked
  1775  007CBE  4BCA               	infsnz	flashWriteData@nextDataSet& (0+255),f,b
  1776  007CC0  2BCB               	incf	(flashWriteData@nextDataSet+1)& (0+255),f,b
  1777                           
  1778                           ; BSR set to: 1
  1779  007CC2  0101               	movlb	1	; () banked
  1780  007CC4  4BCE               	infsnz	flashWriteData@k& (0+255),f,b
  1781  007CC6  2BCF               	incf	(flashWriteData@k+1)& (0+255),f,b
  1782  007CC8                     l1740:
  1783                           
  1784                           ; BSR set to: 1
  1785  007CC8  0101               	movlb	1	; () banked
  1786  007CCA  51D0               	movf	flashWriteData@newSize& (0+255),w,b
  1787  007CCC  0101               	movlb	1	; () banked
  1788  007CCE  5DCE               	subwf	flashWriteData@k& (0+255),w,b
  1789  007CD0  0101               	movlb	1	; () banked
  1790  007CD2  51D1               	movf	(flashWriteData@newSize+1)& (0+255),w,b
  1791  007CD4  0101               	movlb	1	; () banked
  1792  007CD6  59CF               	subwfb	(flashWriteData@k+1)& (0+255),w,b
  1793  007CD8  A0D8               	btfss	status,0,c
  1794  007CDA  D7D2               	goto	l1734
  1795  007CDC                     l1742:
  1796                           
  1797                           ; BSR set to: 1
  1798  007CDC  0101               	movlb	1	; () banked
  1799  007CDE  4BDC               	infsnz	flashWriteData@i& (0+255),f,b
  1800  007CE0  2BDD               	incf	(flashWriteData@i+1)& (0+255),f,b
  1801  007CE2                     l1744:
  1802                           
  1803                           ; BSR set to: 1
  1804  007CE2  0101               	movlb	1	; () banked
  1805  007CE4  51DD               	movf	(flashWriteData@i+1)& (0+255),w,b
  1806  007CE6  0A80               	xorlw	128
  1807  007CE8  6E40               	movwf	??_flashWriteData& (0+255),c
  1808  007CEA  0101               	movlb	1	; () banked
  1809  007CEC  51CC               	movf	flashWriteData@timesToWrite& (0+255),w,b
  1810  007CEE  0101               	movlb	1	; () banked
  1811  007CF0  5DDC               	subwf	flashWriteData@i& (0+255),w,b
  1812  007CF2  0101               	movlb	1	; () banked
  1813  007CF4  51CD               	movf	(flashWriteData@timesToWrite+1)& (0+255),w,b
  1814  007CF6  0A80               	xorlw	128
  1815  007CF8  5840               	subwfb	??_flashWriteData& (0+255),w,c
  1816  007CFA  B0D8               	btfsc	status,0,c
  1817                           
  1818                           ; BSR set to: 1
  1819                           
  1820                           ; BSR set to: 1
  1821                           ;FlashWrite.c: 51: }
  1822                           ;FlashWrite.c: 52: }
  1823                           ;FlashWrite.c: 53: }
  1824                           ;FlashWrite.c: 54: return bytesWritten;
  1825                           ;	Return value of _flashWriteData is never used
  1826  007CFC  0012               	return	
  1827  007CFE  D697               	goto	l1714
  1828  007D00                     __end_of_flashWriteData:
  1829                           	opt stack 0
  1830                           prodl	equ	0xFF3
  1831                           postinc0	equ	0xFEE
  1832                           wreg	equ	0xFE8
  1833                           postinc1	equ	0xFE6
  1834                           postdec1	equ	0xFE5
  1835                           fsr1h	equ	0xFE2
  1836                           fsr1l	equ	0xFE1
  1837                           postinc2	equ	0xFDE
  1838                           postdec2	equ	0xFDD
  1839                           fsr2h	equ	0xFDA
  1840                           fsr2l	equ	0xFD9
  1841                           status	equ	0xFD8
  1842                           
  1843 ;; *************** function _rowErase *****************
  1844 ;; Defined at:
  1845 ;;		line 236 in file "../src/PIC18/FlashProg.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;  address         4   37[COMRAM] unsigned long 
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;  i               2   41[COMRAM] int 
  1850 ;; Return value:  Size  Location     Type
  1851 ;;		None               void
  1852 ;; Registers used:
  1853 ;;		wreg, status,2, status,0, cstack
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1859 ;;      Params:         4       0       0       0       0       0       0
  1860 ;;      Locals:         2       0       0       0       0       0       0
  1861 ;;      Temps:          0       0       0       0       0       0       0
  1862 ;;      Totals:         6       0       0       0       0       0       0
  1863 ;;Total ram usage:        6 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    5
  1866 ;; This function calls:
  1867 ;;		_PGC_high
  1868 ;;		_PGC_low
  1869 ;;		_PGD_low
  1870 ;;		_flashSetAddress
  1871 ;;		_writeBits
  1872 ;;		_writeICSP
  1873 ;; This function is called by:
  1874 ;;		_flashWriteData
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text3
  1879  0072FC                     __ptext3:
  1880                           	opt stack 0
  1881  0072FC                     _rowErase:
  1882                           	opt stack 23
  1883                           
  1884                           ;FlashProg.c: 237: int i;
  1885                           ;FlashProg.c: 238: writeICSP(0x0, 0x8ea6);
  1886                           
  1887                           ; BSR set to: 1
  1888                           ;incstack = 0
  1889  0072FC  0E00               	movlw	0
  1890  0072FE  6E0F               	movwf	writeICSP@commandByte+1,c
  1891  007300  0E00               	movlw	0
  1892  007302  6E0E               	movwf	writeICSP@commandByte,c
  1893  007304  0E8E               	movlw	142
  1894  007306  6E11               	movwf	writeICSP@dataBytes+1,c
  1895  007308  0EA6               	movlw	166
  1896  00730A  6E10               	movwf	writeICSP@dataBytes,c
  1897  00730C  EC52  F036         	call	_writeICSP	;wreg free
  1898                           
  1899                           ;FlashProg.c: 239: writeICSP(0x0, 0x9ca6);
  1900  007310  0E00               	movlw	0
  1901  007312  6E0F               	movwf	writeICSP@commandByte+1,c
  1902  007314  0E00               	movlw	0
  1903  007316  6E0E               	movwf	writeICSP@commandByte,c
  1904  007318  0E9C               	movlw	156
  1905  00731A  6E11               	movwf	writeICSP@dataBytes+1,c
  1906  00731C  0EA6               	movlw	166
  1907  00731E  6E10               	movwf	writeICSP@dataBytes,c
  1908  007320  EC52  F036         	call	_writeICSP	;wreg free
  1909                           
  1910                           ;FlashProg.c: 240: writeICSP(0x0, 0x84a6);
  1911  007324  0E00               	movlw	0
  1912  007326  6E0F               	movwf	writeICSP@commandByte+1,c
  1913  007328  0E00               	movlw	0
  1914  00732A  6E0E               	movwf	writeICSP@commandByte,c
  1915  00732C  0E84               	movlw	132
  1916  00732E  6E11               	movwf	writeICSP@dataBytes+1,c
  1917  007330  0EA6               	movlw	166
  1918  007332  6E10               	movwf	writeICSP@dataBytes,c
  1919  007334  EC52  F036         	call	_writeICSP	;wreg free
  1920                           
  1921                           ;FlashProg.c: 243: writeICSP(0x0, 0x6af8);
  1922  007338  0E00               	movlw	0
  1923  00733A  6E0F               	movwf	writeICSP@commandByte+1,c
  1924  00733C  0E00               	movlw	0
  1925  00733E  6E0E               	movwf	writeICSP@commandByte,c
  1926  007340  0E6A               	movlw	106
  1927  007342  6E11               	movwf	writeICSP@dataBytes+1,c
  1928  007344  0EF8               	movlw	248
  1929  007346  6E10               	movwf	writeICSP@dataBytes,c
  1930  007348  EC52  F036         	call	_writeICSP	;wreg free
  1931                           
  1932                           ;FlashProg.c: 244: writeICSP(0x0, 0x6af7);
  1933  00734C  0E00               	movlw	0
  1934  00734E  6E0F               	movwf	writeICSP@commandByte+1,c
  1935  007350  0E00               	movlw	0
  1936  007352  6E0E               	movwf	writeICSP@commandByte,c
  1937  007354  0E6A               	movlw	106
  1938  007356  6E11               	movwf	writeICSP@dataBytes+1,c
  1939  007358  0EF7               	movlw	247
  1940  00735A  6E10               	movwf	writeICSP@dataBytes,c
  1941  00735C  EC52  F036         	call	_writeICSP	;wreg free
  1942                           
  1943                           ;FlashProg.c: 245: writeICSP(0x0, 0x6af6);
  1944  007360  0E00               	movlw	0
  1945  007362  6E0F               	movwf	writeICSP@commandByte+1,c
  1946  007364  0E00               	movlw	0
  1947  007366  6E0E               	movwf	writeICSP@commandByte,c
  1948  007368  0E6A               	movlw	106
  1949  00736A  6E11               	movwf	writeICSP@dataBytes+1,c
  1950  00736C  0EF6               	movlw	246
  1951  00736E  6E10               	movwf	writeICSP@dataBytes,c
  1952  007370  EC52  F036         	call	_writeICSP	;wreg free
  1953                           
  1954                           ;FlashProg.c: 246: flashSetAddress(address);
  1955  007374  C026  F012         	movff	rowErase@address,flashSetAddress@address
  1956  007378  C027  F013         	movff	rowErase@address+1,flashSetAddress@address+1
  1957  00737C  C028  F014         	movff	rowErase@address+2,flashSetAddress@address+2
  1958  007380  C029  F015         	movff	rowErase@address+3,flashSetAddress@address+3
  1959  007384  EC83  F038         	call	_flashSetAddress	;wreg free
  1960                           
  1961                           ;FlashProg.c: 248: writeICSP(0x0, 0x88a6);
  1962  007388  0E00               	movlw	0
  1963  00738A  6E0F               	movwf	writeICSP@commandByte+1,c
  1964  00738C  0E00               	movlw	0
  1965  00738E  6E0E               	movwf	writeICSP@commandByte,c
  1966  007390  0E88               	movlw	136
  1967  007392  6E11               	movwf	writeICSP@dataBytes+1,c
  1968  007394  0EA6               	movlw	166
  1969  007396  6E10               	movwf	writeICSP@dataBytes,c
  1970  007398  EC52  F036         	call	_writeICSP	;wreg free
  1971                           
  1972                           ;FlashProg.c: 249: writeICSP(0x0, 0x82a6);
  1973  00739C  0E00               	movlw	0
  1974  00739E  6E0F               	movwf	writeICSP@commandByte+1,c
  1975  0073A0  0E00               	movlw	0
  1976  0073A2  6E0E               	movwf	writeICSP@commandByte,c
  1977  0073A4  0E82               	movlw	130
  1978  0073A6  6E11               	movwf	writeICSP@dataBytes+1,c
  1979  0073A8  0EA6               	movlw	166
  1980  0073AA  6E10               	movwf	writeICSP@dataBytes,c
  1981  0073AC  EC52  F036         	call	_writeICSP	;wreg free
  1982                           
  1983                           ;FlashProg.c: 250: writeBits(0x0, 3);
  1984  0073B0  0E00               	movlw	0
  1985  0073B2  6E06               	movwf	writeBits@pattern+1,c
  1986  0073B4  0E00               	movlw	0
  1987  0073B6  6E05               	movwf	writeBits@pattern,c
  1988  0073B8  0E00               	movlw	0
  1989  0073BA  6E08               	movwf	writeBits@bitsToWrite+1,c
  1990  0073BC  0E03               	movlw	3
  1991  0073BE  6E07               	movwf	writeBits@bitsToWrite,c
  1992  0073C0  EC93  F036         	call	_writeBits	;wreg free
  1993                           
  1994                           ;FlashProg.c: 251: PGC_high();
  1995  0073C4  ECDB  F035         	call	_PGC_high	;wreg free
  1996                           
  1997                           ;FlashProg.c: 252: PGD_low();
  1998  0073C8  ECF0  F035         	call	_PGD_low	;wreg free
  1999                           
  2000                           ;FlashProg.c: 253: for(i = 0; i < 25 ; i++){}
  2001  0073CC  0E00               	movlw	0
  2002  0073CE  6E2B               	movwf	rowErase@i+1,c
  2003  0073D0  0E00               	movlw	0
  2004  0073D2  6E2A               	movwf	rowErase@i,c
  2005  0073D4  502B               	movf	rowErase@i+1,w,c
  2006  0073D6  0A80               	xorlw	128
  2007  0073D8  0F80               	addlw	-128
  2008  0073DA  0E19               	movlw	25
  2009  0073DC  B4D8               	btfsc	status,2,c
  2010  0073DE  5C2A               	subwf	rowErase@i,w,c
  2011  0073E0  B0D8               	btfsc	status,0,c
  2012  0073E2  D003               	goto	l1592
  2013  0073E4  4A2A               	infsnz	rowErase@i,f,c
  2014  0073E6  2A2B               	incf	rowErase@i+1,f,c
  2015  0073E8  D7F5               	goto	L7
  2016  0073EA                     l1592:
  2017                           
  2018                           ;FlashProg.c: 254: PGC_low();
  2019  0073EA  ECDD  F035         	call	_PGC_low	;wreg free
  2020                           
  2021                           ;FlashProg.c: 255: for(i = 0; i < 25 ; i++){}
  2022  0073EE  0E00               	movlw	0
  2023  0073F0  6E2B               	movwf	rowErase@i+1,c
  2024  0073F2  0E00               	movlw	0
  2025  0073F4  6E2A               	movwf	rowErase@i,c
  2026  0073F6  502B               	movf	rowErase@i+1,w,c
  2027  0073F8  0A80               	xorlw	128
  2028  0073FA  0F80               	addlw	-128
  2029  0073FC  0E19               	movlw	25
  2030  0073FE  B4D8               	btfsc	status,2,c
  2031  007400  5C2A               	subwf	rowErase@i,w,c
  2032  007402  B0D8               	btfsc	status,0,c
  2033  007404  D003               	goto	l1604
  2034  007406  4A2A               	infsnz	rowErase@i,f,c
  2035  007408  2A2B               	incf	rowErase@i+1,f,c
  2036  00740A  D7F5               	goto	L8
  2037  00740C                     l1604:
  2038                           
  2039                           ;FlashProg.c: 256: writeBits(0x0, 16);
  2040  00740C  0E00               	movlw	0
  2041  00740E  6E06               	movwf	writeBits@pattern+1,c
  2042  007410  0E00               	movlw	0
  2043  007412  6E05               	movwf	writeBits@pattern,c
  2044  007414  0E00               	movlw	0
  2045  007416  6E08               	movwf	writeBits@bitsToWrite+1,c
  2046  007418  0E10               	movlw	16
  2047  00741A  6E07               	movwf	writeBits@bitsToWrite,c
  2048  00741C  EC93  F036         	call	_writeBits	;wreg free
  2049  007420  0012               	return	
  2050  007422                     __end_of_rowErase:
  2051                           	opt stack 0
  2052                           prodl	equ	0xFF3
  2053                           postinc0	equ	0xFEE
  2054                           wreg	equ	0xFE8
  2055                           postinc1	equ	0xFE6
  2056                           postdec1	equ	0xFE5
  2057                           fsr1h	equ	0xFE2
  2058                           fsr1l	equ	0xFE1
  2059                           postinc2	equ	0xFDE
  2060                           postdec2	equ	0xFDD
  2061                           fsr2h	equ	0xFDA
  2062                           fsr2l	equ	0xFD9
  2063                           status	equ	0xFD8
  2064                           
  2065 ;; *************** function _overwriteBufferData *****************
  2066 ;; Defined at:
  2067 ;;		line 57 in file "../src/PIC18/FlashWrite.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;  data            2    8[COMRAM] PTR unsigned int 
  2070 ;;		 -> flashWriteData@newData(200), 
  2071 ;;  sizeToWrite     2   10[COMRAM] unsigned int 
  2072 ;;  bufferStartP    2   12[COMRAM] unsigned int 
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;  i               2   26[COMRAM] int 
  2075 ;;  availableWri    2   24[COMRAM] int 
  2076 ;;  start           2   22[COMRAM] int 
  2077 ;;  bytesWritten    2   20[COMRAM] int 
  2078 ;;  bytesLeft       2   18[COMRAM] int 
  2079 ;;  j               2   16[COMRAM] int 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  2    8[COMRAM] int 
  2082 ;; Registers used:
  2083 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2089 ;;      Params:         6       0       0       0       0       0       0
  2090 ;;      Locals:        12       0       0       0       0       0       0
  2091 ;;      Temps:          2       0       0       0       0       0       0
  2092 ;;      Totals:        20       0       0       0       0       0       0
  2093 ;;Total ram usage:       20 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    1
  2096 ;; This function calls:
  2097 ;;		_loadHalfBuffer
  2098 ;; This function is called by:
  2099 ;;		_flashWriteData
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text4
  2104  00702C                     __ptext4:
  2105                           	opt stack 0
  2106  00702C                     _overwriteBufferData:
  2107                           	opt stack 27
  2108                           
  2109                           ;FlashWrite.c: 58: int bytesWritten, availableWriteSpace, bytesLeft, start;
  2110                           ;FlashWrite.c: 59: int i, j = 16;
  2111                           
  2112                           ;incstack = 0
  2113  00702C  0E00               	movlw	0
  2114  00702E  6E12               	movwf	overwriteBufferData@j+1,c
  2115  007030  0E10               	movlw	16
  2116  007032  6E11               	movwf	overwriteBufferData@j,c
  2117                           
  2118                           ;FlashWrite.c: 61: start = bufferStartPoint;
  2119  007034  C00D  F017         	movff	overwriteBufferData@bufferStartPoint,overwriteBufferData@start
  2120  007038  C00E  F018         	movff	overwriteBufferData@bufferStartPoint+1,overwriteBufferData@start+1
  2121                           
  2122                           ;FlashWrite.c: 62: for(i = 0 ; i < sizeToWrite ; i++){
  2123  00703C  0E00               	movlw	0
  2124  00703E  6E1C               	movwf	overwriteBufferData@i+1,c
  2125  007040  0E00               	movlw	0
  2126  007042  6E1B               	movwf	overwriteBufferData@i,c
  2127  007044  D01E               	goto	l1616
  2128  007046                     l1610:
  2129                           
  2130                           ;FlashWrite.c: 63: blockBuffer[start] = data[i];
  2131  007046  90D8               	bcf	status,0,c
  2132  007048  341B               	rlcf	overwriteBufferData@i,w,c
  2133  00704A  6ED9               	movwf	fsr2l,c
  2134  00704C  341C               	rlcf	overwriteBufferData@i+1,w,c
  2135  00704E  6EDA               	movwf	fsr2h,c
  2136  007050  5009               	movf	overwriteBufferData@data,w,c
  2137  007052  26D9               	addwf	fsr2l,f,c
  2138  007054  500A               	movf	overwriteBufferData@data+1,w,c
  2139  007056  22DA               	addwfc	fsr2h,f,c
  2140  007058  0EA0               	movlw	low _blockBuffer
  2141  00705A  6E0F               	movwf	??_overwriteBufferData& (0+255),c
  2142  00705C  0E02               	movlw	high _blockBuffer
  2143  00705E  6E10               	movwf	(??_overwriteBufferData+1)& (0+255),c
  2144  007060  90D8               	bcf	status,0,c
  2145  007062  3417               	rlcf	overwriteBufferData@start,w,c
  2146  007064  6EE1               	movwf	fsr1l,c
  2147  007066  3418               	rlcf	overwriteBufferData@start+1,w,c
  2148  007068  6EE2               	movwf	fsr1h,c
  2149  00706A  500F               	movf	??_overwriteBufferData,w,c
  2150  00706C  26E1               	addwf	fsr1l,f,c
  2151  00706E  5010               	movf	??_overwriteBufferData+1,w,c
  2152  007070  22E2               	addwfc	fsr1h,f,c
  2153  007072  CFDE FFE6          	movff	postinc2,postinc1
  2154  007076  CFDD FFE5          	movff	postdec2,postdec1
  2155                           
  2156                           ;FlashWrite.c: 64: start++;
  2157  00707A  4A17               	infsnz	overwriteBufferData@start,f,c
  2158  00707C  2A18               	incf	overwriteBufferData@start+1,f,c
  2159  00707E  4A1B               	infsnz	overwriteBufferData@i,f,c
  2160  007080  2A1C               	incf	overwriteBufferData@i+1,f,c
  2161  007082                     l1616:
  2162  007082  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2163  007084  5C1B               	subwf	overwriteBufferData@i,w,c
  2164  007086  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2165  007088  581C               	subwfb	overwriteBufferData@i+1,w,c
  2166  00708A  A0D8               	btfss	status,0,c
  2167  00708C  D7DC               	goto	l1610
  2168                           
  2169                           ;FlashWrite.c: 65: }
  2170                           ;FlashWrite.c: 67: availableWriteSpace = 32 - bufferStartPoint;
  2171  00708E  C00D  F00F         	movff	overwriteBufferData@bufferStartPoint,??_overwriteBufferData
  2172  007092  C00E  F010         	movff	overwriteBufferData@bufferStartPoint+1,??_overwriteBufferData+1
  2173  007096  1E0F               	comf	??_overwriteBufferData,f,c
  2174  007098  1E10               	comf	??_overwriteBufferData+1,f,c
  2175  00709A  4A0F               	infsnz	??_overwriteBufferData,f,c
  2176  00709C  2A10               	incf	??_overwriteBufferData+1,f,c
  2177  00709E  0E20               	movlw	32
  2178  0070A0  240F               	addwf	??_overwriteBufferData,w,c
  2179  0070A2  6E19               	movwf	overwriteBufferData@availableWriteSpace,c
  2180  0070A4  0E00               	movlw	0
  2181  0070A6  2010               	addwfc	??_overwriteBufferData+1,w,c
  2182  0070A8  6E1A               	movwf	overwriteBufferData@availableWriteSpace+1,c
  2183                           
  2184                           ;FlashWrite.c: 69: if(sizeToWrite > availableWriteSpace){
  2185  0070AA  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2186  0070AC  5C19               	subwf	overwriteBufferData@availableWriteSpace,w,c
  2187  0070AE  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2188  0070B0  581A               	subwfb	overwriteBufferData@availableWriteSpace+1,w,c
  2189  0070B2  B0D8               	btfsc	status,0,c
  2190  0070B4  D01D               	goto	l229
  2191                           
  2192                           ;FlashWrite.c: 70: bytesLeft = sizeToWrite - availableWriteSpace;
  2193  0070B6  C019  F00F         	movff	overwriteBufferData@availableWriteSpace,??_overwriteBufferData
  2194  0070BA  C01A  F010         	movff	overwriteBufferData@availableWriteSpace+1,??_overwriteBufferData+1
  2195  0070BE  1E0F               	comf	??_overwriteBufferData,f,c
  2196  0070C0  1E10               	comf	??_overwriteBufferData+1,f,c
  2197  0070C2  4A0F               	infsnz	??_overwriteBufferData,f,c
  2198  0070C4  2A10               	incf	??_overwriteBufferData+1,f,c
  2199  0070C6  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2200  0070C8  240F               	addwf	??_overwriteBufferData,w,c
  2201  0070CA  6E13               	movwf	overwriteBufferData@bytesLeft,c
  2202  0070CC  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2203  0070CE  2010               	addwfc	??_overwriteBufferData+1,w,c
  2204  0070D0  6E14               	movwf	overwriteBufferData@bytesLeft+1,c
  2205                           
  2206                           ;FlashWrite.c: 71: bytesWritten = sizeToWrite - bytesLeft;
  2207  0070D2  C013  F00F         	movff	overwriteBufferData@bytesLeft,??_overwriteBufferData
  2208  0070D6  C014  F010         	movff	overwriteBufferData@bytesLeft+1,??_overwriteBufferData+1
  2209  0070DA  1E0F               	comf	??_overwriteBufferData,f,c
  2210  0070DC  1E10               	comf	??_overwriteBufferData+1,f,c
  2211  0070DE  4A0F               	infsnz	??_overwriteBufferData,f,c
  2212  0070E0  2A10               	incf	??_overwriteBufferData+1,f,c
  2213  0070E2  500B               	movf	overwriteBufferData@sizeToWrite,w,c
  2214  0070E4  240F               	addwf	??_overwriteBufferData,w,c
  2215  0070E6  6E15               	movwf	overwriteBufferData@bytesWritten,c
  2216  0070E8  500C               	movf	overwriteBufferData@sizeToWrite+1,w,c
  2217  0070EA  2010               	addwfc	??_overwriteBufferData+1,w,c
  2218  0070EC  6E16               	movwf	overwriteBufferData@bytesWritten+1,c
  2219                           
  2220                           ;FlashWrite.c: 72: }
  2221  0070EE  D004               	goto	l1622
  2222  0070F0                     l229:
  2223                           
  2224                           ;FlashWrite.c: 73: else
  2225                           ;FlashWrite.c: 74: bytesWritten = sizeToWrite;
  2226  0070F0  C00B  F015         	movff	overwriteBufferData@sizeToWrite,overwriteBufferData@bytesWritten
  2227  0070F4  C00C  F016         	movff	overwriteBufferData@sizeToWrite+1,overwriteBufferData@bytesWritten+1
  2228  0070F8                     l1622:
  2229                           
  2230                           ;FlashWrite.c: 76: loadHalfBuffer();
  2231  0070F8  ECB5  F037         	call	_loadHalfBuffer	;wreg free
  2232                           
  2233                           ;FlashWrite.c: 78: return bytesWritten;
  2234  0070FC  C015  F009         	movff	overwriteBufferData@bytesWritten,?_overwriteBufferData
  2235  007100  C016  F00A         	movff	overwriteBufferData@bytesWritten+1,?_overwriteBufferData+1
  2236  007104  0012               	return	
  2237  007106                     __end_of_overwriteBufferData:
  2238                           	opt stack 0
  2239                           prodl	equ	0xFF3
  2240                           postinc0	equ	0xFEE
  2241                           wreg	equ	0xFE8
  2242                           postinc1	equ	0xFE6
  2243                           postdec1	equ	0xFE5
  2244                           fsr1h	equ	0xFE2
  2245                           fsr1l	equ	0xFE1
  2246                           postinc2	equ	0xFDE
  2247                           postdec2	equ	0xFDD
  2248                           fsr2h	equ	0xFDA
  2249                           fsr2l	equ	0xFD9
  2250                           status	equ	0xFD8
  2251                           
  2252 ;; *************** function _loadHalfBuffer *****************
  2253 ;; Defined at:
  2254 ;;		line 82 in file "../src/PIC18/FlashWrite.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;		None
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;  i               2    6[COMRAM] int 
  2259 ;;  j               2    4[COMRAM] int 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;		None               void
  2262 ;; Registers used:
  2263 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2269 ;;      Params:         0       0       0       0       0       0       0
  2270 ;;      Locals:         4       0       0       0       0       0       0
  2271 ;;      Temps:          4       0       0       0       0       0       0
  2272 ;;      Totals:         8       0       0       0       0       0       0
  2273 ;;Total ram usage:        8 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; This function calls:
  2276 ;;		Nothing
  2277 ;; This function is called by:
  2278 ;;		_flashWriteData
  2279 ;;		_overwriteBufferData
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text5
  2284  006F6A                     __ptext5:
  2285                           	opt stack 0
  2286  006F6A                     _loadHalfBuffer:
  2287                           	opt stack 27
  2288                           
  2289                           ;FlashWrite.c: 83: int i, j = 16;
  2290                           
  2291                           ;incstack = 0
  2292  006F6A  0E00               	movlw	0
  2293  006F6C  6E06               	movwf	loadHalfBuffer@j+1,c
  2294  006F6E  0E10               	movlw	16
  2295  006F70  6E05               	movwf	loadHalfBuffer@j,c
  2296                           
  2297                           ;FlashWrite.c: 85: for(i = 0 ; i < 16 ; i++){
  2298  006F72  0E00               	movlw	0
  2299  006F74  6E08               	movwf	loadHalfBuffer@i+1,c
  2300  006F76  0E00               	movlw	0
  2301  006F78  6E07               	movwf	loadHalfBuffer@i,c
  2302  006F7A  5008               	movf	loadHalfBuffer@i+1,w,c
  2303  006F7C  0A80               	xorlw	128
  2304  006F7E  0F80               	addlw	-128
  2305  006F80  0E10               	movlw	16
  2306  006F82  B4D8               	btfsc	status,2,c
  2307  006F84  5C07               	subwf	loadHalfBuffer@i,w,c
  2308  006F86  B0D8               	btfsc	status,0,c
  2309  006F88  D021               	goto	l1504
  2310                           
  2311                           ;FlashWrite.c: 86: halfBuffer1[i] = blockBuffer[i];
  2312  006F8A  0EA0               	movlw	low _blockBuffer
  2313  006F8C  6E01               	movwf	??_loadHalfBuffer& (0+255),c
  2314  006F8E  0E02               	movlw	high _blockBuffer
  2315  006F90  6E02               	movwf	(??_loadHalfBuffer+1)& (0+255),c
  2316  006F92  90D8               	bcf	status,0,c
  2317  006F94  3407               	rlcf	loadHalfBuffer@i,w,c
  2318  006F96  6ED9               	movwf	fsr2l,c
  2319  006F98  3408               	rlcf	loadHalfBuffer@i+1,w,c
  2320  006F9A  6EDA               	movwf	fsr2h,c
  2321  006F9C  5001               	movf	??_loadHalfBuffer,w,c
  2322  006F9E  26D9               	addwf	fsr2l,f,c
  2323  006FA0  5002               	movf	??_loadHalfBuffer+1,w,c
  2324  006FA2  22DA               	addwfc	fsr2h,f,c
  2325  006FA4  0E5A               	movlw	low _halfBuffer1
  2326  006FA6  6E03               	movwf	(??_loadHalfBuffer+2)& (0+255),c
  2327  006FA8  0E00               	movlw	high _halfBuffer1
  2328  006FAA  6E04               	movwf	(??_loadHalfBuffer+3)& (0+255),c
  2329  006FAC  90D8               	bcf	status,0,c
  2330  006FAE  3407               	rlcf	loadHalfBuffer@i,w,c
  2331  006FB0  6EE1               	movwf	fsr1l,c
  2332  006FB2  3408               	rlcf	loadHalfBuffer@i+1,w,c
  2333  006FB4  6EE2               	movwf	fsr1h,c
  2334  006FB6  5003               	movf	??_loadHalfBuffer+2,w,c
  2335  006FB8  26E1               	addwf	fsr1l,f,c
  2336  006FBA  5004               	movf	??_loadHalfBuffer+3,w,c
  2337  006FBC  22E2               	addwfc	fsr1h,f,c
  2338  006FBE  CFDE FFE6          	movff	postinc2,postinc1
  2339  006FC2  CFDD FFE5          	movff	postdec2,postdec1
  2340  006FC6  4A07               	infsnz	loadHalfBuffer@i,f,c
  2341  006FC8  2A08               	incf	loadHalfBuffer@i+1,f,c
  2342  006FCA  D7D7               	goto	L9
  2343  006FCC                     l1504:
  2344                           
  2345                           ;FlashWrite.c: 87: }
  2346                           ;FlashWrite.c: 88: for(i = 0 ; i < 16 ; i++){
  2347  006FCC  0E00               	movlw	0
  2348  006FCE  6E08               	movwf	loadHalfBuffer@i+1,c
  2349  006FD0  0E00               	movlw	0
  2350  006FD2  6E07               	movwf	loadHalfBuffer@i,c
  2351  006FD4  5008               	movf	loadHalfBuffer@i+1,w,c
  2352  006FD6  0A80               	xorlw	128
  2353  006FD8  0F80               	addlw	-128
  2354  006FDA  0E10               	movlw	16
  2355  006FDC  B4D8               	btfsc	status,2,c
  2356  006FDE  5C07               	subwf	loadHalfBuffer@i,w,c
  2357  006FE0  B0D8               	btfsc	status,0,c
  2358  006FE2  D023               	goto	l238
  2359                           
  2360                           ;FlashWrite.c: 89: halfBuffer2[i] = blockBuffer[j];
  2361  006FE4  0EA0               	movlw	low _blockBuffer
  2362  006FE6  6E01               	movwf	??_loadHalfBuffer& (0+255),c
  2363  006FE8  0E02               	movlw	high _blockBuffer
  2364  006FEA  6E02               	movwf	(??_loadHalfBuffer+1)& (0+255),c
  2365  006FEC  90D8               	bcf	status,0,c
  2366  006FEE  3405               	rlcf	loadHalfBuffer@j,w,c
  2367  006FF0  6ED9               	movwf	fsr2l,c
  2368  006FF2  3406               	rlcf	loadHalfBuffer@j+1,w,c
  2369  006FF4  6EDA               	movwf	fsr2h,c
  2370  006FF6  5001               	movf	??_loadHalfBuffer,w,c
  2371  006FF8  26D9               	addwf	fsr2l,f,c
  2372  006FFA  5002               	movf	??_loadHalfBuffer+1,w,c
  2373  006FFC  22DA               	addwfc	fsr2h,f,c
  2374  006FFE  0EE0               	movlw	low _halfBuffer2
  2375  007000  6E03               	movwf	(??_loadHalfBuffer+2)& (0+255),c
  2376  007002  0E02               	movlw	high _halfBuffer2
  2377  007004  6E04               	movwf	(??_loadHalfBuffer+3)& (0+255),c
  2378  007006  90D8               	bcf	status,0,c
  2379  007008  3407               	rlcf	loadHalfBuffer@i,w,c
  2380  00700A  6EE1               	movwf	fsr1l,c
  2381  00700C  3408               	rlcf	loadHalfBuffer@i+1,w,c
  2382  00700E  6EE2               	movwf	fsr1h,c
  2383  007010  5003               	movf	??_loadHalfBuffer+2,w,c
  2384  007012  26E1               	addwf	fsr1l,f,c
  2385  007014  5004               	movf	??_loadHalfBuffer+3,w,c
  2386  007016  22E2               	addwfc	fsr1h,f,c
  2387  007018  CFDE FFE6          	movff	postinc2,postinc1
  2388  00701C  CFDD FFE5          	movff	postdec2,postdec1
  2389                           
  2390                           ;FlashWrite.c: 90: j++;
  2391  007020  4A05               	infsnz	loadHalfBuffer@j,f,c
  2392  007022  2A06               	incf	loadHalfBuffer@j+1,f,c
  2393  007024  4A07               	infsnz	loadHalfBuffer@i,f,c
  2394  007026  2A08               	incf	loadHalfBuffer@i+1,f,c
  2395  007028  D7D5               	goto	L10
  2396  00702A                     l238:
  2397  00702A  0012               	return	
  2398  00702C                     __end_of_loadHalfBuffer:
  2399                           	opt stack 0
  2400                           prodl	equ	0xFF3
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           postinc1	equ	0xFE6
  2404                           postdec1	equ	0xFE5
  2405                           fsr1h	equ	0xFE2
  2406                           fsr1l	equ	0xFE1
  2407                           postinc2	equ	0xFDE
  2408                           postdec2	equ	0xFDD
  2409                           fsr2h	equ	0xFDA
  2410                           fsr2l	equ	0xFD9
  2411                           status	equ	0xFD8
  2412                           
  2413 ;; *************** function _flashWriteBlock *****************
  2414 ;; Defined at:
  2415 ;;		line 201 in file "../src/PIC18/FlashProg.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  firstHalf       2   37[COMRAM] PTR unsigned int 
  2418 ;;		 -> halfBuffer1(32), main@blockWrite2(32), main@blockWrite0(32), 
  2419 ;;  secondHalf      2   39[COMRAM] PTR unsigned int 
  2420 ;;		 -> halfBuffer2(32), main@blockWrite3(32), main@blockWrite1(32), 
  2421 ;;  blockNumber     4   41[COMRAM] unsigned long 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  blockSelect     4   49[COMRAM] unsigned long 
  2424 ;;  i               2   53[COMRAM] int 
  2425 ;; Return value:  Size  Location     Type
  2426 ;;		None               void
  2427 ;; Registers used:
  2428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2434 ;;      Params:         8       0       0       0       0       0       0
  2435 ;;      Locals:         6       0       0       0       0       0       0
  2436 ;;      Temps:          4       0       0       0       0       0       0
  2437 ;;      Totals:        18       0       0       0       0       0       0
  2438 ;;Total ram usage:       18 bytes
  2439 ;; Hardware stack levels used:    1
  2440 ;; Hardware stack levels required when called:    5
  2441 ;; This function calls:
  2442 ;;		_flashSetAddress
  2443 ;;		_flashWriteAndProgram
  2444 ;;		_writeToBuffer
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;;		_flashWriteData
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text6
  2452  0071EA                     __ptext6:
  2453                           	opt stack 0
  2454  0071EA                     _flashWriteBlock:
  2455                           	opt stack 23
  2456                           
  2457                           ;FlashProg.c: 202: int i;
  2458                           ;FlashProg.c: 203: uint32 blockSelect;
  2459                           ;FlashProg.c: 205: blockSelect = (blockNumber-1)*64;
  2460                           
  2461                           ;incstack = 0
  2462  0071EA  C02A  F02E         	movff	flashWriteBlock@blockNumber,??_flashWriteBlock
  2463  0071EE  C02B  F02F         	movff	flashWriteBlock@blockNumber+1,??_flashWriteBlock+1
  2464  0071F2  C02C  F030         	movff	flashWriteBlock@blockNumber+2,??_flashWriteBlock+2
  2465  0071F6  C02D  F031         	movff	flashWriteBlock@blockNumber+3,??_flashWriteBlock+3
  2466  0071FA  0E06               	movlw	6
  2467  0071FC                     u805:
  2468  0071FC  90D8               	bcf	status,0,c
  2469  0071FE  362E               	rlcf	??_flashWriteBlock,f,c
  2470  007200  362F               	rlcf	??_flashWriteBlock+1,f,c
  2471  007202  3630               	rlcf	??_flashWriteBlock+2,f,c
  2472  007204  3631               	rlcf	??_flashWriteBlock+3,f,c
  2473  007206  2EE8               	decfsz	wreg,f,c
  2474  007208  D7F9               	goto	u805
  2475  00720A  0EC0               	movlw	192
  2476  00720C  242E               	addwf	??_flashWriteBlock,w,c
  2477  00720E  6E32               	movwf	flashWriteBlock@blockSelect,c
  2478  007210  0EFF               	movlw	255
  2479  007212  202F               	addwfc	??_flashWriteBlock+1,w,c
  2480  007214  6E33               	movwf	flashWriteBlock@blockSelect+1,c
  2481  007216  0EFF               	movlw	255
  2482  007218  2030               	addwfc	??_flashWriteBlock+2,w,c
  2483  00721A  6E34               	movwf	flashWriteBlock@blockSelect+2,c
  2484  00721C  0EFF               	movlw	255
  2485  00721E  2031               	addwfc	??_flashWriteBlock+3,w,c
  2486  007220  6E35               	movwf	flashWriteBlock@blockSelect+3,c
  2487                           
  2488                           ;FlashProg.c: 207: flashSetAddress(blockSelect);
  2489  007222  C032  F012         	movff	flashWriteBlock@blockSelect,flashSetAddress@address
  2490  007226  C033  F013         	movff	flashWriteBlock@blockSelect+1,flashSetAddress@address+1
  2491  00722A  C034  F014         	movff	flashWriteBlock@blockSelect+2,flashSetAddress@address+2
  2492  00722E  C035  F015         	movff	flashWriteBlock@blockSelect+3,flashSetAddress@address+3
  2493  007232  EC83  F038         	call	_flashSetAddress	;wreg free
  2494                           
  2495                           ;FlashProg.c: 208: for(i = 0 ; i < 15 ; i++){
  2496  007236  0E00               	movlw	0
  2497  007238  6E37               	movwf	flashWriteBlock@i+1,c
  2498  00723A  0E00               	movlw	0
  2499  00723C  6E36               	movwf	flashWriteBlock@i,c
  2500  00723E  5037               	movf	flashWriteBlock@i+1,w,c
  2501  007240  0A80               	xorlw	128
  2502  007242  0F80               	addlw	-128
  2503  007244  0E0F               	movlw	15
  2504  007246  B4D8               	btfsc	status,2,c
  2505  007248  5C36               	subwf	flashWriteBlock@i,w,c
  2506  00724A  B0D8               	btfsc	status,0,c
  2507  00724C  D012               	goto	l1558
  2508                           
  2509                           ;FlashProg.c: 209: writeToBuffer(firstHalf[i]);
  2510  00724E  90D8               	bcf	status,0,c
  2511  007250  3436               	rlcf	flashWriteBlock@i,w,c
  2512  007252  6ED9               	movwf	fsr2l,c
  2513  007254  3437               	rlcf	flashWriteBlock@i+1,w,c
  2514  007256  6EDA               	movwf	fsr2h,c
  2515  007258  5026               	movf	flashWriteBlock@firstHalf,w,c
  2516  00725A  26D9               	addwf	fsr2l,f,c
  2517  00725C  5027               	movf	flashWriteBlock@firstHalf+1,w,c
  2518  00725E  22DA               	addwfc	fsr2h,f,c
  2519  007260  CFDE F012          	movff	postinc2,writeToBuffer@data
  2520  007264  CFDD F013          	movff	postdec2,writeToBuffer@data+1
  2521  007268  EC29  F036         	call	_writeToBuffer	;wreg free
  2522  00726C  4A36               	infsnz	flashWriteBlock@i,f,c
  2523  00726E  2A37               	incf	flashWriteBlock@i+1,f,c
  2524  007270  D7E6               	goto	L11
  2525  007272                     l1558:
  2526                           
  2527                           ;FlashProg.c: 210: }
  2528                           ;FlashProg.c: 211: flashWriteAndProgram(firstHalf[15]);
  2529  007272  EE20 F01E          	lfsr	2,30
  2530  007276  5026               	movf	flashWriteBlock@firstHalf,w,c
  2531  007278  26D9               	addwf	fsr2l,f,c
  2532  00727A  5027               	movf	flashWriteBlock@firstHalf+1,w,c
  2533  00727C  22DA               	addwfc	fsr2h,f,c
  2534  00727E  CFDE F012          	movff	postinc2,flashWriteAndProgram@data
  2535  007282  CFDD F013          	movff	postdec2,flashWriteAndProgram@data+1
  2536  007286  EC2A  F037         	call	_flashWriteAndProgram	;wreg free
  2537                           
  2538                           ;FlashProg.c: 213: flashSetAddress(blockSelect+32);
  2539  00728A  0E20               	movlw	32
  2540  00728C  2432               	addwf	flashWriteBlock@blockSelect,w,c
  2541  00728E  6E12               	movwf	flashSetAddress@address,c
  2542  007290  0E00               	movlw	0
  2543  007292  2033               	addwfc	flashWriteBlock@blockSelect+1,w,c
  2544  007294  6E13               	movwf	flashSetAddress@address+1,c
  2545  007296  0E00               	movlw	0
  2546  007298  2034               	addwfc	flashWriteBlock@blockSelect+2,w,c
  2547  00729A  6E14               	movwf	flashSetAddress@address+2,c
  2548  00729C  0E00               	movlw	0
  2549  00729E  2035               	addwfc	flashWriteBlock@blockSelect+3,w,c
  2550  0072A0  6E15               	movwf	flashSetAddress@address+3,c
  2551  0072A2  EC83  F038         	call	_flashSetAddress	;wreg free
  2552                           
  2553                           ;FlashProg.c: 214: for(i = 0 ; i < 15 ; i++){
  2554  0072A6  0E00               	movlw	0
  2555  0072A8  6E37               	movwf	flashWriteBlock@i+1,c
  2556  0072AA  0E00               	movlw	0
  2557  0072AC  6E36               	movwf	flashWriteBlock@i,c
  2558  0072AE  5037               	movf	flashWriteBlock@i+1,w,c
  2559  0072B0  0A80               	xorlw	128
  2560  0072B2  0F80               	addlw	-128
  2561  0072B4  0E0F               	movlw	15
  2562  0072B6  B4D8               	btfsc	status,2,c
  2563  0072B8  5C36               	subwf	flashWriteBlock@i,w,c
  2564  0072BA  B0D8               	btfsc	status,0,c
  2565  0072BC  D012               	goto	l1574
  2566                           
  2567                           ;FlashProg.c: 215: writeToBuffer(secondHalf[i]);
  2568  0072BE  90D8               	bcf	status,0,c
  2569  0072C0  3436               	rlcf	flashWriteBlock@i,w,c
  2570  0072C2  6ED9               	movwf	fsr2l,c
  2571  0072C4  3437               	rlcf	flashWriteBlock@i+1,w,c
  2572  0072C6  6EDA               	movwf	fsr2h,c
  2573  0072C8  5028               	movf	flashWriteBlock@secondHalf,w,c
  2574  0072CA  26D9               	addwf	fsr2l,f,c
  2575  0072CC  5029               	movf	flashWriteBlock@secondHalf+1,w,c
  2576  0072CE  22DA               	addwfc	fsr2h,f,c
  2577  0072D0  CFDE F012          	movff	postinc2,writeToBuffer@data
  2578  0072D4  CFDD F013          	movff	postdec2,writeToBuffer@data+1
  2579  0072D8  EC29  F036         	call	_writeToBuffer	;wreg free
  2580  0072DC  4A36               	infsnz	flashWriteBlock@i,f,c
  2581  0072DE  2A37               	incf	flashWriteBlock@i+1,f,c
  2582  0072E0  D7E6               	goto	L12
  2583  0072E2                     l1574:
  2584                           
  2585                           ;FlashProg.c: 216: }
  2586                           ;FlashProg.c: 217: flashWriteAndProgram(secondHalf[15]);
  2587  0072E2  EE20 F01E          	lfsr	2,30
  2588  0072E6  5028               	movf	flashWriteBlock@secondHalf,w,c
  2589  0072E8  26D9               	addwf	fsr2l,f,c
  2590  0072EA  5029               	movf	flashWriteBlock@secondHalf+1,w,c
  2591  0072EC  22DA               	addwfc	fsr2h,f,c
  2592  0072EE  CFDE F012          	movff	postinc2,flashWriteAndProgram@data
  2593  0072F2  CFDD F013          	movff	postdec2,flashWriteAndProgram@data+1
  2594  0072F6  EC2A  F037         	call	_flashWriteAndProgram	;wreg free
  2595  0072FA  0012               	return	
  2596  0072FC                     __end_of_flashWriteBlock:
  2597                           	opt stack 0
  2598                           prodl	equ	0xFF3
  2599                           postinc0	equ	0xFEE
  2600                           wreg	equ	0xFE8
  2601                           postinc1	equ	0xFE6
  2602                           postdec1	equ	0xFE5
  2603                           fsr1h	equ	0xFE2
  2604                           fsr1l	equ	0xFE1
  2605                           postinc2	equ	0xFDE
  2606                           postdec2	equ	0xFDD
  2607                           fsr2h	equ	0xFDA
  2608                           fsr2l	equ	0xFD9
  2609                           status	equ	0xFD8
  2610                           
  2611 ;; *************** function _writeToBuffer *****************
  2612 ;; Defined at:
  2613 ;;		line 134 in file "../src/PIC18/FlashProg.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  data            2   17[COMRAM] unsigned int 
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;		None
  2618 ;; Return value:  Size  Location     Type
  2619 ;;		None               void
  2620 ;; Registers used:
  2621 ;;		wreg, status,2, status,0, cstack
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2627 ;;      Params:         2       0       0       0       0       0       0
  2628 ;;      Locals:         0       0       0       0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0       0       0
  2630 ;;      Totals:         2       0       0       0       0       0       0
  2631 ;;Total ram usage:        2 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    4
  2634 ;; This function calls:
  2635 ;;		_writeICSP
  2636 ;; This function is called by:
  2637 ;;		_flashWriteBlock
  2638 ;;		_flashWriteHalfBlock
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text7
  2643  006C52                     __ptext7:
  2644                           	opt stack 0
  2645  006C52                     _writeToBuffer:
  2646                           	opt stack 23
  2647                           
  2648                           ;FlashProg.c: 135: writeICSP(0xd, data);
  2649                           
  2650                           ;incstack = 0
  2651  006C52  0E00               	movlw	0
  2652  006C54  6E0F               	movwf	writeICSP@commandByte+1,c
  2653  006C56  0E0D               	movlw	13
  2654  006C58  6E0E               	movwf	writeICSP@commandByte,c
  2655  006C5A  C012  F010         	movff	writeToBuffer@data,writeICSP@dataBytes
  2656  006C5E  C013  F011         	movff	writeToBuffer@data+1,writeICSP@dataBytes+1
  2657  006C62  EC52  F036         	call	_writeICSP	;wreg free
  2658  006C66  0012               	return	
  2659  006C68                     __end_of_writeToBuffer:
  2660                           	opt stack 0
  2661                           prodl	equ	0xFF3
  2662                           postinc0	equ	0xFEE
  2663                           wreg	equ	0xFE8
  2664                           postinc1	equ	0xFE6
  2665                           postdec1	equ	0xFE5
  2666                           fsr1h	equ	0xFE2
  2667                           fsr1l	equ	0xFE1
  2668                           postinc2	equ	0xFDE
  2669                           postdec2	equ	0xFDD
  2670                           fsr2h	equ	0xFDA
  2671                           fsr2l	equ	0xFD9
  2672                           status	equ	0xFD8
  2673                           
  2674 ;; *************** function _flashWriteAndProgram *****************
  2675 ;; Defined at:
  2676 ;;		line 138 in file "../src/PIC18/FlashProg.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;  data            2   17[COMRAM] unsigned int 
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;  i               2   19[COMRAM] int 
  2681 ;; Return value:  Size  Location     Type
  2682 ;;		None               void
  2683 ;; Registers used:
  2684 ;;		wreg, status,2, status,0, cstack
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2690 ;;      Params:         2       0       0       0       0       0       0
  2691 ;;      Locals:         2       0       0       0       0       0       0
  2692 ;;      Temps:          0       0       0       0       0       0       0
  2693 ;;      Totals:         4       0       0       0       0       0       0
  2694 ;;Total ram usage:        4 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    4
  2697 ;; This function calls:
  2698 ;;		_PGC_high
  2699 ;;		_PGC_low
  2700 ;;		_PGD_low
  2701 ;;		_writeBits
  2702 ;;		_writeICSP
  2703 ;; This function is called by:
  2704 ;;		_flashWriteBlock
  2705 ;;		_flashWriteHalfBlock
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           	psect	text8
  2710  006E54                     __ptext8:
  2711                           	opt stack 0
  2712  006E54                     _flashWriteAndProgram:
  2713                           	opt stack 23
  2714                           
  2715                           ;FlashProg.c: 139: int i;
  2716                           ;FlashProg.c: 142: writeICSP(0xf, data);
  2717                           
  2718                           ;incstack = 0
  2719  006E54  0E00               	movlw	0
  2720  006E56  6E0F               	movwf	writeICSP@commandByte+1,c
  2721  006E58  0E0F               	movlw	15
  2722  006E5A  6E0E               	movwf	writeICSP@commandByte,c
  2723  006E5C  C012  F010         	movff	flashWriteAndProgram@data,writeICSP@dataBytes
  2724  006E60  C013  F011         	movff	flashWriteAndProgram@data+1,writeICSP@dataBytes+1
  2725  006E64  EC52  F036         	call	_writeICSP	;wreg free
  2726                           
  2727                           ;FlashProg.c: 144: writeBits(0x0, 3);
  2728  006E68  0E00               	movlw	0
  2729  006E6A  6E06               	movwf	writeBits@pattern+1,c
  2730  006E6C  0E00               	movlw	0
  2731  006E6E  6E05               	movwf	writeBits@pattern,c
  2732  006E70  0E00               	movlw	0
  2733  006E72  6E08               	movwf	writeBits@bitsToWrite+1,c
  2734  006E74  0E03               	movlw	3
  2735  006E76  6E07               	movwf	writeBits@bitsToWrite,c
  2736  006E78  EC93  F036         	call	_writeBits	;wreg free
  2737                           
  2738                           ;FlashProg.c: 145: PGC_high();
  2739  006E7C  ECDB  F035         	call	_PGC_high	;wreg free
  2740                           
  2741                           ;FlashProg.c: 146: PGD_low();
  2742  006E80  ECF0  F035         	call	_PGD_low	;wreg free
  2743                           
  2744                           ;FlashProg.c: 147: for(i = 0; i < 25 ; i++){}
  2745  006E84  0E00               	movlw	0
  2746  006E86  6E15               	movwf	flashWriteAndProgram@i+1,c
  2747  006E88  0E00               	movlw	0
  2748  006E8A  6E14               	movwf	flashWriteAndProgram@i,c
  2749  006E8C  5015               	movf	flashWriteAndProgram@i+1,w,c
  2750  006E8E  0A80               	xorlw	128
  2751  006E90  0F80               	addlw	-128
  2752  006E92  0E19               	movlw	25
  2753  006E94  B4D8               	btfsc	status,2,c
  2754  006E96  5C14               	subwf	flashWriteAndProgram@i,w,c
  2755  006E98  B0D8               	btfsc	status,0,c
  2756  006E9A  D003               	goto	l1470
  2757  006E9C  4A14               	infsnz	flashWriteAndProgram@i,f,c
  2758  006E9E  2A15               	incf	flashWriteAndProgram@i+1,f,c
  2759  006EA0  D7F5               	goto	L13
  2760  006EA2                     l1470:
  2761                           
  2762                           ;FlashProg.c: 148: PGC_low();
  2763  006EA2  ECDD  F035         	call	_PGC_low	;wreg free
  2764                           
  2765                           ;FlashProg.c: 149: for(i = 0; i < 25 ; i++){}
  2766  006EA6  0E00               	movlw	0
  2767  006EA8  6E15               	movwf	flashWriteAndProgram@i+1,c
  2768  006EAA  0E00               	movlw	0
  2769  006EAC  6E14               	movwf	flashWriteAndProgram@i,c
  2770  006EAE  5015               	movf	flashWriteAndProgram@i+1,w,c
  2771  006EB0  0A80               	xorlw	128
  2772  006EB2  0F80               	addlw	-128
  2773  006EB4  0E19               	movlw	25
  2774  006EB6  B4D8               	btfsc	status,2,c
  2775  006EB8  5C14               	subwf	flashWriteAndProgram@i,w,c
  2776  006EBA  B0D8               	btfsc	status,0,c
  2777  006EBC  D003               	goto	l1482
  2778  006EBE  4A14               	infsnz	flashWriteAndProgram@i,f,c
  2779  006EC0  2A15               	incf	flashWriteAndProgram@i+1,f,c
  2780  006EC2  D7F5               	goto	L14
  2781  006EC4                     l1482:
  2782                           
  2783                           ;FlashProg.c: 150: writeBits(0x0, 16);
  2784  006EC4  0E00               	movlw	0
  2785  006EC6  6E06               	movwf	writeBits@pattern+1,c
  2786  006EC8  0E00               	movlw	0
  2787  006ECA  6E05               	movwf	writeBits@pattern,c
  2788  006ECC  0E00               	movlw	0
  2789  006ECE  6E08               	movwf	writeBits@bitsToWrite+1,c
  2790  006ED0  0E10               	movlw	16
  2791  006ED2  6E07               	movwf	writeBits@bitsToWrite,c
  2792  006ED4  EC93  F036         	call	_writeBits	;wreg free
  2793  006ED8  0012               	return	
  2794  006EDA                     __end_of_flashWriteAndProgram:
  2795                           	opt stack 0
  2796                           prodl	equ	0xFF3
  2797                           postinc0	equ	0xFEE
  2798                           wreg	equ	0xFE8
  2799                           postinc1	equ	0xFE6
  2800                           postdec1	equ	0xFE5
  2801                           fsr1h	equ	0xFE2
  2802                           fsr1l	equ	0xFE1
  2803                           postinc2	equ	0xFDE
  2804                           postdec2	equ	0xFDD
  2805                           fsr2h	equ	0xFDA
  2806                           fsr2l	equ	0xFD9
  2807                           status	equ	0xFD8
  2808                           
  2809 ;; *************** function _flashReadBlock *****************
  2810 ;; Defined at:
  2811 ;;		line 189 in file "../src/PIC18/FlashProg.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  data            2   37[COMRAM] PTR unsigned int 
  2814 ;;		 -> blockBuffer(64), main@blockRead(64), 
  2815 ;;  size            2   39[COMRAM] unsigned int 
  2816 ;;  blockNumber     4   41[COMRAM] unsigned long 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  blockSelect     4   49[COMRAM] unsigned long 
  2819 ;;  i               2   53[COMRAM] int 
  2820 ;; Return value:  Size  Location     Type
  2821 ;;		None               void
  2822 ;; Registers used:
  2823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/0
  2826 ;;		On exit  : 0/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2829 ;;      Params:         8       0       0       0       0       0       0
  2830 ;;      Locals:         6       0       0       0       0       0       0
  2831 ;;      Temps:          4       0       0       0       0       0       0
  2832 ;;      Totals:        18       0       0       0       0       0       0
  2833 ;;Total ram usage:       18 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:    5
  2836 ;; This function calls:
  2837 ;;		_flashRead16Bits
  2838 ;;		_flashSetAddress
  2839 ;; This function is called by:
  2840 ;;		_main
  2841 ;;		_flashWriteData
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text9
  2846  006EDA                     __ptext9:
  2847                           	opt stack 0
  2848  006EDA                     _flashReadBlock:
  2849                           	opt stack 23
  2850                           
  2851                           ;FlashProg.c: 190: int i;
  2852                           ;FlashProg.c: 191: uint32 blockSelect;
  2853                           ;FlashProg.c: 193: blockSelect = (blockNumber-1)*64;
  2854                           
  2855                           ;incstack = 0
  2856  006EDA  C02A  F02E         	movff	flashReadBlock@blockNumber,??_flashReadBlock
  2857  006EDE  C02B  F02F         	movff	flashReadBlock@blockNumber+1,??_flashReadBlock+1
  2858  006EE2  C02C  F030         	movff	flashReadBlock@blockNumber+2,??_flashReadBlock+2
  2859  006EE6  C02D  F031         	movff	flashReadBlock@blockNumber+3,??_flashReadBlock+3
  2860  006EEA  0E06               	movlw	6
  2861  006EEC                     u785:
  2862  006EEC  90D8               	bcf	status,0,c
  2863  006EEE  362E               	rlcf	??_flashReadBlock,f,c
  2864  006EF0  362F               	rlcf	??_flashReadBlock+1,f,c
  2865  006EF2  3630               	rlcf	??_flashReadBlock+2,f,c
  2866  006EF4  3631               	rlcf	??_flashReadBlock+3,f,c
  2867  006EF6  2EE8               	decfsz	wreg,f,c
  2868  006EF8  D7F9               	goto	u785
  2869  006EFA  0EC0               	movlw	192
  2870  006EFC  242E               	addwf	??_flashReadBlock,w,c
  2871  006EFE  6E32               	movwf	flashReadBlock@blockSelect,c
  2872  006F00  0EFF               	movlw	255
  2873  006F02  202F               	addwfc	??_flashReadBlock+1,w,c
  2874  006F04  6E33               	movwf	flashReadBlock@blockSelect+1,c
  2875  006F06  0EFF               	movlw	255
  2876  006F08  2030               	addwfc	??_flashReadBlock+2,w,c
  2877  006F0A  6E34               	movwf	flashReadBlock@blockSelect+2,c
  2878  006F0C  0EFF               	movlw	255
  2879  006F0E  2031               	addwfc	??_flashReadBlock+3,w,c
  2880  006F10  6E35               	movwf	flashReadBlock@blockSelect+3,c
  2881                           
  2882                           ;FlashProg.c: 195: flashSetAddress(blockSelect);
  2883  006F12  C032  F012         	movff	flashReadBlock@blockSelect,flashSetAddress@address
  2884  006F16  C033  F013         	movff	flashReadBlock@blockSelect+1,flashSetAddress@address+1
  2885  006F1A  C034  F014         	movff	flashReadBlock@blockSelect+2,flashSetAddress@address+2
  2886  006F1E  C035  F015         	movff	flashReadBlock@blockSelect+3,flashSetAddress@address+3
  2887  006F22  EC83  F038         	call	_flashSetAddress	;wreg free
  2888                           
  2889                           ;FlashProg.c: 196: for(i = 0; i < size/2 ; i++){
  2890  006F26  0E00               	movlw	0
  2891  006F28  6E37               	movwf	flashReadBlock@i+1,c
  2892  006F2A  0E00               	movlw	0
  2893  006F2C  6E36               	movwf	flashReadBlock@i,c
  2894  006F2E  D011               	goto	l1540
  2895  006F30                     l1536:
  2896                           
  2897                           ;FlashProg.c: 197: data[i] = flashRead16Bits();
  2898  006F30  EC7C  F036         	call	_flashRead16Bits	;wreg free
  2899  006F34  90D8               	bcf	status,0,c
  2900  006F36  3436               	rlcf	flashReadBlock@i,w,c
  2901  006F38  6ED9               	movwf	fsr2l,c
  2902  006F3A  3437               	rlcf	flashReadBlock@i+1,w,c
  2903  006F3C  6EDA               	movwf	fsr2h,c
  2904  006F3E  5026               	movf	flashReadBlock@data,w,c
  2905  006F40  26D9               	addwf	fsr2l,f,c
  2906  006F42  5027               	movf	flashReadBlock@data+1,w,c
  2907  006F44  22DA               	addwfc	fsr2h,f,c
  2908  006F46  C013  FFDE         	movff	?_flashRead16Bits,postinc2
  2909  006F4A  C014  FFDD         	movff	?_flashRead16Bits+1,postdec2
  2910  006F4E  4A36               	infsnz	flashReadBlock@i,f,c
  2911  006F50  2A37               	incf	flashReadBlock@i+1,f,c
  2912  006F52                     l1540:
  2913  006F52  90D8               	bcf	status,0,c
  2914  006F54  3029               	rrcf	flashReadBlock@size+1,w,c
  2915  006F56  6E2F               	movwf	(??_flashReadBlock+1)& (0+255),c
  2916  006F58  3028               	rrcf	flashReadBlock@size,w,c
  2917  006F5A  6E2E               	movwf	??_flashReadBlock& (0+255),c
  2918  006F5C  502E               	movf	??_flashReadBlock,w,c
  2919  006F5E  5C36               	subwf	flashReadBlock@i,w,c
  2920  006F60  502F               	movf	??_flashReadBlock+1,w,c
  2921  006F62  5837               	subwfb	flashReadBlock@i+1,w,c
  2922  006F64  B0D8               	btfsc	status,0,c
  2923  006F66  0012               	return	
  2924  006F68  D7E3               	goto	l1536
  2925  006F6A                     __end_of_flashReadBlock:
  2926                           	opt stack 0
  2927                           prodl	equ	0xFF3
  2928                           postinc0	equ	0xFEE
  2929                           wreg	equ	0xFE8
  2930                           postinc1	equ	0xFE6
  2931                           postdec1	equ	0xFE5
  2932                           fsr1h	equ	0xFE2
  2933                           fsr1l	equ	0xFE1
  2934                           postinc2	equ	0xFDE
  2935                           postdec2	equ	0xFDD
  2936                           fsr2h	equ	0xFDA
  2937                           fsr2l	equ	0xFD9
  2938                           status	equ	0xFD8
  2939                           
  2940 ;; *************** function _flashSetAddress *****************
  2941 ;; Defined at:
  2942 ;;		line 117 in file "../src/PIC18/FlashProg.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  address         4   17[COMRAM] unsigned long 
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;  lowAddr         4   33[COMRAM] unsigned long 
  2947 ;;  highAddr        4   29[COMRAM] unsigned long 
  2948 ;;  upperAddr       4   25[COMRAM] unsigned long 
  2949 ;; Return value:  Size  Location     Type
  2950 ;;		None               void
  2951 ;; Registers used:
  2952 ;;		wreg, status,2, status,0, cstack
  2953 ;; Tracked objects:
  2954 ;;		On entry : 0/0
  2955 ;;		On exit  : 0/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2958 ;;      Params:         4       0       0       0       0       0       0
  2959 ;;      Locals:        12       0       0       0       0       0       0
  2960 ;;      Temps:          4       0       0       0       0       0       0
  2961 ;;      Totals:        20       0       0       0       0       0       0
  2962 ;;Total ram usage:       20 bytes
  2963 ;; Hardware stack levels used:    1
  2964 ;; Hardware stack levels required when called:    4
  2965 ;; This function calls:
  2966 ;;		_writeICSP
  2967 ;; This function is called by:
  2968 ;;		_flashReadBlock
  2969 ;;		_flashWriteBlock
  2970 ;;		_rowErase
  2971 ;;		_flashWriteData
  2972 ;;		_flashWriteHalfBlock
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text10
  2977  007106                     __ptext10:
  2978                           	opt stack 0
  2979  007106                     _flashSetAddress:
  2980                           	opt stack 23
  2981                           
  2982                           ;FlashProg.c: 118: uint32 upperAddr;
  2983                           ;FlashProg.c: 119: uint32 highAddr;
  2984                           ;FlashProg.c: 120: uint32 lowAddr;
  2985                           ;FlashProg.c: 122: lowAddr = (address&0x0000ff);
  2986                           
  2987                           ;incstack = 0
  2988  007106  5012               	movf	flashSetAddress@address,w,c
  2989  007108  6E22               	movwf	flashSetAddress@lowAddr,c
  2990  00710A  6A23               	clrf	flashSetAddress@lowAddr+1,c
  2991  00710C  6A24               	clrf	flashSetAddress@lowAddr+2,c
  2992  00710E  6A25               	clrf	flashSetAddress@lowAddr+3,c
  2993                           
  2994                           ;FlashProg.c: 123: highAddr = ((address>>8)&0x0000ff);
  2995  007110  C012  F016         	movff	flashSetAddress@address,??_flashSetAddress
  2996  007114  C013  F017         	movff	flashSetAddress@address+1,??_flashSetAddress+1
  2997  007118  C014  F018         	movff	flashSetAddress@address+2,??_flashSetAddress+2
  2998  00711C  C015  F019         	movff	flashSetAddress@address+3,??_flashSetAddress+3
  2999  007120  C017  F016         	movff	??_flashSetAddress+1,??_flashSetAddress
  3000  007124  C018  F017         	movff	??_flashSetAddress+2,??_flashSetAddress+1
  3001  007128  C019  F018         	movff	??_flashSetAddress+3,??_flashSetAddress+2
  3002  00712C  6A19               	clrf	??_flashSetAddress+3,c
  3003  00712E  5016               	movf	??_flashSetAddress,w,c
  3004  007130  6E1E               	movwf	flashSetAddress@highAddr,c
  3005  007132  6A1F               	clrf	flashSetAddress@highAddr+1,c
  3006  007134  6A20               	clrf	flashSetAddress@highAddr+2,c
  3007  007136  6A21               	clrf	flashSetAddress@highAddr+3,c
  3008                           
  3009                           ;FlashProg.c: 124: upperAddr = ((address>>16)&0x0000ff);
  3010  007138  C012  F016         	movff	flashSetAddress@address,??_flashSetAddress
  3011  00713C  C013  F017         	movff	flashSetAddress@address+1,??_flashSetAddress+1
  3012  007140  C014  F018         	movff	flashSetAddress@address+2,??_flashSetAddress+2
  3013  007144  C015  F019         	movff	flashSetAddress@address+3,??_flashSetAddress+3
  3014  007148  0E11               	movlw	17
  3015  00714A  D005               	goto	u690
  3016  00714C                     u695:
  3017  00714C  90D8               	bcf	status,0,c
  3018  00714E  3219               	rrcf	??_flashSetAddress+3,f,c
  3019  007150  3218               	rrcf	??_flashSetAddress+2,f,c
  3020  007152  3217               	rrcf	??_flashSetAddress+1,f,c
  3021  007154  3216               	rrcf	??_flashSetAddress,f,c
  3022  007156                     u690:
  3023  007156  2EE8               	decfsz	wreg,f,c
  3024  007158  D7F9               	goto	u695
  3025  00715A  5016               	movf	??_flashSetAddress,w,c
  3026  00715C  6E1A               	movwf	flashSetAddress@upperAddr,c
  3027  00715E  6A1B               	clrf	flashSetAddress@upperAddr+1,c
  3028  007160  6A1C               	clrf	flashSetAddress@upperAddr+2,c
  3029  007162  6A1D               	clrf	flashSetAddress@upperAddr+3,c
  3030                           
  3031                           ;FlashProg.c: 126: writeICSP(0x0, 0x0e00|upperAddr);
  3032  007164  0E00               	movlw	0
  3033  007166  6E0F               	movwf	writeICSP@commandByte+1,c
  3034  007168  0E00               	movlw	0
  3035  00716A  6E0E               	movwf	writeICSP@commandByte,c
  3036  00716C  0E00               	movlw	0
  3037  00716E  101A               	iorwf	flashSetAddress@upperAddr,w,c
  3038  007170  6E10               	movwf	writeICSP@dataBytes,c
  3039  007172  0E0E               	movlw	14
  3040  007174  101B               	iorwf	flashSetAddress@upperAddr+1,w,c
  3041  007176  6E11               	movwf	writeICSP@dataBytes+1,c
  3042  007178  EC52  F036         	call	_writeICSP	;wreg free
  3043                           
  3044                           ;FlashProg.c: 127: writeICSP(0x0, 0x6ef8);
  3045  00717C  0E00               	movlw	0
  3046  00717E  6E0F               	movwf	writeICSP@commandByte+1,c
  3047  007180  0E00               	movlw	0
  3048  007182  6E0E               	movwf	writeICSP@commandByte,c
  3049  007184  0E6E               	movlw	110
  3050  007186  6E11               	movwf	writeICSP@dataBytes+1,c
  3051  007188  0EF8               	movlw	248
  3052  00718A  6E10               	movwf	writeICSP@dataBytes,c
  3053  00718C  EC52  F036         	call	_writeICSP	;wreg free
  3054                           
  3055                           ;FlashProg.c: 128: writeICSP(0x0, 0x0e00|highAddr);
  3056  007190  0E00               	movlw	0
  3057  007192  6E0F               	movwf	writeICSP@commandByte+1,c
  3058  007194  0E00               	movlw	0
  3059  007196  6E0E               	movwf	writeICSP@commandByte,c
  3060  007198  0E00               	movlw	0
  3061  00719A  101E               	iorwf	flashSetAddress@highAddr,w,c
  3062  00719C  6E10               	movwf	writeICSP@dataBytes,c
  3063  00719E  0E0E               	movlw	14
  3064  0071A0  101F               	iorwf	flashSetAddress@highAddr+1,w,c
  3065  0071A2  6E11               	movwf	writeICSP@dataBytes+1,c
  3066  0071A4  EC52  F036         	call	_writeICSP	;wreg free
  3067                           
  3068                           ;FlashProg.c: 129: writeICSP(0x0, 0x6ef7);
  3069  0071A8  0E00               	movlw	0
  3070  0071AA  6E0F               	movwf	writeICSP@commandByte+1,c
  3071  0071AC  0E00               	movlw	0
  3072  0071AE  6E0E               	movwf	writeICSP@commandByte,c
  3073  0071B0  0E6E               	movlw	110
  3074  0071B2  6E11               	movwf	writeICSP@dataBytes+1,c
  3075  0071B4  0EF7               	movlw	247
  3076  0071B6  6E10               	movwf	writeICSP@dataBytes,c
  3077  0071B8  EC52  F036         	call	_writeICSP	;wreg free
  3078                           
  3079                           ;FlashProg.c: 130: writeICSP(0x0, 0x0e00|lowAddr);
  3080  0071BC  0E00               	movlw	0
  3081  0071BE  6E0F               	movwf	writeICSP@commandByte+1,c
  3082  0071C0  0E00               	movlw	0
  3083  0071C2  6E0E               	movwf	writeICSP@commandByte,c
  3084  0071C4  0E00               	movlw	0
  3085  0071C6  1022               	iorwf	flashSetAddress@lowAddr,w,c
  3086  0071C8  6E10               	movwf	writeICSP@dataBytes,c
  3087  0071CA  0E0E               	movlw	14
  3088  0071CC  1023               	iorwf	flashSetAddress@lowAddr+1,w,c
  3089  0071CE  6E11               	movwf	writeICSP@dataBytes+1,c
  3090  0071D0  EC52  F036         	call	_writeICSP	;wreg free
  3091                           
  3092                           ;FlashProg.c: 131: writeICSP(0x0, 0x6ef6);
  3093  0071D4  0E00               	movlw	0
  3094  0071D6  6E0F               	movwf	writeICSP@commandByte+1,c
  3095  0071D8  0E00               	movlw	0
  3096  0071DA  6E0E               	movwf	writeICSP@commandByte,c
  3097  0071DC  0E6E               	movlw	110
  3098  0071DE  6E11               	movwf	writeICSP@dataBytes+1,c
  3099  0071E0  0EF6               	movlw	246
  3100  0071E2  6E10               	movwf	writeICSP@dataBytes,c
  3101  0071E4  EC52  F036         	call	_writeICSP	;wreg free
  3102  0071E8  0012               	return	
  3103  0071EA                     __end_of_flashSetAddress:
  3104                           	opt stack 0
  3105                           prodl	equ	0xFF3
  3106                           postinc0	equ	0xFEE
  3107                           wreg	equ	0xFE8
  3108                           postinc1	equ	0xFE6
  3109                           postdec1	equ	0xFE5
  3110                           fsr1h	equ	0xFE2
  3111                           fsr1l	equ	0xFE1
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           fsr2h	equ	0xFDA
  3115                           fsr2l	equ	0xFD9
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function _flashRead16Bits *****************
  3119 ;; Defined at:
  3120 ;;		line 169 in file "../src/PIC18/FlashProg.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;		None
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  data            2   22[COMRAM] unsigned int 
  3125 ;;  firstData       2   20[COMRAM] unsigned int 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  2   18[COMRAM] unsigned int 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3135 ;;      Params:         2       0       0       0       0       0       0
  3136 ;;      Locals:         4       0       0       0       0       0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0
  3138 ;;      Totals:         6       0       0       0       0       0       0
  3139 ;;Total ram usage:        6 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    4
  3142 ;; This function calls:
  3143 ;;		_readFirstByte
  3144 ;;		_readICSP
  3145 ;; This function is called by:
  3146 ;;		_flashReadBlock
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text11
  3151  006CF8                     __ptext11:
  3152                           	opt stack 0
  3153  006CF8                     _flashRead16Bits:
  3154                           	opt stack 23
  3155                           
  3156                           ;FlashProg.c: 170: uint16 data;
  3157                           ;FlashProg.c: 171: uint16 firstData;
  3158                           ;FlashProg.c: 173: data = readICSP();
  3159                           
  3160                           ;incstack = 0
  3161  006CF8  ECB5  F036         	call	_readICSP	;wreg free
  3162  006CFC  C00F  F017         	movff	?_readICSP,flashRead16Bits@data
  3163  006D00  C010  F018         	movff	?_readICSP+1,flashRead16Bits@data+1
  3164                           
  3165                           ;FlashProg.c: 174: firstData = readFirstByte();
  3166  006D04  ECD8  F036         	call	_readFirstByte	;wreg free
  3167  006D08  C00F  F015         	movff	?_readFirstByte,flashRead16Bits@firstData
  3168  006D0C  C010  F016         	movff	?_readFirstByte+1,flashRead16Bits@firstData+1
  3169                           
  3170                           ;FlashProg.c: 176: data = firstData|data;
  3171  006D10  5017               	movf	flashRead16Bits@data,w,c
  3172  006D12  1015               	iorwf	flashRead16Bits@firstData,w,c
  3173  006D14  6E17               	movwf	flashRead16Bits@data,c
  3174  006D16  5018               	movf	flashRead16Bits@data+1,w,c
  3175  006D18  1016               	iorwf	flashRead16Bits@firstData+1,w,c
  3176  006D1A  6E18               	movwf	flashRead16Bits@data+1,c
  3177                           
  3178                           ;FlashProg.c: 178: return data;
  3179  006D1C  C017  F013         	movff	flashRead16Bits@data,?_flashRead16Bits
  3180  006D20  C018  F014         	movff	flashRead16Bits@data+1,?_flashRead16Bits+1
  3181  006D24  0012               	return	
  3182  006D26                     __end_of_flashRead16Bits:
  3183                           	opt stack 0
  3184                           prodl	equ	0xFF3
  3185                           postinc0	equ	0xFEE
  3186                           wreg	equ	0xFE8
  3187                           postinc1	equ	0xFE6
  3188                           postdec1	equ	0xFE5
  3189                           fsr1h	equ	0xFE2
  3190                           fsr1l	equ	0xFE1
  3191                           postinc2	equ	0xFDE
  3192                           postdec2	equ	0xFDD
  3193                           fsr2h	equ	0xFDA
  3194                           fsr2l	equ	0xFD9
  3195                           status	equ	0xFD8
  3196                           
  3197 ;; *************** function _readICSP *****************
  3198 ;; Defined at:
  3199 ;;		line 25 in file "../src/PIC18/ICSP.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;		None
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;  data            2   16[COMRAM] unsigned int 
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  2   14[COMRAM] unsigned int 
  3206 ;; Registers used:
  3207 ;;		wreg, status,2, status,0, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3213 ;;      Params:         2       0       0       0       0       0       0
  3214 ;;      Locals:         2       0       0       0       0       0       0
  3215 ;;      Temps:          0       0       0       0       0       0       0
  3216 ;;      Totals:         4       0       0       0       0       0       0
  3217 ;;Total ram usage:        4 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:    3
  3220 ;; This function calls:
  3221 ;;		_readBits
  3222 ;;		_writeBits
  3223 ;; This function is called by:
  3224 ;;		_flashRead16Bits
  3225 ;;		_readDeviceID1
  3226 ;;		_readDeviceID2
  3227 ;;		_flashRead8Bits
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           	psect	text12
  3232  006D6A                     __ptext12:
  3233                           	opt stack 0
  3234  006D6A                     _readICSP:
  3235                           	opt stack 23
  3236                           
  3237                           ;ICSP.c: 26: uint16 data;
  3238                           ;ICSP.c: 27: writeBits(9, 4);
  3239                           
  3240                           ;incstack = 0
  3241  006D6A  0E00               	movlw	0
  3242  006D6C  6E06               	movwf	writeBits@pattern+1,c
  3243  006D6E  0E09               	movlw	9
  3244  006D70  6E05               	movwf	writeBits@pattern,c
  3245  006D72  0E00               	movlw	0
  3246  006D74  6E08               	movwf	writeBits@bitsToWrite+1,c
  3247  006D76  0E04               	movlw	4
  3248  006D78  6E07               	movwf	writeBits@bitsToWrite,c
  3249  006D7A  EC93  F036         	call	_writeBits	;wreg free
  3250                           
  3251                           ;ICSP.c: 28: writeBits(0, 8);
  3252  006D7E  0E00               	movlw	0
  3253  006D80  6E06               	movwf	writeBits@pattern+1,c
  3254  006D82  0E00               	movlw	0
  3255  006D84  6E05               	movwf	writeBits@pattern,c
  3256  006D86  0E00               	movlw	0
  3257  006D88  6E08               	movwf	writeBits@bitsToWrite+1,c
  3258  006D8A  0E08               	movlw	8
  3259  006D8C  6E07               	movwf	writeBits@bitsToWrite,c
  3260  006D8E  EC93  F036         	call	_writeBits	;wreg free
  3261                           
  3262                           ;ICSP.c: 29: data = readBits(8);
  3263  006D92  0E00               	movlw	0
  3264  006D94  6E09               	movwf	readBits@bitsToRead+1,c
  3265  006D96  0E08               	movlw	8
  3266  006D98  6E08               	movwf	readBits@bitsToRead,c
  3267  006D9A  ECFE  F036         	call	_readBits	;wreg free
  3268  006D9E  C008  F011         	movff	?_readBits,readICSP@data
  3269  006DA2  C009  F012         	movff	?_readBits+1,readICSP@data+1
  3270                           
  3271                           ;ICSP.c: 31: return data;
  3272  006DA6  C011  F00F         	movff	readICSP@data,?_readICSP
  3273  006DAA  C012  F010         	movff	readICSP@data+1,?_readICSP+1
  3274  006DAE  0012               	return	
  3275  006DB0                     __end_of_readICSP:
  3276                           	opt stack 0
  3277                           prodl	equ	0xFF3
  3278                           postinc0	equ	0xFEE
  3279                           wreg	equ	0xFE8
  3280                           postinc1	equ	0xFE6
  3281                           postdec1	equ	0xFE5
  3282                           fsr1h	equ	0xFE2
  3283                           fsr1l	equ	0xFE1
  3284                           postinc2	equ	0xFDE
  3285                           postdec2	equ	0xFDD
  3286                           fsr2h	equ	0xFDA
  3287                           fsr2l	equ	0xFD9
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function _readFirstByte *****************
  3291 ;; Defined at:
  3292 ;;		line 34 in file "../src/PIC18/ICSP.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;		None
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  data            2   16[COMRAM] unsigned int 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  2   14[COMRAM] unsigned int 
  3299 ;; Registers used:
  3300 ;;		wreg, status,2, status,0, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3306 ;;      Params:         2       0       0       0       0       0       0
  3307 ;;      Locals:         2       0       0       0       0       0       0
  3308 ;;      Temps:          0       0       0       0       0       0       0
  3309 ;;      Totals:         4       0       0       0       0       0       0
  3310 ;;Total ram usage:        4 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    3
  3313 ;; This function calls:
  3314 ;;		_readBits
  3315 ;;		_writeBits
  3316 ;; This function is called by:
  3317 ;;		_flashRead16Bits
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text13
  3322  006DB0                     __ptext13:
  3323                           	opt stack 0
  3324  006DB0                     _readFirstByte:
  3325                           	opt stack 23
  3326                           
  3327                           ;ICSP.c: 35: uint16 data;
  3328                           ;ICSP.c: 36: writeBits(9, 4);
  3329                           
  3330                           ;incstack = 0
  3331  006DB0  0E00               	movlw	0
  3332  006DB2  6E06               	movwf	writeBits@pattern+1,c
  3333  006DB4  0E09               	movlw	9
  3334  006DB6  6E05               	movwf	writeBits@pattern,c
  3335  006DB8  0E00               	movlw	0
  3336  006DBA  6E08               	movwf	writeBits@bitsToWrite+1,c
  3337  006DBC  0E04               	movlw	4
  3338  006DBE  6E07               	movwf	writeBits@bitsToWrite,c
  3339  006DC0  EC93  F036         	call	_writeBits	;wreg free
  3340                           
  3341                           ;ICSP.c: 37: writeBits(0, 8);
  3342  006DC4  0E00               	movlw	0
  3343  006DC6  6E06               	movwf	writeBits@pattern+1,c
  3344  006DC8  0E00               	movlw	0
  3345  006DCA  6E05               	movwf	writeBits@pattern,c
  3346  006DCC  0E00               	movlw	0
  3347  006DCE  6E08               	movwf	writeBits@bitsToWrite+1,c
  3348  006DD0  0E08               	movlw	8
  3349  006DD2  6E07               	movwf	writeBits@bitsToWrite,c
  3350  006DD4  EC93  F036         	call	_writeBits	;wreg free
  3351                           
  3352                           ;ICSP.c: 38: data = readBits(8);
  3353  006DD8  0E00               	movlw	0
  3354  006DDA  6E09               	movwf	readBits@bitsToRead+1,c
  3355  006DDC  0E08               	movlw	8
  3356  006DDE  6E08               	movwf	readBits@bitsToRead,c
  3357  006DE0  ECFE  F036         	call	_readBits	;wreg free
  3358  006DE4  C008  F011         	movff	?_readBits,readFirstByte@data
  3359  006DE8  C009  F012         	movff	?_readBits+1,readFirstByte@data+1
  3360                           
  3361                           ;ICSP.c: 39: data = data<<8;
  3362  006DEC  5011               	movf	readFirstByte@data,w,c
  3363  006DEE  6E12               	movwf	readFirstByte@data+1,c
  3364  006DF0  6A11               	clrf	readFirstByte@data,c
  3365                           
  3366                           ;ICSP.c: 40: return data;
  3367  006DF2  C011  F00F         	movff	readFirstByte@data,?_readFirstByte
  3368  006DF6  C012  F010         	movff	readFirstByte@data+1,?_readFirstByte+1
  3369  006DFA  0012               	return	
  3370  006DFC                     __end_of_readFirstByte:
  3371                           	opt stack 0
  3372                           prodl	equ	0xFF3
  3373                           postinc0	equ	0xFEE
  3374                           wreg	equ	0xFE8
  3375                           postinc1	equ	0xFE6
  3376                           postdec1	equ	0xFE5
  3377                           fsr1h	equ	0xFE2
  3378                           fsr1l	equ	0xFE1
  3379                           postinc2	equ	0xFDE
  3380                           postdec2	equ	0xFDD
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _readBits *****************
  3386 ;; Defined at:
  3387 ;;		line 52 in file "../src/PIC18/ICSP.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  bitsToRead      2    7[COMRAM] int 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;  data            2   12[COMRAM] unsigned int 
  3392 ;;  i               2   10[COMRAM] int 
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  2    7[COMRAM] unsigned int 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3402 ;;      Params:         2       0       0       0       0       0       0
  3403 ;;      Locals:         4       0       0       0       0       0       0
  3404 ;;      Temps:          1       0       0       0       0       0       0
  3405 ;;      Totals:         7       0       0       0       0       0       0
  3406 ;;Total ram usage:        7 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    2
  3409 ;; This function calls:
  3410 ;;		_readBit
  3411 ;; This function is called by:
  3412 ;;		_readICSP
  3413 ;;		_readFirstByte
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text14
  3418  006DFC                     __ptext14:
  3419                           	opt stack 0
  3420  006DFC                     _readBits:
  3421                           	opt stack 23
  3422                           
  3423                           ;ICSP.c: 53: int i=0;
  3424                           
  3425                           ;incstack = 0
  3426  006DFC  0E00               	movlw	0
  3427  006DFE  6E0C               	movwf	readBits@i+1,c
  3428  006E00  0E00               	movlw	0
  3429  006E02  6E0B               	movwf	readBits@i,c
  3430                           
  3431                           ;ICSP.c: 54: uint16 data = 0;
  3432  006E04  0E00               	movlw	0
  3433  006E06  6E0E               	movwf	readBits@data+1,c
  3434  006E08  0E00               	movlw	0
  3435  006E0A  6E0D               	movwf	readBits@data,c
  3436                           
  3437                           ;ICSP.c: 56: (TRISDbits.TRISD4 = 1);
  3438  006E0C  8895               	bsf	3989,4,c	;volatile
  3439                           
  3440                           ;ICSP.c: 58: while(i < bitsToRead){
  3441  006E0E  D013               	goto	l1416
  3442  006E10                     l1412:
  3443                           
  3444                           ;ICSP.c: 59: data = (readBit()<< i)|data;
  3445  006E10  C00B  F00A         	movff	readBits@i,??_readBits
  3446  006E14  EC34  F036         	call	_readBit	;wreg free
  3447  006E18  2A0A               	incf	??_readBits,f,c
  3448  006E1A  D003               	goto	u674
  3449  006E1C                     u675:
  3450  006E1C  90D8               	bcf	status,0,c
  3451  006E1E  3604               	rlcf	?_readBit,f,c
  3452  006E20  3605               	rlcf	?_readBit+1,f,c
  3453  006E22                     u674:
  3454  006E22  2E0A               	decfsz	??_readBits,f,c
  3455  006E24  D7FB               	goto	u675
  3456  006E26  500D               	movf	readBits@data,w,c
  3457  006E28  1004               	iorwf	?_readBit,w,c
  3458  006E2A  6E0D               	movwf	readBits@data,c
  3459  006E2C  500E               	movf	readBits@data+1,w,c
  3460  006E2E  1005               	iorwf	?_readBit+1,w,c
  3461  006E30  6E0E               	movwf	readBits@data+1,c
  3462                           
  3463                           ;ICSP.c: 60: i++;
  3464  006E32  4A0B               	infsnz	readBits@i,f,c
  3465  006E34  2A0C               	incf	readBits@i+1,f,c
  3466  006E36                     l1416:
  3467  006E36  500C               	movf	readBits@i+1,w,c
  3468  006E38  0A80               	xorlw	128
  3469  006E3A  6E0A               	movwf	??_readBits& (0+255),c
  3470  006E3C  5008               	movf	readBits@bitsToRead,w,c
  3471  006E3E  5C0B               	subwf	readBits@i,w,c
  3472  006E40  5009               	movf	readBits@bitsToRead+1,w,c
  3473  006E42  0A80               	xorlw	128
  3474  006E44  580A               	subwfb	??_readBits& (0+255),w,c
  3475  006E46  A0D8               	btfss	status,0,c
  3476  006E48  D7E3               	goto	l1412
  3477                           
  3478                           ;ICSP.c: 61: }
  3479                           ;ICSP.c: 62: return data;
  3480  006E4A  C00D  F008         	movff	readBits@data,?_readBits
  3481  006E4E  C00E  F009         	movff	readBits@data+1,?_readBits+1
  3482  006E52  0012               	return	
  3483  006E54                     __end_of_readBits:
  3484                           	opt stack 0
  3485                           prodl	equ	0xFF3
  3486                           postinc0	equ	0xFEE
  3487                           wreg	equ	0xFE8
  3488                           postinc1	equ	0xFE6
  3489                           postdec1	equ	0xFE5
  3490                           fsr1h	equ	0xFE2
  3491                           fsr1l	equ	0xFE1
  3492                           postinc2	equ	0xFDE
  3493                           postdec2	equ	0xFDD
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function _readBit *****************
  3499 ;; Defined at:
  3500 ;;		line 44 in file "../src/PIC18/ICSP.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;		None
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  data            2    5[COMRAM] unsigned int 
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  2    3[COMRAM] unsigned int 
  3507 ;; Registers used:
  3508 ;;		wreg, status,2, cstack
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3514 ;;      Params:         2       0       0       0       0       0       0
  3515 ;;      Locals:         2       0       0       0       0       0       0
  3516 ;;      Temps:          0       0       0       0       0       0       0
  3517 ;;      Totals:         4       0       0       0       0       0       0
  3518 ;;Total ram usage:        4 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:    1
  3521 ;; This function calls:
  3522 ;;		_PGC_high
  3523 ;;		_PGC_low
  3524 ;;		_readPGD
  3525 ;; This function is called by:
  3526 ;;		_readBits
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           	psect	text15
  3531  006C68                     __ptext15:
  3532                           	opt stack 0
  3533  006C68                     _readBit:
  3534                           	opt stack 23
  3535                           
  3536                           ;ICSP.c: 45: uint16 data;
  3537                           ;ICSP.c: 46: PGC_high();
  3538                           
  3539                           ;incstack = 0
  3540  006C68  ECDB  F035         	call	_PGC_high	;wreg free
  3541                           
  3542                           ;ICSP.c: 47: data = readPGD();
  3543  006C6C  EC09  F036         	call	_readPGD	;wreg free
  3544  006C70  C001  F006         	movff	?_readPGD,readBit@data
  3545  006C74  C002  F007         	movff	?_readPGD+1,readBit@data+1
  3546                           
  3547                           ;ICSP.c: 48: PGC_low();
  3548  006C78  ECDD  F035         	call	_PGC_low	;wreg free
  3549                           
  3550                           ;ICSP.c: 49: return data;
  3551  006C7C  C006  F004         	movff	readBit@data,?_readBit
  3552  006C80  C007  F005         	movff	readBit@data+1,?_readBit+1
  3553  006C84  0012               	return	
  3554  006C86                     __end_of_readBit:
  3555                           	opt stack 0
  3556                           prodl	equ	0xFF3
  3557                           postinc0	equ	0xFEE
  3558                           wreg	equ	0xFE8
  3559                           postinc1	equ	0xFE6
  3560                           postdec1	equ	0xFE5
  3561                           fsr1h	equ	0xFE2
  3562                           fsr1l	equ	0xFE1
  3563                           postinc2	equ	0xFDE
  3564                           postdec2	equ	0xFDD
  3565                           fsr2h	equ	0xFDA
  3566                           fsr2l	equ	0xFD9
  3567                           status	equ	0xFD8
  3568                           
  3569 ;; *************** function _readPGD *****************
  3570 ;; Defined at:
  3571 ;;		line 6 in file "../src/PIC18/FlashProg.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;		None
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;		None
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  2    0[COMRAM] unsigned int 
  3578 ;; Registers used:
  3579 ;;		wreg, status,2
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3585 ;;      Params:         2       0       0       0       0       0       0
  3586 ;;      Locals:         0       0       0       0       0       0       0
  3587 ;;      Temps:          1       0       0       0       0       0       0
  3588 ;;      Totals:         3       0       0       0       0       0       0
  3589 ;;Total ram usage:        3 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; This function calls:
  3592 ;;		Nothing
  3593 ;; This function is called by:
  3594 ;;		_readBit
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text16
  3599  006C12                     __ptext16:
  3600                           	opt stack 0
  3601  006C12                     _readPGD:
  3602                           	opt stack 23
  3603                           
  3604                           ;FlashProg.c: 7: return PORTDbits.RD4;
  3605                           
  3606                           ;incstack = 0
  3607  006C12  A883               	btfss	3971,4,c	;volatile
  3608  006C14  D003               	goto	u630
  3609  006C16  6A03               	clrf	??_readPGD& (0+255),c
  3610  006C18  2A03               	incf	??_readPGD& (0+255),f,c
  3611  006C1A  D001               	goto	u638
  3612  006C1C                     u630:
  3613  006C1C  6A03               	clrf	??_readPGD& (0+255),c
  3614  006C1E                     u638:
  3615  006C1E  5003               	movf	??_readPGD,w,c
  3616  006C20  6E01               	movwf	?_readPGD,c
  3617  006C22  6A02               	clrf	?_readPGD+1,c
  3618  006C24  0012               	return	
  3619  006C26                     __end_of_readPGD:
  3620                           	opt stack 0
  3621                           prodl	equ	0xFF3
  3622                           postinc0	equ	0xFEE
  3623                           wreg	equ	0xFE8
  3624                           postinc1	equ	0xFE6
  3625                           postdec1	equ	0xFE5
  3626                           fsr1h	equ	0xFE2
  3627                           fsr1l	equ	0xFE1
  3628                           postinc2	equ	0xFDE
  3629                           postdec2	equ	0xFDD
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634 ;; *************** function _exit_HVP *****************
  3635 ;; Defined at:
  3636 ;;		line 57 in file "../src/PIC18/FlashProg.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;		None               void
  3643 ;; Registers used:
  3644 ;;		wreg, status,2, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3650 ;;      Params:         0       0       0       0       0       0       0
  3651 ;;      Locals:         0       0       0       0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0       0       0
  3653 ;;      Totals:         0       0       0       0       0       0       0
  3654 ;;Total ram usage:        0 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    2
  3657 ;; This function calls:
  3658 ;;		_MCLR_low
  3659 ;;		_PGC_low
  3660 ;;		_PGD_low
  3661 ;;		_PGM_low
  3662 ;; This function is called by:
  3663 ;;		_main
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           	psect	text17
  3668  006C00                     __ptext17:
  3669                           	opt stack 0
  3670  006C00                     _exit_HVP:
  3671                           	opt stack 27
  3672                           
  3673                           ;FlashProg.c: 58: PGC_low();
  3674                           
  3675                           ;incstack = 0
  3676  006C00  ECDD  F035         	call	_PGC_low	;wreg free
  3677                           
  3678                           ;FlashProg.c: 59: PGD_low();
  3679  006C04  ECF0  F035         	call	_PGD_low	;wreg free
  3680                           
  3681                           ;FlashProg.c: 60: PGM_low();
  3682  006C08  ECE3  F035         	call	_PGM_low	;wreg free
  3683                           
  3684                           ;FlashProg.c: 61: MCLR_low();
  3685  006C0C  ECF7  F035         	call	_MCLR_low	;wreg free
  3686  006C10  0012               	return	
  3687  006C12                     __end_of_exit_HVP:
  3688                           	opt stack 0
  3689                           prodl	equ	0xFF3
  3690                           postinc0	equ	0xFEE
  3691                           wreg	equ	0xFE8
  3692                           postinc1	equ	0xFE6
  3693                           postdec1	equ	0xFE5
  3694                           fsr1h	equ	0xFE2
  3695                           fsr1l	equ	0xFE1
  3696                           postinc2	equ	0xFDE
  3697                           postdec2	equ	0xFDD
  3698                           fsr2h	equ	0xFDA
  3699                           fsr2l	equ	0xFD9
  3700                           status	equ	0xFD8
  3701                           
  3702 ;; *************** function _PGM_low *****************
  3703 ;; Defined at:
  3704 ;;		line 30 in file "../src/PIC18/FlashProg.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;		None               void
  3711 ;; Registers used:
  3712 ;;		None
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3718 ;;      Params:         0       0       0       0       0       0       0
  3719 ;;      Locals:         0       0       0       0       0       0       0
  3720 ;;      Temps:          0       0       0       0       0       0       0
  3721 ;;      Totals:         0       0       0       0       0       0       0
  3722 ;;Total ram usage:        0 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; This function calls:
  3725 ;;		Nothing
  3726 ;; This function is called by:
  3727 ;;		_exit_HVP
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           	psect	text18
  3732  006BC6                     __ptext18:
  3733                           	opt stack 0
  3734  006BC6                     _PGM_low:
  3735                           	opt stack 28
  3736                           
  3737                           ;FlashProg.c: 31: PORTDbits.RD6 = 0;
  3738                           
  3739                           ;incstack = 0
  3740  006BC6  9C83               	bcf	3971,6,c	;volatile
  3741  006BC8  0012               	return	
  3742  006BCA                     __end_of_PGM_low:
  3743                           	opt stack 0
  3744                           prodl	equ	0xFF3
  3745                           postinc0	equ	0xFEE
  3746                           wreg	equ	0xFE8
  3747                           postinc1	equ	0xFE6
  3748                           postdec1	equ	0xFE5
  3749                           fsr1h	equ	0xFE2
  3750                           fsr1l	equ	0xFE1
  3751                           postinc2	equ	0xFDE
  3752                           postdec2	equ	0xFDD
  3753                           fsr2h	equ	0xFDA
  3754                           fsr2l	equ	0xFD9
  3755                           status	equ	0xFD8
  3756                           
  3757 ;; *************** function _enter_HVP *****************
  3758 ;; Defined at:
  3759 ;;		line 49 in file "../src/PIC18/FlashProg.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;		None
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;		None
  3764 ;; Return value:  Size  Location     Type
  3765 ;;		None               void
  3766 ;; Registers used:
  3767 ;;		wreg, status,2, cstack
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3773 ;;      Params:         0       0       0       0       0       0       0
  3774 ;;      Locals:         0       0       0       0       0       0       0
  3775 ;;      Temps:          0       0       0       0       0       0       0
  3776 ;;      Totals:         0       0       0       0       0       0       0
  3777 ;;Total ram usage:        0 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    2
  3780 ;; This function calls:
  3781 ;;		_MCLR_high
  3782 ;;		_MCLR_low
  3783 ;;		_PGC_low
  3784 ;;		_PGD_low
  3785 ;;		_PGM_high
  3786 ;; This function is called by:
  3787 ;;		_main
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text19
  3792  006C3C                     __ptext19:
  3793                           	opt stack 0
  3794  006C3C                     _enter_HVP:
  3795                           	opt stack 27
  3796                           
  3797                           ;FlashProg.c: 50: MCLR_low();
  3798                           
  3799                           ;incstack = 0
  3800  006C3C  ECF7  F035         	call	_MCLR_low	;wreg free
  3801                           
  3802                           ;FlashProg.c: 51: PGC_low();
  3803  006C40  ECDD  F035         	call	_PGC_low	;wreg free
  3804                           
  3805                           ;FlashProg.c: 52: PGD_low();
  3806  006C44  ECF0  F035         	call	_PGD_low	;wreg free
  3807                           
  3808                           ;FlashProg.c: 53: PGM_high();
  3809  006C48  ECE1  F035         	call	_PGM_high	;wreg free
  3810                           
  3811                           ;FlashProg.c: 54: MCLR_high();
  3812  006C4C  ECDF  F035         	call	_MCLR_high	;wreg free
  3813  006C50  0012               	return	
  3814  006C52                     __end_of_enter_HVP:
  3815                           	opt stack 0
  3816                           prodl	equ	0xFF3
  3817                           postinc0	equ	0xFEE
  3818                           wreg	equ	0xFE8
  3819                           postinc1	equ	0xFE6
  3820                           postdec1	equ	0xFE5
  3821                           fsr1h	equ	0xFE2
  3822                           fsr1l	equ	0xFE1
  3823                           postinc2	equ	0xFDE
  3824                           postdec2	equ	0xFDD
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829 ;; *************** function _PGM_high *****************
  3830 ;; Defined at:
  3831 ;;		line 34 in file "../src/PIC18/FlashProg.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;		None
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;		None               void
  3838 ;; Registers used:
  3839 ;;		None
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3845 ;;      Params:         0       0       0       0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0
  3848 ;;      Totals:         0       0       0       0       0       0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; This function calls:
  3852 ;;		Nothing
  3853 ;; This function is called by:
  3854 ;;		_enter_HVP
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           	psect	text20
  3859  006BC2                     __ptext20:
  3860                           	opt stack 0
  3861  006BC2                     _PGM_high:
  3862                           	opt stack 28
  3863                           
  3864                           ;FlashProg.c: 35: PORTDbits.RD6 = 1;
  3865                           
  3866                           ;incstack = 0
  3867  006BC2  8C83               	bsf	3971,6,c	;volatile
  3868  006BC4  0012               	return	
  3869  006BC6                     __end_of_PGM_high:
  3870                           	opt stack 0
  3871                           prodl	equ	0xFF3
  3872                           postinc0	equ	0xFEE
  3873                           wreg	equ	0xFE8
  3874                           postinc1	equ	0xFE6
  3875                           postdec1	equ	0xFE5
  3876                           fsr1h	equ	0xFE2
  3877                           fsr1l	equ	0xFE1
  3878                           postinc2	equ	0xFDE
  3879                           postdec2	equ	0xFDD
  3880                           fsr2h	equ	0xFDA
  3881                           fsr2l	equ	0xFD9
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function _PGD_low *****************
  3885 ;; Defined at:
  3886 ;;		line 18 in file "../src/PIC18/FlashProg.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;		None
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;		None
  3891 ;; Return value:  Size  Location     Type
  3892 ;;		None               void
  3893 ;; Registers used:
  3894 ;;		wreg, status,2, cstack
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3900 ;;      Params:         0       0       0       0       0       0       0
  3901 ;;      Locals:         0       0       0       0       0       0       0
  3902 ;;      Temps:          0       0       0       0       0       0       0
  3903 ;;      Totals:         0       0       0       0       0       0       0
  3904 ;;Total ram usage:        0 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    1
  3907 ;; This function calls:
  3908 ;;		_writePGD
  3909 ;; This function is called by:
  3910 ;;		_enter_HVP
  3911 ;;		_exit_HVP
  3912 ;;		_flashWriteAndProgram
  3913 ;;		_rowErase
  3914 ;;		_flashWrite8Bits
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text21
  3919  006BE0                     __ptext21:
  3920                           	opt stack 0
  3921  006BE0                     _PGD_low:
  3922                           	opt stack 26
  3923                           
  3924                           ;FlashProg.c: 19: writePGD(0);
  3925                           
  3926                           ;incstack = 0
  3927  006BE0  0E00               	movlw	0
  3928  006BE2  6E02               	movwf	writePGD@data+1,c
  3929  006BE4  0E00               	movlw	0
  3930  006BE6  6E01               	movwf	writePGD@data,c
  3931  006BE8  ECEA  F035         	call	_writePGD	;wreg free
  3932  006BEC  0012               	return	
  3933  006BEE                     __end_of_PGD_low:
  3934                           	opt stack 0
  3935                           prodl	equ	0xFF3
  3936                           postinc0	equ	0xFEE
  3937                           wreg	equ	0xFE8
  3938                           postinc1	equ	0xFE6
  3939                           postdec1	equ	0xFE5
  3940                           fsr1h	equ	0xFE2
  3941                           fsr1l	equ	0xFE1
  3942                           postinc2	equ	0xFDE
  3943                           postdec2	equ	0xFDD
  3944                           fsr2h	equ	0xFDA
  3945                           fsr2l	equ	0xFD9
  3946                           status	equ	0xFD8
  3947                           
  3948 ;; *************** function _MCLR_low *****************
  3949 ;; Defined at:
  3950 ;;		line 38 in file "../src/PIC18/FlashProg.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;		None
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;		None
  3955 ;; Return value:  Size  Location     Type
  3956 ;;		None               void
  3957 ;; Registers used:
  3958 ;;		wreg, status,2, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3964 ;;      Params:         0       0       0       0       0       0       0
  3965 ;;      Locals:         0       0       0       0       0       0       0
  3966 ;;      Temps:          0       0       0       0       0       0       0
  3967 ;;      Totals:         0       0       0       0       0       0       0
  3968 ;;Total ram usage:        0 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    1
  3971 ;; This function calls:
  3972 ;;		_writePGD
  3973 ;; This function is called by:
  3974 ;;		_enter_HVP
  3975 ;;		_exit_HVP
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text22
  3980  006BEE                     __ptext22:
  3981                           	opt stack 0
  3982  006BEE                     _MCLR_low:
  3983                           	opt stack 27
  3984                           
  3985                           ;FlashProg.c: 39: PORTDbits.RD7 = 0;
  3986                           
  3987                           ;incstack = 0
  3988  006BEE  9E83               	bcf	3971,7,c	;volatile
  3989                           
  3990                           ;FlashProg.c: 41: writePGD(0);
  3991  006BF0  0E00               	movlw	0
  3992  006BF2  6E02               	movwf	writePGD@data+1,c
  3993  006BF4  0E00               	movlw	0
  3994  006BF6  6E01               	movwf	writePGD@data,c
  3995  006BF8  ECEA  F035         	call	_writePGD	;wreg free
  3996                           
  3997                           ;FlashProg.c: 42: PORTDbits.RD5 = 0;
  3998  006BFC  9A83               	bcf	3971,5,c	;volatile
  3999  006BFE  0012               	return	
  4000  006C00                     __end_of_MCLR_low:
  4001                           	opt stack 0
  4002                           prodl	equ	0xFF3
  4003                           postinc0	equ	0xFEE
  4004                           wreg	equ	0xFE8
  4005                           postinc1	equ	0xFE6
  4006                           postdec1	equ	0xFE5
  4007                           fsr1h	equ	0xFE2
  4008                           fsr1l	equ	0xFE1
  4009                           postinc2	equ	0xFDE
  4010                           postdec2	equ	0xFDD
  4011                           fsr2h	equ	0xFDA
  4012                           fsr2l	equ	0xFD9
  4013                           status	equ	0xFD8
  4014                           
  4015 ;; *************** function _MCLR_high *****************
  4016 ;; Defined at:
  4017 ;;		line 45 in file "../src/PIC18/FlashProg.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;		None
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;		None
  4022 ;; Return value:  Size  Location     Type
  4023 ;;		None               void
  4024 ;; Registers used:
  4025 ;;		None
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4031 ;;      Params:         0       0       0       0       0       0       0
  4032 ;;      Locals:         0       0       0       0       0       0       0
  4033 ;;      Temps:          0       0       0       0       0       0       0
  4034 ;;      Totals:         0       0       0       0       0       0       0
  4035 ;;Total ram usage:        0 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_enter_HVP
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text23
  4045  006BBE                     __ptext23:
  4046                           	opt stack 0
  4047  006BBE                     _MCLR_high:
  4048                           	opt stack 28
  4049                           
  4050                           ;FlashProg.c: 46: PORTDbits.RD7 = 1;
  4051                           
  4052                           ;incstack = 0
  4053  006BBE  8E83               	bsf	3971,7,c	;volatile
  4054  006BC0  0012               	return	
  4055  006BC2                     __end_of_MCLR_high:
  4056                           	opt stack 0
  4057                           prodl	equ	0xFF3
  4058                           postinc0	equ	0xFEE
  4059                           wreg	equ	0xFE8
  4060                           postinc1	equ	0xFE6
  4061                           postdec1	equ	0xFE5
  4062                           fsr1h	equ	0xFE2
  4063                           fsr1l	equ	0xFE1
  4064                           postinc2	equ	0xFDE
  4065                           postdec2	equ	0xFDD
  4066                           fsr2h	equ	0xFDA
  4067                           fsr2l	equ	0xFD9
  4068                           status	equ	0xFD8
  4069                           
  4070 ;; *************** function _enableWrite *****************
  4071 ;; Defined at:
  4072 ;;		line 112 in file "../src/PIC18/FlashProg.c"
  4073 ;; Parameters:    Size  Location     Type
  4074 ;;		None
  4075 ;; Auto vars:     Size  Location     Type
  4076 ;;		None
  4077 ;; Return value:  Size  Location     Type
  4078 ;;		None               void
  4079 ;; Registers used:
  4080 ;;		wreg, status,2, status,0, cstack
  4081 ;; Tracked objects:
  4082 ;;		On entry : 0/0
  4083 ;;		On exit  : 0/0
  4084 ;;		Unchanged: 0/0
  4085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4086 ;;      Params:         0       0       0       0       0       0       0
  4087 ;;      Locals:         0       0       0       0       0       0       0
  4088 ;;      Temps:          0       0       0       0       0       0       0
  4089 ;;      Totals:         0       0       0       0       0       0       0
  4090 ;;Total ram usage:        0 bytes
  4091 ;; Hardware stack levels used:    1
  4092 ;; Hardware stack levels required when called:    4
  4093 ;; This function calls:
  4094 ;;		_writeICSP
  4095 ;; This function is called by:
  4096 ;;		_main
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text24
  4101  006CCE                     __ptext24:
  4102                           	opt stack 0
  4103  006CCE                     _enableWrite:
  4104                           	opt stack 25
  4105                           
  4106                           ;FlashProg.c: 113: writeICSP(0x0, 0x8ea6);
  4107                           
  4108                           ;incstack = 0
  4109  006CCE  0E00               	movlw	0
  4110  006CD0  6E0F               	movwf	writeICSP@commandByte+1,c
  4111  006CD2  0E00               	movlw	0
  4112  006CD4  6E0E               	movwf	writeICSP@commandByte,c
  4113  006CD6  0E8E               	movlw	142
  4114  006CD8  6E11               	movwf	writeICSP@dataBytes+1,c
  4115  006CDA  0EA6               	movlw	166
  4116  006CDC  6E10               	movwf	writeICSP@dataBytes,c
  4117  006CDE  EC52  F036         	call	_writeICSP	;wreg free
  4118                           
  4119                           ;FlashProg.c: 114: writeICSP(0x0, 0x9ca6);
  4120  006CE2  0E00               	movlw	0
  4121  006CE4  6E0F               	movwf	writeICSP@commandByte+1,c
  4122  006CE6  0E00               	movlw	0
  4123  006CE8  6E0E               	movwf	writeICSP@commandByte,c
  4124  006CEA  0E9C               	movlw	156
  4125  006CEC  6E11               	movwf	writeICSP@dataBytes+1,c
  4126  006CEE  0EA6               	movlw	166
  4127  006CF0  6E10               	movwf	writeICSP@dataBytes,c
  4128  006CF2  EC52  F036         	call	_writeICSP	;wreg free
  4129  006CF6  0012               	return	
  4130  006CF8                     __end_of_enableWrite:
  4131                           	opt stack 0
  4132                           prodl	equ	0xFF3
  4133                           postinc0	equ	0xFEE
  4134                           wreg	equ	0xFE8
  4135                           postinc1	equ	0xFE6
  4136                           postdec1	equ	0xFE5
  4137                           fsr1h	equ	0xFE2
  4138                           fsr1l	equ	0xFE1
  4139                           postinc2	equ	0xFDE
  4140                           postdec2	equ	0xFDD
  4141                           fsr2h	equ	0xFDA
  4142                           fsr2l	equ	0xFD9
  4143                           status	equ	0xFD8
  4144                           
  4145 ;; *************** function _bulkErase *****************
  4146 ;; Defined at:
  4147 ;;		line 65 in file "../src/PIC18/FlashProg.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;		None
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  i               2   17[COMRAM] int 
  4152 ;; Return value:  Size  Location     Type
  4153 ;;		None               void
  4154 ;; Registers used:
  4155 ;;		wreg, status,2, status,0, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4161 ;;      Params:         0       0       0       0       0       0       0
  4162 ;;      Locals:         2       0       0       0       0       0       0
  4163 ;;      Temps:          0       0       0       0       0       0       0
  4164 ;;      Totals:         2       0       0       0       0       0       0
  4165 ;;Total ram usage:        2 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    4
  4168 ;; This function calls:
  4169 ;;		_writeBits
  4170 ;;		_writeICSP
  4171 ;; This function is called by:
  4172 ;;		_main
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text25
  4177  007422                     __ptext25:
  4178                           	opt stack 0
  4179  007422                     _bulkErase:
  4180                           	opt stack 25
  4181                           
  4182                           ;FlashProg.c: 66: int i = 0;
  4183                           
  4184                           ;incstack = 0
  4185  007422  0E00               	movlw	0
  4186  007424  6E13               	movwf	bulkErase@i+1,c
  4187  007426  0E00               	movlw	0
  4188  007428  6E12               	movwf	bulkErase@i,c
  4189                           
  4190                           ;FlashProg.c: 67: writeICSP(0x0, 0x0e3c);
  4191  00742A  0E00               	movlw	0
  4192  00742C  6E0F               	movwf	writeICSP@commandByte+1,c
  4193  00742E  0E00               	movlw	0
  4194  007430  6E0E               	movwf	writeICSP@commandByte,c
  4195  007432  0E0E               	movlw	14
  4196  007434  6E11               	movwf	writeICSP@dataBytes+1,c
  4197  007436  0E3C               	movlw	60
  4198  007438  6E10               	movwf	writeICSP@dataBytes,c
  4199  00743A  EC52  F036         	call	_writeICSP	;wreg free
  4200                           
  4201                           ;FlashProg.c: 68: writeICSP(0x0, 0x6ef8);
  4202  00743E  0E00               	movlw	0
  4203  007440  6E0F               	movwf	writeICSP@commandByte+1,c
  4204  007442  0E00               	movlw	0
  4205  007444  6E0E               	movwf	writeICSP@commandByte,c
  4206  007446  0E6E               	movlw	110
  4207  007448  6E11               	movwf	writeICSP@dataBytes+1,c
  4208  00744A  0EF8               	movlw	248
  4209  00744C  6E10               	movwf	writeICSP@dataBytes,c
  4210  00744E  EC52  F036         	call	_writeICSP	;wreg free
  4211                           
  4212                           ;FlashProg.c: 69: writeICSP(0x0, 0x0e00);
  4213  007452  0E00               	movlw	0
  4214  007454  6E0F               	movwf	writeICSP@commandByte+1,c
  4215  007456  0E00               	movlw	0
  4216  007458  6E0E               	movwf	writeICSP@commandByte,c
  4217  00745A  0E0E               	movlw	14
  4218  00745C  6E11               	movwf	writeICSP@dataBytes+1,c
  4219  00745E  0E00               	movlw	0
  4220  007460  6E10               	movwf	writeICSP@dataBytes,c
  4221  007462  EC52  F036         	call	_writeICSP	;wreg free
  4222                           
  4223                           ;FlashProg.c: 70: writeICSP(0x0, 0x6ef7);
  4224  007466  0E00               	movlw	0
  4225  007468  6E0F               	movwf	writeICSP@commandByte+1,c
  4226  00746A  0E00               	movlw	0
  4227  00746C  6E0E               	movwf	writeICSP@commandByte,c
  4228  00746E  0E6E               	movlw	110
  4229  007470  6E11               	movwf	writeICSP@dataBytes+1,c
  4230  007472  0EF7               	movlw	247
  4231  007474  6E10               	movwf	writeICSP@dataBytes,c
  4232  007476  EC52  F036         	call	_writeICSP	;wreg free
  4233                           
  4234                           ;FlashProg.c: 71: writeICSP(0x0, 0x0e05);
  4235  00747A  0E00               	movlw	0
  4236  00747C  6E0F               	movwf	writeICSP@commandByte+1,c
  4237  00747E  0E00               	movlw	0
  4238  007480  6E0E               	movwf	writeICSP@commandByte,c
  4239  007482  0E0E               	movlw	14
  4240  007484  6E11               	movwf	writeICSP@dataBytes+1,c
  4241  007486  0E05               	movlw	5
  4242  007488  6E10               	movwf	writeICSP@dataBytes,c
  4243  00748A  EC52  F036         	call	_writeICSP	;wreg free
  4244                           
  4245                           ;FlashProg.c: 72: writeICSP(0x0, 0x6ef6);
  4246  00748E  0E00               	movlw	0
  4247  007490  6E0F               	movwf	writeICSP@commandByte+1,c
  4248  007492  0E00               	movlw	0
  4249  007494  6E0E               	movwf	writeICSP@commandByte,c
  4250  007496  0E6E               	movlw	110
  4251  007498  6E11               	movwf	writeICSP@dataBytes+1,c
  4252  00749A  0EF6               	movlw	246
  4253  00749C  6E10               	movwf	writeICSP@dataBytes,c
  4254  00749E  EC52  F036         	call	_writeICSP	;wreg free
  4255                           
  4256                           ;FlashProg.c: 73: writeICSP(0xc, 0x3f3f);
  4257  0074A2  0E00               	movlw	0
  4258  0074A4  6E0F               	movwf	writeICSP@commandByte+1,c
  4259  0074A6  0E0C               	movlw	12
  4260  0074A8  6E0E               	movwf	writeICSP@commandByte,c
  4261  0074AA  0E3F               	movlw	63
  4262  0074AC  6E11               	movwf	writeICSP@dataBytes+1,c
  4263  0074AE  0E3F               	movlw	63
  4264  0074B0  6E10               	movwf	writeICSP@dataBytes,c
  4265  0074B2  EC52  F036         	call	_writeICSP	;wreg free
  4266                           
  4267                           ;FlashProg.c: 74: writeICSP(0x0, 0x0e3c);
  4268  0074B6  0E00               	movlw	0
  4269  0074B8  6E0F               	movwf	writeICSP@commandByte+1,c
  4270  0074BA  0E00               	movlw	0
  4271  0074BC  6E0E               	movwf	writeICSP@commandByte,c
  4272  0074BE  0E0E               	movlw	14
  4273  0074C0  6E11               	movwf	writeICSP@dataBytes+1,c
  4274  0074C2  0E3C               	movlw	60
  4275  0074C4  6E10               	movwf	writeICSP@dataBytes,c
  4276  0074C6  EC52  F036         	call	_writeICSP	;wreg free
  4277                           
  4278                           ;FlashProg.c: 75: writeICSP(0x0, 0x6ef8);
  4279  0074CA  0E00               	movlw	0
  4280  0074CC  6E0F               	movwf	writeICSP@commandByte+1,c
  4281  0074CE  0E00               	movlw	0
  4282  0074D0  6E0E               	movwf	writeICSP@commandByte,c
  4283  0074D2  0E6E               	movlw	110
  4284  0074D4  6E11               	movwf	writeICSP@dataBytes+1,c
  4285  0074D6  0EF8               	movlw	248
  4286  0074D8  6E10               	movwf	writeICSP@dataBytes,c
  4287  0074DA  EC52  F036         	call	_writeICSP	;wreg free
  4288                           
  4289                           ;FlashProg.c: 76: writeICSP(0x0, 0x0e00);
  4290  0074DE  0E00               	movlw	0
  4291  0074E0  6E0F               	movwf	writeICSP@commandByte+1,c
  4292  0074E2  0E00               	movlw	0
  4293  0074E4  6E0E               	movwf	writeICSP@commandByte,c
  4294  0074E6  0E0E               	movlw	14
  4295  0074E8  6E11               	movwf	writeICSP@dataBytes+1,c
  4296  0074EA  0E00               	movlw	0
  4297  0074EC  6E10               	movwf	writeICSP@dataBytes,c
  4298  0074EE  EC52  F036         	call	_writeICSP	;wreg free
  4299                           
  4300                           ;FlashProg.c: 77: writeICSP(0x0, 0x6ef7);
  4301  0074F2  0E00               	movlw	0
  4302  0074F4  6E0F               	movwf	writeICSP@commandByte+1,c
  4303  0074F6  0E00               	movlw	0
  4304  0074F8  6E0E               	movwf	writeICSP@commandByte,c
  4305  0074FA  0E6E               	movlw	110
  4306  0074FC  6E11               	movwf	writeICSP@dataBytes+1,c
  4307  0074FE  0EF7               	movlw	247
  4308  007500  6E10               	movwf	writeICSP@dataBytes,c
  4309  007502  EC52  F036         	call	_writeICSP	;wreg free
  4310                           
  4311                           ;FlashProg.c: 78: writeICSP(0x0, 0x0e04);
  4312  007506  0E00               	movlw	0
  4313  007508  6E0F               	movwf	writeICSP@commandByte+1,c
  4314  00750A  0E00               	movlw	0
  4315  00750C  6E0E               	movwf	writeICSP@commandByte,c
  4316  00750E  0E0E               	movlw	14
  4317  007510  6E11               	movwf	writeICSP@dataBytes+1,c
  4318  007512  0E04               	movlw	4
  4319  007514  6E10               	movwf	writeICSP@dataBytes,c
  4320  007516  EC52  F036         	call	_writeICSP	;wreg free
  4321                           
  4322                           ;FlashProg.c: 79: writeICSP(0x0, 0x6ef6);
  4323  00751A  0E00               	movlw	0
  4324  00751C  6E0F               	movwf	writeICSP@commandByte+1,c
  4325  00751E  0E00               	movlw	0
  4326  007520  6E0E               	movwf	writeICSP@commandByte,c
  4327  007522  0E6E               	movlw	110
  4328  007524  6E11               	movwf	writeICSP@dataBytes+1,c
  4329  007526  0EF6               	movlw	246
  4330  007528  6E10               	movwf	writeICSP@dataBytes,c
  4331  00752A  EC52  F036         	call	_writeICSP	;wreg free
  4332                           
  4333                           ;FlashProg.c: 80: writeICSP(0xc, 0x8f8f);
  4334  00752E  0E00               	movlw	0
  4335  007530  6E0F               	movwf	writeICSP@commandByte+1,c
  4336  007532  0E0C               	movlw	12
  4337  007534  6E0E               	movwf	writeICSP@commandByte,c
  4338  007536  0E8F               	movlw	143
  4339  007538  6E11               	movwf	writeICSP@dataBytes+1,c
  4340  00753A  0E8F               	movlw	143
  4341  00753C  6E10               	movwf	writeICSP@dataBytes,c
  4342  00753E  EC52  F036         	call	_writeICSP	;wreg free
  4343                           
  4344                           ;FlashProg.c: 81: writeICSP(0x0, 0);
  4345  007542  0E00               	movlw	0
  4346  007544  6E0F               	movwf	writeICSP@commandByte+1,c
  4347  007546  0E00               	movlw	0
  4348  007548  6E0E               	movwf	writeICSP@commandByte,c
  4349  00754A  0E00               	movlw	0
  4350  00754C  6E11               	movwf	writeICSP@dataBytes+1,c
  4351  00754E  0E00               	movlw	0
  4352  007550  6E10               	movwf	writeICSP@dataBytes,c
  4353  007552  EC52  F036         	call	_writeICSP	;wreg free
  4354                           
  4355                           ;FlashProg.c: 82: writeBits(0, 4);
  4356  007556  0E00               	movlw	0
  4357  007558  6E06               	movwf	writeBits@pattern+1,c
  4358  00755A  0E00               	movlw	0
  4359  00755C  6E05               	movwf	writeBits@pattern,c
  4360  00755E  0E00               	movlw	0
  4361  007560  6E08               	movwf	writeBits@bitsToWrite+1,c
  4362  007562  0E04               	movlw	4
  4363  007564  6E07               	movwf	writeBits@bitsToWrite,c
  4364  007566  EC93  F036         	call	_writeBits	;wreg free
  4365                           
  4366                           ;FlashProg.c: 83: for(i = 0; i < 200 ; i++){}
  4367  00756A  0E00               	movlw	0
  4368  00756C  6E13               	movwf	bulkErase@i+1,c
  4369  00756E  0E00               	movlw	0
  4370  007570  6E12               	movwf	bulkErase@i,c
  4371  007572  5013               	movf	bulkErase@i+1,w,c
  4372  007574  0A80               	xorlw	128
  4373  007576  0F80               	addlw	-128
  4374  007578  0EC8               	movlw	200
  4375  00757A  B4D8               	btfsc	status,2,c
  4376  00757C  5C12               	subwf	bulkErase@i,w,c
  4377  00757E  B0D8               	btfsc	status,0,c
  4378  007580  D003               	goto	l1682
  4379  007582  4A12               	infsnz	bulkErase@i,f,c
  4380  007584  2A13               	incf	bulkErase@i+1,f,c
  4381  007586  D7F5               	goto	L15
  4382  007588                     l1682:
  4383                           
  4384                           ;FlashProg.c: 84: writeBits(0, 16);
  4385  007588  0E00               	movlw	0
  4386  00758A  6E06               	movwf	writeBits@pattern+1,c
  4387  00758C  0E00               	movlw	0
  4388  00758E  6E05               	movwf	writeBits@pattern,c
  4389  007590  0E00               	movlw	0
  4390  007592  6E08               	movwf	writeBits@bitsToWrite+1,c
  4391  007594  0E10               	movlw	16
  4392  007596  6E07               	movwf	writeBits@bitsToWrite,c
  4393  007598  EC93  F036         	call	_writeBits	;wreg free
  4394  00759C  0012               	return	
  4395  00759E                     __end_of_bulkErase:
  4396                           	opt stack 0
  4397                           prodl	equ	0xFF3
  4398                           postinc0	equ	0xFEE
  4399                           wreg	equ	0xFE8
  4400                           postinc1	equ	0xFE6
  4401                           postdec1	equ	0xFE5
  4402                           fsr1h	equ	0xFE2
  4403                           fsr1l	equ	0xFE1
  4404                           postinc2	equ	0xFDE
  4405                           postdec2	equ	0xFDD
  4406                           fsr2h	equ	0xFDA
  4407                           fsr2l	equ	0xFD9
  4408                           status	equ	0xFD8
  4409                           
  4410 ;; *************** function _writeICSP *****************
  4411 ;; Defined at:
  4412 ;;		line 5 in file "../src/PIC18/ICSP.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;  commandByte     2   13[COMRAM] unsigned int 
  4415 ;;  dataBytes       2   15[COMRAM] unsigned int 
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;		None
  4418 ;; Return value:  Size  Location     Type
  4419 ;;		None               void
  4420 ;; Registers used:
  4421 ;;		wreg, status,2, status,0, cstack
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4427 ;;      Params:         4       0       0       0       0       0       0
  4428 ;;      Locals:         0       0       0       0       0       0       0
  4429 ;;      Temps:          0       0       0       0       0       0       0
  4430 ;;      Totals:         4       0       0       0       0       0       0
  4431 ;;Total ram usage:        4 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; Hardware stack levels required when called:    3
  4434 ;; This function calls:
  4435 ;;		_writeBits
  4436 ;; This function is called by:
  4437 ;;		_bulkErase
  4438 ;;		_enableWrite
  4439 ;;		_flashSetAddress
  4440 ;;		_writeToBuffer
  4441 ;;		_flashWriteAndProgram
  4442 ;;		_rowErase
  4443 ;;		_readDeviceID1
  4444 ;;		_readDeviceID2
  4445 ;;		_flashWrite8Bits
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	text26
  4450  006CA4                     __ptext26:
  4451                           	opt stack 0
  4452  006CA4                     _writeICSP:
  4453                           	opt stack 24
  4454                           
  4455                           ;ICSP.c: 6: writeBits(commandByte, 4);
  4456                           
  4457                           ;incstack = 0
  4458  006CA4  C00E  F005         	movff	writeICSP@commandByte,writeBits@pattern
  4459  006CA8  C00F  F006         	movff	writeICSP@commandByte+1,writeBits@pattern+1
  4460  006CAC  0E00               	movlw	0
  4461  006CAE  6E08               	movwf	writeBits@bitsToWrite+1,c
  4462  006CB0  0E04               	movlw	4
  4463  006CB2  6E07               	movwf	writeBits@bitsToWrite,c
  4464  006CB4  EC93  F036         	call	_writeBits	;wreg free
  4465                           
  4466                           ;ICSP.c: 7: writeBits(dataBytes, 16);
  4467  006CB8  C010  F005         	movff	writeICSP@dataBytes,writeBits@pattern
  4468  006CBC  C011  F006         	movff	writeICSP@dataBytes+1,writeBits@pattern+1
  4469  006CC0  0E00               	movlw	0
  4470  006CC2  6E08               	movwf	writeBits@bitsToWrite+1,c
  4471  006CC4  0E10               	movlw	16
  4472  006CC6  6E07               	movwf	writeBits@bitsToWrite,c
  4473  006CC8  EC93  F036         	call	_writeBits	;wreg free
  4474  006CCC  0012               	return	
  4475  006CCE                     __end_of_writeICSP:
  4476                           	opt stack 0
  4477                           prodl	equ	0xFF3
  4478                           postinc0	equ	0xFEE
  4479                           wreg	equ	0xFE8
  4480                           postinc1	equ	0xFE6
  4481                           postdec1	equ	0xFE5
  4482                           fsr1h	equ	0xFE2
  4483                           fsr1l	equ	0xFE1
  4484                           postinc2	equ	0xFDE
  4485                           postdec2	equ	0xFDD
  4486                           fsr2h	equ	0xFDA
  4487                           fsr2l	equ	0xFD9
  4488                           status	equ	0xFD8
  4489                           
  4490 ;; *************** function _writeBits *****************
  4491 ;; Defined at:
  4492 ;;		line 16 in file "../src/PIC18/ICSP.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  pattern         2    4[COMRAM] unsigned int 
  4495 ;;  bitsToWrite     2    6[COMRAM] unsigned int 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  i               2   11[COMRAM] int 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;		None               void
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4507 ;;      Params:         4       0       0       0       0       0       0
  4508 ;;      Locals:         2       0       0       0       0       0       0
  4509 ;;      Temps:          3       0       0       0       0       0       0
  4510 ;;      Totals:         9       0       0       0       0       0       0
  4511 ;;Total ram usage:        9 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    2
  4514 ;; This function calls:
  4515 ;;		_writeBit
  4516 ;; This function is called by:
  4517 ;;		_bulkErase
  4518 ;;		_flashWriteAndProgram
  4519 ;;		_rowErase
  4520 ;;		_writeICSP
  4521 ;;		_readICSP
  4522 ;;		_readFirstByte
  4523 ;;		_flashWrite8Bits
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           	psect	text27
  4528  006D26                     __ptext27:
  4529                           	opt stack 0
  4530  006D26                     _writeBits:
  4531                           	opt stack 24
  4532                           
  4533                           ;ICSP.c: 17: int i=0;
  4534                           
  4535                           ;incstack = 0
  4536  006D26  0E00               	movlw	0
  4537  006D28  6E0D               	movwf	writeBits@i+1,c
  4538  006D2A  0E00               	movlw	0
  4539  006D2C  6E0C               	movwf	writeBits@i,c
  4540                           
  4541                           ;ICSP.c: 18: (TRISDbits.TRISD4 = 0);
  4542  006D2E  9895               	bcf	3989,4,c	;volatile
  4543                           
  4544                           ;ICSP.c: 19: while(i < bitsToWrite){
  4545  006D30  D015               	goto	l1406
  4546  006D32                     l1402:
  4547                           
  4548                           ;ICSP.c: 20: writeBit(((pattern>>i)&0x1));
  4549  006D32  C00C  F009         	movff	writeBits@i,??_writeBits
  4550  006D36  C005  F00A         	movff	writeBits@pattern,??_writeBits+1
  4551  006D3A  C006  F00B         	movff	writeBits@pattern+1,??_writeBits+2
  4552  006D3E  2A09               	incf	??_writeBits,f,c
  4553  006D40  D003               	goto	u654
  4554  006D42                     u655:
  4555  006D42  90D8               	bcf	status,0,c
  4556  006D44  320B               	rrcf	??_writeBits+2,f,c
  4557  006D46  320A               	rrcf	??_writeBits+1,f,c
  4558  006D48                     u654:
  4559  006D48  2E09               	decfsz	??_writeBits,f,c
  4560  006D4A  D7FB               	goto	u655
  4561  006D4C  0E01               	movlw	1
  4562  006D4E  140A               	andwf	??_writeBits+1,w,c
  4563  006D50  6E03               	movwf	writeBit@bitToWrite,c
  4564  006D52  6A04               	clrf	writeBit@bitToWrite+1,c
  4565  006D54  EC13  F036         	call	_writeBit	;wreg free
  4566                           
  4567                           ;ICSP.c: 21: i++;
  4568  006D58  4A0C               	infsnz	writeBits@i,f,c
  4569  006D5A  2A0D               	incf	writeBits@i+1,f,c
  4570  006D5C                     l1406:
  4571  006D5C  5007               	movf	writeBits@bitsToWrite,w,c
  4572  006D5E  5C0C               	subwf	writeBits@i,w,c
  4573  006D60  5008               	movf	writeBits@bitsToWrite+1,w,c
  4574  006D62  580D               	subwfb	writeBits@i+1,w,c
  4575  006D64  B0D8               	btfsc	status,0,c
  4576  006D66  0012               	return	
  4577  006D68  D7E4               	goto	l1402
  4578  006D6A                     __end_of_writeBits:
  4579                           	opt stack 0
  4580                           prodl	equ	0xFF3
  4581                           postinc0	equ	0xFEE
  4582                           wreg	equ	0xFE8
  4583                           postinc1	equ	0xFE6
  4584                           postdec1	equ	0xFE5
  4585                           fsr1h	equ	0xFE2
  4586                           fsr1l	equ	0xFE1
  4587                           postinc2	equ	0xFDE
  4588                           postdec2	equ	0xFDD
  4589                           fsr2h	equ	0xFDA
  4590                           fsr2l	equ	0xFD9
  4591                           status	equ	0xFD8
  4592                           
  4593 ;; *************** function _writeBit *****************
  4594 ;; Defined at:
  4595 ;;		line 10 in file "../src/PIC18/ICSP.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  bitToWrite      2    2[COMRAM] unsigned int 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;		None
  4600 ;; Return value:  Size  Location     Type
  4601 ;;		None               void
  4602 ;; Registers used:
  4603 ;;		cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4609 ;;      Params:         2       0       0       0       0       0       0
  4610 ;;      Locals:         0       0       0       0       0       0       0
  4611 ;;      Temps:          0       0       0       0       0       0       0
  4612 ;;      Totals:         2       0       0       0       0       0       0
  4613 ;;Total ram usage:        2 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    1
  4616 ;; This function calls:
  4617 ;;		_PGC_high
  4618 ;;		_PGC_low
  4619 ;;		_writePGD
  4620 ;; This function is called by:
  4621 ;;		_writeBits
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text28
  4626  006C26                     __ptext28:
  4627                           	opt stack 0
  4628  006C26                     _writeBit:
  4629                           	opt stack 24
  4630                           
  4631                           ;ICSP.c: 11: PGC_high();
  4632                           
  4633                           ;incstack = 0
  4634  006C26  ECDB  F035         	call	_PGC_high	;wreg free
  4635                           
  4636                           ;ICSP.c: 12: writePGD(bitToWrite);
  4637  006C2A  C003  F001         	movff	writeBit@bitToWrite,writePGD@data
  4638  006C2E  C004  F002         	movff	writeBit@bitToWrite+1,writePGD@data+1
  4639  006C32  ECEA  F035         	call	_writePGD	;wreg free
  4640                           
  4641                           ;ICSP.c: 13: PGC_low();
  4642  006C36  ECDD  F035         	call	_PGC_low	;wreg free
  4643  006C3A  0012               	return	
  4644  006C3C                     __end_of_writeBit:
  4645                           	opt stack 0
  4646                           prodl	equ	0xFF3
  4647                           postinc0	equ	0xFEE
  4648                           wreg	equ	0xFE8
  4649                           postinc1	equ	0xFE6
  4650                           postdec1	equ	0xFE5
  4651                           fsr1h	equ	0xFE2
  4652                           fsr1l	equ	0xFE1
  4653                           postinc2	equ	0xFDE
  4654                           postdec2	equ	0xFDD
  4655                           fsr2h	equ	0xFDA
  4656                           fsr2l	equ	0xFD9
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function _writePGD *****************
  4660 ;; Defined at:
  4661 ;;		line 10 in file "../src/PIC18/FlashProg.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;  data            2    0[COMRAM] int 
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;		None
  4666 ;; Return value:  Size  Location     Type
  4667 ;;		None               void
  4668 ;; Registers used:
  4669 ;;		None
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4675 ;;      Params:         2       0       0       0       0       0       0
  4676 ;;      Locals:         0       0       0       0       0       0       0
  4677 ;;      Temps:          0       0       0       0       0       0       0
  4678 ;;      Totals:         2       0       0       0       0       0       0
  4679 ;;Total ram usage:        2 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; This function calls:
  4682 ;;		Nothing
  4683 ;; This function is called by:
  4684 ;;		_PGD_low
  4685 ;;		_MCLR_low
  4686 ;;		_writeBit
  4687 ;;		_PGD_high
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           	psect	text29
  4692  006BD4                     __ptext29:
  4693                           	opt stack 0
  4694  006BD4                     _writePGD:
  4695                           	opt stack 24
  4696                           
  4697                           ;FlashProg.c: 11: PORTDbits.RD4 = data;
  4698                           
  4699                           ;incstack = 0
  4700  006BD4  B001               	btfsc	writePGD@data,0,c
  4701  006BD6  D002               	bra	u645
  4702  006BD8  9883               	bcf	3971,4,c	;volatile
  4703  006BDA  D001               	bra	u646
  4704  006BDC                     u645:
  4705  006BDC  8883               	bsf	3971,4,c	;volatile
  4706  006BDE                     u646:
  4707  006BDE  0012               	return	
  4708  006BE0                     __end_of_writePGD:
  4709                           	opt stack 0
  4710                           prodl	equ	0xFF3
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           postinc1	equ	0xFE6
  4714                           postdec1	equ	0xFE5
  4715                           fsr1h	equ	0xFE2
  4716                           fsr1l	equ	0xFE1
  4717                           postinc2	equ	0xFDE
  4718                           postdec2	equ	0xFDD
  4719                           fsr2h	equ	0xFDA
  4720                           fsr2l	equ	0xFD9
  4721                           status	equ	0xFD8
  4722                           
  4723 ;; *************** function _PGC_low *****************
  4724 ;; Defined at:
  4725 ;;		line 26 in file "../src/PIC18/FlashProg.c"
  4726 ;; Parameters:    Size  Location     Type
  4727 ;;		None
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;		None
  4730 ;; Return value:  Size  Location     Type
  4731 ;;		None               void
  4732 ;; Registers used:
  4733 ;;		None
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4739 ;;      Params:         0       0       0       0       0       0       0
  4740 ;;      Locals:         0       0       0       0       0       0       0
  4741 ;;      Temps:          0       0       0       0       0       0       0
  4742 ;;      Totals:         0       0       0       0       0       0       0
  4743 ;;Total ram usage:        0 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		_enter_HVP
  4749 ;;		_exit_HVP
  4750 ;;		_flashWriteAndProgram
  4751 ;;		_rowErase
  4752 ;;		_writeBit
  4753 ;;		_readBit
  4754 ;;		_flashWrite8Bits
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           	psect	text30
  4759  006BBA                     __ptext30:
  4760                           	opt stack 0
  4761  006BBA                     _PGC_low:
  4762                           	opt stack 24
  4763                           
  4764                           ;FlashProg.c: 27: PORTDbits.RD5 = 0;
  4765                           
  4766                           ;incstack = 0
  4767  006BBA  9A83               	bcf	3971,5,c	;volatile
  4768  006BBC  0012               	return	
  4769  006BBE                     __end_of_PGC_low:
  4770                           	opt stack 0
  4771                           prodl	equ	0xFF3
  4772                           postinc0	equ	0xFEE
  4773                           wreg	equ	0xFE8
  4774                           postinc1	equ	0xFE6
  4775                           postdec1	equ	0xFE5
  4776                           fsr1h	equ	0xFE2
  4777                           fsr1l	equ	0xFE1
  4778                           postinc2	equ	0xFDE
  4779                           postdec2	equ	0xFDD
  4780                           fsr2h	equ	0xFDA
  4781                           fsr2l	equ	0xFD9
  4782                           status	equ	0xFD8
  4783                           
  4784 ;; *************** function _PGC_high *****************
  4785 ;; Defined at:
  4786 ;;		line 22 in file "../src/PIC18/FlashProg.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;		None
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;		None
  4791 ;; Return value:  Size  Location     Type
  4792 ;;		None               void
  4793 ;; Registers used:
  4794 ;;		None
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4800 ;;      Params:         0       0       0       0       0       0       0
  4801 ;;      Locals:         0       0       0       0       0       0       0
  4802 ;;      Temps:          0       0       0       0       0       0       0
  4803 ;;      Totals:         0       0       0       0       0       0       0
  4804 ;;Total ram usage:        0 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_flashWriteAndProgram
  4810 ;;		_rowErase
  4811 ;;		_writeBit
  4812 ;;		_readBit
  4813 ;;		_flashWrite8Bits
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           	psect	text31
  4818  006BB6                     __ptext31:
  4819                           	opt stack 0
  4820  006BB6                     _PGC_high:
  4821                           	opt stack 24
  4822                           
  4823                           ;FlashProg.c: 23: PORTDbits.RD5 = 1;
  4824                           
  4825                           ;incstack = 0
  4826  006BB6  8A83               	bsf	3971,5,c	;volatile
  4827  006BB8  0012               	return	
  4828  006BBA                     __end_of_PGC_high:
  4829                           	opt stack 0
  4830  0000                     prodl	equ	0xFF3
  4831                           postinc0	equ	0xFEE
  4832                           wreg	equ	0xFE8
  4833                           postinc1	equ	0xFE6
  4834                           postdec1	equ	0xFE5
  4835                           fsr1h	equ	0xFE2
  4836                           fsr1l	equ	0xFE1
  4837                           postinc2	equ	0xFDE
  4838                           postdec2	equ	0xFDD
  4839                           fsr2h	equ	0xFDA
  4840                           fsr2l	equ	0xFD9
  4841                           status	equ	0xFD8
  4842                           prodl	equ	0xFF3
  4843                           postinc0	equ	0xFEE
  4844                           wreg	equ	0xFE8
  4845                           postinc1	equ	0xFE6
  4846                           postdec1	equ	0xFE5
  4847                           fsr1h	equ	0xFE2
  4848                           fsr1l	equ	0xFE1
  4849                           postinc2	equ	0xFDE
  4850                           postdec2	equ	0xFDD
  4851                           fsr2h	equ	0xFDA
  4852                           fsr2l	equ	0xFD9
  4853                           status	equ	0xFD8
  4854                           
  4855                           	psect	rparam
  4856  0000                     prodl	equ	0xFF3
  4857                           postinc0	equ	0xFEE
  4858                           wreg	equ	0xFE8
  4859                           postinc1	equ	0xFE6
  4860                           postdec1	equ	0xFE5
  4861                           fsr1h	equ	0xFE2
  4862                           fsr1l	equ	0xFE1
  4863                           postinc2	equ	0xFDE
  4864                           postdec2	equ	0xFDD
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     89     121
    BANK0           128    128     128
    BANK1           256    256     256
    BANK2           256    160     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    overwriteBufferData@data	PTR unsigned int  size(2) Largest target is 200
		 -> flashWriteData@newData(BANK1[200]), 

    flashWriteData@data	PTR unsigned int  size(2) Largest target is 128
		 -> main@blockWrite5(BANK0[128]), 

    flashWriteBlock@secondHalf	PTR unsigned int  size(2) Largest target is 32
		 -> halfBuffer2(BANK2[32]), main@blockWrite3(BANK2[32]), main@blockWrite1(BANK2[32]), 

    flashWriteBlock@firstHalf	PTR unsigned int  size(2) Largest target is 32
		 -> halfBuffer1(COMRAM[32]), main@blockWrite2(BANK2[32]), main@blockWrite0(BANK1[32]), 

    flashReadBlock@data	PTR unsigned int  size(2) Largest target is 64
		 -> blockBuffer(BANK2[64]), main@blockRead(BANK2[64]), 


Critical Paths under _main in COMRAM

    _main->_flashWriteData
    _flashWriteData->_flashReadBlock
    _flashWriteData->_flashWriteBlock
    _rowErase->_flashSetAddress
    _overwriteBufferData->_loadHalfBuffer
    _flashWriteBlock->_flashSetAddress
    _writeToBuffer->_writeICSP
    _flashWriteAndProgram->_writeICSP
    _flashReadBlock->_flashSetAddress
    _flashSetAddress->_writeICSP
    _flashRead16Bits->_readFirstByte
    _flashRead16Bits->_readICSP
    _readICSP->_readBits
    _readFirstByte->_readBits
    _readBits->_readBit
    _readBit->_readPGD
    _PGD_low->_writePGD
    _MCLR_low->_writePGD
    _enableWrite->_writeICSP
    _bulkErase->_writeICSP
    _writeICSP->_writeBits
    _writeBits->_writeBit
    _writeBit->_writePGD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_flashWriteData

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               348   348      0  138682
                                             71 COMRAM    18    18      0
                                              0 BANK0    128   128      0
                                            222 BANK1     34    34      0
                                              0 BANK2    160   160      0
                          _bulkErase
                        _enableWrite
                          _enter_HVP
                           _exit_HVP
                     _flashReadBlock
                    _flashWriteBlock
                     _flashWriteData
                           _trisInit
 ---------------------------------------------------------------------------------
 (1) _trisInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flashWriteData                                     238   230      8   74213
                                             55 COMRAM    16     8      8
                                              0 BANK1    222   222      0
                     _flashReadBlock
                    _flashSetAddress
                    _flashWriteBlock
                     _loadHalfBuffer
                _overwriteBufferData
                           _rowErase
 ---------------------------------------------------------------------------------
 (2) _rowErase                                             6     2      4   19577
                                             37 COMRAM     6     2      4
                           _PGC_high
                            _PGC_low
                            _PGD_low
                    _flashSetAddress
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (2) _overwriteBufferData                                 20    14      6     713
                                              8 COMRAM    20    14      6
                     _loadHalfBuffer
 ---------------------------------------------------------------------------------
 (3) _loadHalfBuffer                                       8     8      0     182
                                              0 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (2) _flashWriteBlock                                     18    10      8   28964
                                             37 COMRAM    18    10      8
                    _flashSetAddress
               _flashWriteAndProgram
                      _writeToBuffer
 ---------------------------------------------------------------------------------
 (3) _writeToBuffer                                        2     0      2    8392
                                             17 COMRAM     2     0      2
                          _writeICSP
 ---------------------------------------------------------------------------------
 (3) _flashWriteAndProgram                                 4     2      2   11008
                                             17 COMRAM     4     2      2
                           _PGC_high
                            _PGC_low
                            _PGD_low
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (2) _flashReadBlock                                      18    10      8   14952
                                             37 COMRAM    18    10      8
                    _flashRead16Bits
                    _flashSetAddress
 ---------------------------------------------------------------------------------
 (3) _flashSetAddress                                     20    16      4    8697
                                             17 COMRAM    20    16      4
                          _writeICSP
 ---------------------------------------------------------------------------------
 (3) _flashRead16Bits                                      6     4      2    5160
                                             18 COMRAM     6     4      2
                      _readFirstByte
                           _readICSP
 ---------------------------------------------------------------------------------
 (4) _readICSP                                             4     2      2    2534
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (4) _readFirstByte                                        4     2      2    2557
                                             14 COMRAM     4     2      2
                           _readBits
                          _writeBits
 ---------------------------------------------------------------------------------
 (5) _readBits                                             7     5      2     265
                                              7 COMRAM     7     5      2
                            _readBit
 ---------------------------------------------------------------------------------
 (6) _readBit                                              4     2      2      23
                                              3 COMRAM     4     2      2
                           _PGC_high
                            _PGC_low
                            _readPGD
 ---------------------------------------------------------------------------------
 (7) _readPGD                                              3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _exit_HVP                                             0     0      0     556
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                            _PGM_low
 ---------------------------------------------------------------------------------
 (2) _PGM_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enter_HVP                                            0     0      0     556
                          _MCLR_high
                           _MCLR_low
                            _PGC_low
                            _PGD_low
                           _PGM_high
 ---------------------------------------------------------------------------------
 (2) _PGM_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PGD_low                                              0     0      0     278
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_low                                             0     0      0     278
                           _writePGD
 ---------------------------------------------------------------------------------
 (2) _MCLR_high                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableWrite                                          0     0      0    8178
                          _writeICSP
 ---------------------------------------------------------------------------------
 (1) _bulkErase                                            2     2      0   10471
                                             17 COMRAM     2     2      0
                          _writeBits
                          _writeICSP
 ---------------------------------------------------------------------------------
 (3) _writeICSP                                            4     0      4    8178
                                             13 COMRAM     4     0      4
                          _writeBits
 ---------------------------------------------------------------------------------
 (4) _writeBits                                            9     5      4    2246
                                              4 COMRAM     9     5      4
                           _writeBit
 ---------------------------------------------------------------------------------
 (5) _writeBit                                             2     0      2     364
                                              2 COMRAM     2     0      2
                           _PGC_high
                            _PGC_low
                           _writePGD
 ---------------------------------------------------------------------------------
 (6) _writePGD                                             2     0      2     278
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _PGC_low                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PGC_high                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bulkErase
     _writeBits
       _writeBit
         _PGC_high
         _PGC_low
         _writePGD
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enableWrite
     _writeICSP
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
   _enter_HVP
     _MCLR_high
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_high
   _exit_HVP
     _MCLR_low
       _writePGD
     _PGC_low
     _PGD_low
       _writePGD
     _PGM_low
   _flashReadBlock
     _flashRead16Bits
       _readFirstByte
         _readBits
           _readBit
             _PGC_high
             _PGC_low
             _readPGD
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
       _readICSP
         _readBits
           _readBit
             _PGC_high
             _PGC_low
             _readPGD
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _flashSetAddress
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
   _flashWriteBlock
     _flashSetAddress
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _flashWriteAndProgram
       _PGC_high
       _PGC_low
       _PGD_low
         _writePGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _writeToBuffer
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
   _flashWriteData
     _flashReadBlock
       _flashRead16Bits
         _readFirstByte
           _readBits
             _readBit
               _PGC_high
               _PGC_low
               _readPGD
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
         _readICSP
           _readBits
             _readBit
               _PGC_high
               _PGC_low
               _readPGD
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _flashSetAddress
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
     _flashSetAddress
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
     _flashWriteBlock
       _flashSetAddress
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _flashWriteAndProgram
         _PGC_high
         _PGC_low
         _PGD_low
           _writePGD
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _writeToBuffer
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
     _loadHalfBuffer
     _overwriteBufferData
       _loadHalfBuffer
     _rowErase
       _PGC_high
       _PGC_low
       _PGD_low
         _writePGD
       _flashSetAddress
         _writeICSP
           _writeBits
             _writeBit
               _PGC_high
               _PGC_low
               _writePGD
       _writeBits
         _writeBit
           _PGC_high
           _PGC_low
           _writePGD
       _writeICSP
         _writeBits
           _writeBit
             _PGC_high
             _PGC_low
             _writePGD
   _trisInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     A0     100       8      100.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100    100     100       6      100.0%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80     80      80       4      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     59      79       1       95.3%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2F9      14        0.0%
DATA                 0      0     2F9      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Dec 11 00:11:13 2014

            flashWriteBlock@blockSelect 0032              flashWriteBlock@blockNumber 002A  
                                   l229 70F0                                     l238 702A  
                                   l185 78A2                                     u630 6C1C  
                                   u645 6BDC                                     u805 71FC  
                                   u646 6BDE                                     u654 6D48  
                                   u638 6C1E                                     u655 6D42  
                                   u674 6E22                                     u690 7156  
                                   u675 6E1C                                     u940 795E  
                                   u695 714C                                     u785 6EEC  
                                   u945 7954                                     u955 7964  
                                   u980 7A54                                     u990 7AEE  
                                   u985 7A4A                                     u995 7AE4  
                  _flashWriteAndProgram 6E54                                     wreg 000FE8  
                  overwriteBufferData@i 001B                    overwriteBufferData@j 0011  
                           main@address 004A                __size_of_flashRead16Bits 002E  
                          __CFG_LVP$OFF 000000                            __CFG_WDT$OFF 000000  
                                  l1402 6D32                                    l1412 6E10  
                                  l1406 6D5C                                    l1416 6E36  
                                  l1504 6FCC                                    l1610 7046  
                                  l1540 6F52                                    l1604 740C  
                                  l1470 6EA2                                    l1622 70F8  
                                  l1536 6F30                                    l1616 7082  
                                  l1712 7A20                                    l1482 6EC4  
                                  l1714 7A2E                                    l1706 79F0  
                                  l1740 7CC8                                    l1574 72E2  
                                  l1558 7272                                    l1734 7C80  
                                  l1742 7CDC                                    l1592 73EA  
                                  l1744 7CE2                                    l1682 7588  
                                  l1842 762E                                    l1694 78EE  
                                  l1870 76CE                                    l1856 767E  
                                  l1698 7930                                    l1884 771E  
                                  l1898 776E                                    u1010 7B3C  
                                  u1005 7AF4                                    u1015 7B32  
                                  u1025 7B42                                    u1050 7C1A  
                                  u1045 7BB2                                    u1055 7C10  
                                  u1065 7C20                           __CFG_DEBUG$ON 000000  
                       __end_of_PGC_low 6BBE                            __CFG_PWRT$ON 000000  
                       __end_of_PGD_low 6BEE                         __end_of_PGM_low 6BCA  
                                  _main 759E                                    fsr1h 000FE2  
                                  fsr2h 000FDA                                    fsr1l 000FE1  
                                  fsr2l 000FD9                                    prodl 000FF3  
                                  start 0002                      __size_of_MCLR_high 0004  
                      __end_of_MCLR_low 6C00                                   ?_main 0001  
                 ?_flashWriteAndProgram 0012                __size_of_flashSetAddress 00E4  
                      __end_of_PGC_high 6BBA                 __size_of_loadHalfBuffer 00C2  
                      __end_of_PGM_high 6BC6                         __end_of_readPGD 6C26  
                       __end_of_readBit 6C86                        ??_flashReadBlock 002E  
                                 main@i 01FE                     _overwriteBufferData 702C  
                                 status 000FD8                         __initialization 6C86  
                          __end_of_main 78A4                    ?_overwriteBufferData 0009  
                __size_of_readFirstByte 004C                      flashWriteData@data 0038  
                         main@blockRead 0200                                  ??_main 0048  
                    flashWriteData@size 003A                           __activetblptr 000000  
                             ??_PGC_low 0001                               ??_PGD_low 0003  
                     __end_of_MCLR_high 6BC2                             readBit@data 0006  
                  __size_of_enableWrite 002A                               ??_PGM_low 0001  
                      ??_flashWriteData 0040                       ??_flashRead16Bits 0015  
                     readFirstByte@data 0011                __size_of_flashWriteBlock 0112  
                      __end_of_readICSP 6DB0               flashWriteData@memoryBlock 01D2  
                 flashWriteData@address 003C                   ??_overwriteBufferData 000F  
                      __end_of_readBits 6E54                        __end_of_exit_HVP 6C12  
                                clear_0 6C8C                                  clear_1 6C98  
                ??_flashWriteAndProgram 0014                   flashWriteData@newData 0100  
                             ??_readPGD 0003                               ??_readBit 0006  
                 flashWriteData@newSize 01D0                        __end_of_rowErase 7422  
             flashWriteData@nextDataSet 01CA                        __end_of_trisInit 6BD4  
                     ??_flashSetAddress 0016                   flashWriteAndProgram@i 0014  
                      __end_of_writePGD 6BE0                        __end_of_writeBit 6C3C  
               overwriteBufferData@data 0009                           _readFirstByte 6DB0  
                            __accesstop 0080                 __end_of__initialization 6C9E  
                          readICSP@data 0011              flashWriteData@timesToWrite 01CC  
                             ?_MCLR_low 0001                  __size_of_writeToBuffer 0016  
                             ?_PGC_high 0001                         loadHalfBuffer@i 0007  
                       loadHalfBuffer@j 0005                          __pcstackCOMRAM 0001  
                       flashWriteData@i 01DC                         flashWriteData@j 01C8  
                       flashWriteData@k 01CE                               ?_PGM_high 0001  
        overwriteBufferData@sizeToWrite 000B               flashReadBlock@blockSelect 0032  
             flashReadBlock@blockNumber 002A                          _loadHalfBuffer 6F6A  
                    __size_of_bulkErase 017C                          ?_readFirstByte 000F  
             flashWriteBlock@secondHalf 0028                              __pbssBANK2 02A0  
                    __size_of_enter_HVP 0016                              ??_MCLR_low 0003  
                            ??_PGC_high 0001                              ??_PGM_high 0001  
                     ??_flashWriteBlock 002E                            readBits@data 000D  
                __end_of_loadHalfBuffer 702C                           _writeToBuffer 6C52  
                               _PGC_low 6BBA                                 _PGD_low 6BE0  
                               _PGM_low 6BC6                               ?_readICSP 000F  
                             ?_readBits 0008                               ?_exit_HVP 0001  
                    __size_of_writeICSP 002A                      __size_of_writeBits 0044  
                               __Hparam 0000                                 __Lparam 0000  
       flashWriteData@currentStartPoint 01D4                               ?_rowErase 0026  
                     __end_of_bulkErase 759E                      writeBit@bitToWrite 0003  
                             ?_trisInit 0001                       __end_of_enter_HVP 6C52  
                               __pcinit 6C86                                 __ramtop 0600  
                             ?_writePGD 0001                               ?_writeBit 0003  
                               __ptext0 759E                                 __ptext1 6BCA  
                               __ptext2 78A4                                 __ptext3 72FC  
                               __ptext4 702C                                 __ptext5 6F6A  
                               __ptext6 71EA                                 __ptext7 6C52  
                               __ptext8 6E54                                 __ptext9 6EDA  
                        ?_writeToBuffer 0012                         ?_loadHalfBuffer 0001  
                               _readPGD 6C12                                 _readBit 6C68  
                          writePGD@data 0001                         _flashRead16Bits 6CF8  
                       ??_readFirstByte 0011                    end_of_initialization 6C9E  
                            ??_readICSP 0011                               _MCLR_high 6BBE  
                            ??_readBits 000A                              ??_exit_HVP 0003  
                flashSetAddress@address 0012                              ??_rowErase 002A  
                               postdec1 000FE5                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                  flashSetAddress@lowAddr 0022  
                            ??_trisInit 0001                              ??_writePGD 0003  
                            ??_writeBit 0005                         _flashSetAddress 7106  
                             _PORTDbits 000F83                       __end_of_writeICSP 6CCE  
                     __end_of_writeBits 6D6A                           ??_enableWrite 0012  
              overwriteBufferData@start 0017                               _TRISDbits 000F95  
                      writeBits@pattern 0005                              ?_MCLR_high 0001  
                            bulkErase@i 0012     overwriteBufferData@bufferStartPoint 000D  
           __end_of_overwriteBufferData 7106                 __size_of_flashReadBlock 0090  
                     __size_of_MCLR_low 0012                        flashWriteBlock@i 0036  
                     __size_of_PGC_high 0004                 __end_of_flashRead16Bits 6D26  
                       ??_writeToBuffer 0014                       __size_of_PGM_high 0004  
         __size_of_flashWriteAndProgram 0086                    writeICSP@commandByte 000E  
                   start_initialization 6C86                     __end_of_enableWrite 6CF8  
          overwriteBufferData@bytesLeft 0013                        __CFG_OSC$INTIO67 000000  
                       _flashWriteBlock 71EA                 __size_of_flashWriteData 045C  
               __end_of_flashSetAddress 71EA                      writeICSP@dataBytes 0010  
                       main@blockWrite0 01DE                         main@blockWrite1 0240  
                       main@blockWrite2 0260                         main@blockWrite3 0280  
                       main@blockWrite5 0080                             __pbssCOMRAM 005A  
                         __pcstackBANK0 0080                           __pcstackBANK1 0100  
                         __pcstackBANK2 0200                                ?_PGC_low 0001  
                              ?_PGD_low 0001                                ?_PGM_low 0001  
                           ??_MCLR_high 0001                             _halfBuffer1 005A  
                           _halfBuffer2 02E0                       __size_of_readICSP 0046  
                     __size_of_readBits 0058                       __size_of_exit_HVP 0012  
overwriteBufferData@availableWriteSpace 0019                             _blockBuffer 02A0  
                      ??_loadHalfBuffer 0001                       __size_of_rowErase 0126  
                      ?_flashRead16Bits 0013                               _bulkErase 7422  
                     __size_of_trisInit 000A                                ?_readPGD 0001  
                              ?_readBit 0004                flashRead16Bits@firstData 0015  
                             _enter_HVP 6C3C                       __size_of_writePGD 000C  
                           _enableWrite 6CCE                       __size_of_writeBit 0016  
               __end_of_flashWriteBlock 72FC                                _MCLR_low 6BEE  
                     writeToBuffer@data 0012                          _flashReadBlock 6EDA  
                              _PGC_high 6BB6                        ?_flashSetAddress 0012  
                              _PGM_high 6BC2                              ?_bulkErase 0001  
                             main@data0 0050                               main@data1 0052  
                             main@data2 0054                               main@data3 0056  
                             main@data4 004E                               main@data5 0058  
                            ?_enter_HVP 0001                               _writeICSP 6CA4  
                             _writeBits 6D26                        __size_of_PGC_low 0004  
                      __size_of_PGD_low 000E                      readBits@bitsToRead 0008  
                      __size_of_PGM_low 0004                   __end_of_readFirstByte 6DFC  
              flashWriteData@newAddress 01D8                  __end_of_flashReadBlock 6F6A  
                             readBits@i 000B                                __Hrparam 0000  
                        _flashWriteData 78A4                                __Lrparam 0000  
                      __size_of_readPGD 0014                        __size_of_readBit 001E  
              flashWriteBlock@firstHalf 0026                              ?_writeICSP 000E  
                              __ptext10 7106                                __ptext11 6CF8  
                              __ptext20 6BC2                                __ptext12 6D6A  
                              __ptext21 6BE0                                __ptext13 6DB0  
                              __ptext30 6BBA                                __ptext22 6BEE  
                              __ptext14 6DFC                                __ptext31 6BB6  
                              __ptext23 6BBE                                __ptext15 6C68  
                              __ptext24 6CCE                                __ptext16 6C12  
                              __ptext25 7422                                __ptext17 6C00  
                              __ptext26 6CA4                                __ptext18 6BC6  
                              __ptext27 6D26                                __ptext19 6C3C  
                              __ptext28 6C26                                __ptext29 6BD4  
                            ?_writeBits 0005         overwriteBufferData@bytesWritten 0015  
                      ?_flashWriteBlock 0026                                _readICSP 6D6A  
                              _readBits 6DFC                         rowErase@address 0026  
                              _exit_HVP 6C00                           __size_of_main 0306  
                       ?_flashReadBlock 0026            __end_of_flashWriteAndProgram 6EDA  
                __end_of_flashWriteData 7D00                    writeBits@bitsToWrite 0007  
                            writeBits@i 000C                                _rowErase 72FC  
                             rowErase@i 002A                                _trisInit 6BCA  
          __size_of_overwriteBufferData 00DA                             ??_bulkErase 0012  
                              _writePGD 6BD4                                _writeBit 6C26  
                 __end_of_writeToBuffer 6C68                             ??_enter_HVP 0003  
                       ?_flashWriteData 0038                 flashSetAddress@highAddr 001E  
                    flashReadBlock@data 0026                      flashReadBlock@size 0028  
              flashWriteAndProgram@data 0012                flashSetAddress@upperAddr 001A  
                          ?_enableWrite 0001                             ??_writeICSP 0012  
                           ??_writeBits 0009              flashWriteData@bytesWritten 01D6  
                   flashRead16Bits@data 0017                         flashReadBlock@i 0036  
